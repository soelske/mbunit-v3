<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Feature.Services</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Feature.Services.ActionsMenu.IOverridingWorkflowProvider">
            <summary>
            Overrides refactoring action (Ex: Inline rename overrides basic rename for local variables)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ActionsMenu.IOverridingWorkflowProvider.HideOtherActions(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Returns if all other refactorings should be hidden in this context...
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bookmarks.BookmarksHelper">
            <summary>
            Helper methods for bookmarks.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bookmarks.BookmarksHelper.GetBookmarkCoordsOffset(JetBrains.DocumentModel.IDocument,JetBrains.DocumentModel.DocumentCoords)">
            <summary>
            Returns offset of bookmark in specified document, corrected by real document content structure.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bookmarks.XmlDocumentHelper">
            <summary>
            Helper to work with <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bookmarks.XmlDocumentHelper.GetChildElements(System.Xml.XmlNode)">
            <summary>
            Return all child <see cref="T:System.Xml.XmlElement"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bookmarks.XmlDocumentHelper.GetChildElements(System.Xml.XmlNode,System.String)">
            <summary>
            Return all child <see cref="T:System.Xml.XmlElement"/> with specified name.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.IContextActionDataProvider.GetSelectedElement``1(System.Boolean,System.Boolean)">
            <summary>
            Returns element under caret
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="checkDocumentRange">If documentRange should be cheked for valid</param>
            <param name="ignoreSpaces">If spaces should be ignored</param>
            <returns>Element under caret</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bulbs.ContextActionAttribute">
            <summary>
            Indicates that the class, marked with this attribute, is a context action.
            It should have public constructor with signature (ISolution, ITextControl)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Bulbs.ContextActionAttribute.Disabled">
            <summary>
            If action is disabled by default
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bulbs.FunctionalGroupAttribute">
            <summary>
            This attribute is used to set custom icon for group of CAs and QFses
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.FunctionalGroupAttribute.IconForReason(JetBrains.ReSharper.Feature.Services.Bulbs.ActionAvailabilityReason)">
            <summary>
            Returns custom icon for group
            </summary>
            <param name="reason">Just ignore this in common case. Or use if your
            icon depends on severety.</param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Bulbs.FunctionalGroupAttribute.Order">
            <summary>
            Used to ensure groups order. 
            Refactoring actions - 0
            Generate asctions - 10
            Default actions - 50   
            Configure actions - 100
            Configure highlighting actions - 500
            Disable highlighting actions - 510
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.ICustomHighlightingActionProvider">
            <summary>
            Class should be marked by <see cref="T:JetBrains.ReSharper.Daemon.CustomHighlightingActionProviderAttribute"/> attribute and should implement
            <see cref="T:JetBrains.ReSharper.Daemon.ICustomHighlightingActionProvider"/> interface to be able to provide custom actions for highlighting
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.CustomHighlightingActionProviderAttribute">
            <summary>
            Class should be marked by <see cref="T:JetBrains.ReSharper.Daemon.CustomHighlightingActionProviderAttribute"/> attribute and should implement
            <see cref="T:JetBrains.ReSharper.Daemon.ICustomHighlightingActionProvider"/> interface to be able to provide custom actions for highlighting
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.IQuickFixes.DisableWarningActions(JetBrains.ReSharper.Daemon.IHighlighting,JetBrains.ProjectModel.ISolution,JetBrains.DocumentModel.DocumentRange)">
            <summary>
             Get actions which could disable given specific highlighting
             </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bulbs.IContextActionDataBuilder">
            <summary>
            Since context actions calculates at working thread, some data must be pre-calculated in UI thread (e.g. using VS API).
            Using class marked with <see cref="T:JetBrains.ReSharper.Feature.Services.Bulbs.ContextActionDataBuilderAttribute"/> 
            and implementing IContextActionDataBuilder&lt;TFile&gt; interface.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.IContextActionDataBuilder.Build(JetBrains.ProjectModel.ISolution,JetBrains.TextControl.ITextControl)">
            <summary>
            Calculates and returns IContextActionDataProvider
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bulbs.QuickFixAttribute">
            <summary>
            Indicates that the class, marked with this attribute, is a quick-fix. 
            It will be automatically registered for all errors, 
            for which it has public constructors
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.IBulbAction.IsAvailable(JetBrains.Util.IUserDataHolder)">
            <summary>
            Check if this action is available at the constructed context.
            Actions could store precalculated info in <paramref name="cache"/> to share it between different actions
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbAction">
            <summary>
            QuickFix that appears in popup window. It NEVER appears in bulb menu.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbAction.PopupKey">
            <summary>
            This key used for popup supressing if user pressed 'Esc' key
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbAction.PopupAnchorings">
            <summary>
            Use Anchoring2D.AnchorTopOrBottom by default
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.ContextActionTable.InstantiateAvailableActions(System.Collections.Generic.IDictionary{System.Type,JetBrains.ReSharper.Feature.Services.Bulbs.IContextActionDataProvider},JetBrains.Util.IUserDataHolder,System.Boolean)">
            <summary>
            Cache some data using <see cref="T:JetBrains.ReSharper.Feature.Services.Bulbs.IContextActionDataBuilder"/> in UI thread
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bulbs.IContextActionInfo">
            <summary>
            Info about loaded context action
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Bulbs.IContextActionInfo.Type">
            <summary>
            Class type which implements this action
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Bulbs.IContextActionInfo.ParameterType">
            <summary>
            Type of CA constructor parameter
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanup.myRecentlyLoadedProfiles">
            <summary>
            Need to memorize recently loaded profile XML, since not all modules could be present while loading XML
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupModuleAttribute.ModulesBefore">
            <summary>
            Modules which should precede this
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupModuleAttribute.ModulesAfter">
            <summary>
            Modules which shoud follow this
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.SetDefaultSetting(JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupProfile,JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanup.DefaultProfileType)">
            <summary>
            Get default setting for given profile type
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.IsAvailable(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Check if this module can handle given project file
            </summary>
            <param name="sourceFile"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.Process(JetBrains.ReSharper.Psi.IPsiSourceFile,JetBrains.DocumentModel.IRangeMarker,JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupProfile,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Process clean-up on file. if <paramref name="rangeMarkerMarker"/> is <see cref="F:JetBrains.DocumentModel.DocumentRange.InvalidRange"/>, then process the whole file
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.LanguageType">
            <summary>
            Get the language this module can operate
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.Descriptors">
            <summary>
            Get the collection of option descriptors
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.IsAvailableOnSelection">
            <summary>
            Check if this module is available on selection, or on the whole file
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.AutocompletionBehaviour">
            <summary>
            Enumerates possible autoinsert mode foced by context
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionSession">
            <summary>
            Represents one session of using code completion
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionSettings">
            <summary>
            Maintains code completion options
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionSettings.CaseSensitiveCompletion">
            <summary>
            Note: this property is no more configurable thru the UI.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionSettings.HighlightImmediateMembers">
            <summary>
            Note: this property is no more configurable thru the UI.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICodeCompletionContextProvider.Language">
            <summary>
            language of psi for this completion
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Impl.CodeCompletionContextProviderBase.CalculateDefaultRanges(JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.CodeCompletionContext)">
            <summary>
            Calculates ranges analysing letters and '_' to the left and to the right of the caret.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Impl.CodeCompletionContextProviderBase.Language">
            <summary>
            language of psi for this completion
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.TextLookupItemBase">
            <summary>
            Class for implementing advanced lookup items
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem">
            <summary>
            Represents a lookup item
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.AcceptIfOnlyMatched(JetBrains.ReSharper.Feature.Services.Lookup.LookupItemAcceptanceContext)">
            <summary>
            Gets flag indicating whether this item should be automatically completed if it is the only in a list
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.Match(System.String)">
            <summary>
            Returns value indicating whether the item matches a given prefix
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.Accept(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange,JetBrains.ReSharper.Feature.Services.Lookup.LookupItemInsertType,JetBrains.ReSharper.Feature.Services.Lookup.Suffix,JetBrains.ProjectModel.ISolution,System.Boolean)">
            <summary>
            Accepts the item at the specified range.
            nameRange is a part of a corresponding document range, not a tree!
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.GetVisualReplaceRange(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange)">
            <summary>
            Gets visual replace range
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.Shrink">
            <summary>
            Shrinks lookup item presentation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.Unshrink">
            <summary>
            Restores unshrinked lookup item presentation
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.Image">
            <summary>
            Gets lookup item image
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.DisplayName">
            <summary>
            Gets lookup item display name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.DisplayTypeName">
            <summary>
            Gets type display name 
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.CanShrink">
            <summary>
            Determines whether the item can decrease its width
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.OrderingString">
            <summary>
            Gets string used to arrange items in lookup list. If it is null, <see cref="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.DisplayName"/> is used.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.TextLookupItemBase.Shrink">
            <summary>
            Shrinks the name of the item
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.TextLookupItemBase.Unshrink">
            <summary>
            Cancels shrink of the name
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.TextLookupItemBase.Accept(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange,JetBrains.ReSharper.Feature.Services.Lookup.LookupItemInsertType,JetBrains.ReSharper.Feature.Services.Lookup.Suffix,JetBrains.ProjectModel.ISolution,System.Boolean)">
            <summary>
            Completes the item at the specified range.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.TextLookupItemBase.Image">
            <summary>
            Gets item image
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.TextLookupItemBase.DisplayTypeName">
            <summary>
            Name of the type
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.ICodeCompletionHost.InvokeHostCodeCompletion">
            <summary>
            Invokes host completion in active text control
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItemsPreferenceFilter.FilterItems(System.Collections.Generic.ICollection{JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem})">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.DeclaredElementLookupItem">
            <summary>
            Declared element code completion context item
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.IParameterInfoProvidingLookupItem">
            <summary>
            Interface for providing parameter info contexts from lookup lists or other places
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.WithReplaceRange(JetBrains.Util.TextRange)">
            <summary>
            Creates new instance of ranges class with new value of the 'replaceRange'
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.WithInsertRange(JetBrains.Util.TextRange)">
            <summary>
            Creates new instance of ranges class with new value of the 'insertRange'
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.ReplaceRange">
            <summary>
            Range that is replaced when replace completion is applied
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.InsertRange">
            <summary>
            Range that is replaced when insert completion is applied
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.ShortPrefixRange">
            <summary>
            Range where completion stays alive
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.TextLookupItem">
            <summary>
            Code completion result item which simply completes some text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ContextNavigation.ContextSearches.IRequestContextSearch`1.GetElementsAndSearch(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            returns IEnumerable of candidates and a delegate to be used when one of the candidates will be chosen
            </summary>
            <param name="dataContext"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ContextNavigation.ContextSearches.BaseSearches.ContextSearchBase`1.IsAvailable(JetBrains.Application.DataContext.IDataContext)">
            <remarks>At first, check special finder and if not, at second, check other specific conditions</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ContextNavigation.ContextSearches.BaseSearches.ContextSearchBase`1.GetSpecialFinderSearchDomain(JetBrains.ReSharper.Feature.Services.Search.ISpecialElementFinder,System.Object,JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Get search domain for given special finder
            </summary>
            <returns>Return null to cancel search</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ContextNavigation.ContextSearches.IUsagesContextSearch`1.GetElementsSearch(JetBrains.Application.DataContext.IDataContext,System.Boolean)">
            <summary>
            return a delegate that might work with a multiple declared elements, i.e. 'Show All Candidates'
            </summary>
            <param name="dataContext"></param>
            <param name="searchParametersOverloads"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextNavigation.ContextNavigation.Title">
            <summary>
            Text will be shown in the context navigation menu ('Navigate from here...')
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextNavigation.ContextNavigation.ActionId">
            <summary>
            Id associated with a specific action.
            null if there is no shortcut (action) for this provider
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextNavigation.ContextNavigation.Execution">
            <summary>
            an action(if there is one) to be invoked later
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.DaemonState">
            <summary>
            Normal state flow is the following:
            INVALIDATED->IN_PROGRESS_LOCAL->UP_TO_DATE->IN_PROGRESS_GLOBAL->UP_TO_DATE
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.DaemonState.HIDDEN">
            <summary>
            Daemon doesn't need error stripe for given document.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.DaemonState.UNSUPPORTED">
            <summary>
            Daemon needs error stripe, but doesn't support error state
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.DaemonState.DISABLED">
            <summary>
            Daemon is switched off for given document
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.DaemonState.INVALIDATED">
            <summary>
            Daemon state is not valid for this document (i.e. something changed since last analysis)
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.DaemonState.IN_PROGRESS_LOCAL">
            <summary>
            Daemon analysis is currently running local stages
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.DaemonState.IN_PROGRESS_GLOBAL">
            <summary>
            Daemon analysis is currently running global SWA stage
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.DaemonState.UP_TO_DATE">
            <summary>
            Daemon state is up-to-date for given document
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Descriptions.IDeclaredElementDescriptionProvider.GetElementDescription(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Feature.Services.Descriptions.DeclaredElementDescriptionStyle,JetBrains.ReSharper.Psi.PsiLanguageType,JetBrains.ReSharper.Psi.IPsiModule)">
            <summary>
            This method should return description according to the style but excluding obsolete description, or null if there is no description for a given element.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Descriptions.DeclaredElementDescriptionPresenter">
            <summary>
            DeclaredElementDescriptionPresenter can fetch descriptions and obsolete flags for declared elements from various sources: XML docs, CLR attributes, external documentation.
            To add a new source of information, implement IDeclaredElementDescriptionProvider in a solution-level component.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Goto.ChainedProviders.IChainedSearchProvider.GetNextChainedScopes(JetBrains.ReSharper.Feature.Services.Goto.GotoContext,JetBrains.Text.IdentifierMatcher,JetBrains.ReSharper.Feature.Services.Goto.INavigationScope,JetBrains.Application.CheckForInterrupt)">
            <summary>
            Provides next step chained scopes
            </summary>
            <param name="gotoContext"></param>
            <param name="matcher"></param>
            <param name="containingScope"></param>
            <param name="checkCancelled"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Goto.GotoContext">
            <summary>
            Container for provider-specific data
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Goto.IOccurenceNavigationProvider.FindMatchingInfos(JetBrains.Text.IdentifierMatcher,JetBrains.ReSharper.Feature.Services.Goto.INavigationScope,JetBrains.Application.CheckForInterrupt,JetBrains.ReSharper.Feature.Services.Goto.GotoContext)">
            <summary>
            Finds matched items and returns a corresponing list of matchingInfos.
            Controller (or some other entity that will use this provider) recieves these items, scores them, sorts 
            and than invoke GetOccurences for the top scored of them.
            </summary>
            <param name="matcher">matcher to use</param>
            <param name="scope">defines a scope to search in</param>
            <param name="checkCancelled">abort search if interrupted</param>
            <param name="gotoContext"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Goto.IOccurenceNavigationProvider.GetOccurencesByMatchingInfo(JetBrains.ReSharper.Feature.Services.Goto.MatchingInfo,JetBrains.ReSharper.Feature.Services.Goto.INavigationScope,JetBrains.ReSharper.Feature.Services.Goto.GotoContext)">
            <summar> Get occurences by given matchingInfo </summar>
            <param name="navigationInfo"></param>
            <param name="scope"></param>
            <param name="gotoContext"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Goto.GotoProviders.ChainedScopesUtil.CalculateChainedScore(System.Collections.Generic.List{System.String},JetBrains.ReSharper.Feature.Services.Goto.MatchingInfo)">
            <remarks> words.Count should correspond with matchingInfo references depth </remarks>
            <param name="revertedWords"></param>
            <param name="matchingInfo"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Goto.GotoProviders.TypeMemberNavigationUtil.GetPsiSourceFileTypeElements(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Return custom filtered type members from all type elements inside indicated source file.
            </summary>
            <param name="sourceFile"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Goto.MatchingInfo">
            <summary>
            Data class that describes all necessary info to score an item. 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.ICreationTarget.GetTargetDeclaration">
            <summary>
            Returns target declaration. 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.ICreationTarget.GetTargetDeclarationFile">
            <summary>
            Returns target declaration file
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.CreateNewFileTarget.GetTargetDeclaration">
            <summary>
            Returns target declaration. 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.CreateNewFileTarget.GetTargetDeclarationFile">
            <summary>
            Returns target declaration file
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession.GetVariableResult(System.String)">
            <summary>
            Gets variable result by its name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession.IsFinished">
            <summary>
            Returns value indicating whether the template result is finished 
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression">
            <summary>
            A variable evaluation expression
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Evaluates quick result for expression
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.HandleExpansion(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Execute custom action on expanding this expression
            </summary>
            <returns><c>true</c> if all neccessary actions have been taken or <c>false</c> to proceed with normal <see cref="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)"/> procedure</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Evaluates list of lookup items
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.Serialize">
            <summary>
            Serializes the expression
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacro">
            <summary>
            Represents macro function that can be used by Live Template's.
            Implementation of this interface should be marked with <see cref="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroAttribute"/> attribute
            to be automatically recognized by ReSharper.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacro.GetPlaceholder">
            <summary>
            <para>
            Placeholder value is inserted into the text on the very initial step of template expansion
            and is needed for proper template text reformatting when real values cannot be calculated yet.
            </para>
            <para>
            More precisely, the following steps are performed:
            <list type="bullet">
              <item>placeholder values for all template fields are inserted into the text</item>
              <item>the resulting text is reformatted</item>
              <item><see cref="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacro.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})"/> is used to evaluate and insert values for all fields.</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacro.HandleExpansion(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Execute custom action on expanding this macro
            </summary>
            <returns><c>true</c> if all neccessary actions have been taken or <c>false</c> to proceed with normal <see cref="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacro.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})"/> procedure</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacro.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates list of lookup items to show
            </summary>
            <returns>
            List of lookup items to show in order of preference. That is, 
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacro.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates "quick result" for this macro.
            Unlike the result returned by <see cref="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacro.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})"/> method, 
            quick result is re-evaluated on each typing and so its implementation should be very quick.
            If the macro cannot provide any result that can be evaluated very quickly, it should return null.
            </summary>
            <param name="arguments">Values </param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.FileMaskScopeConfig">
            <summary>
            FileMaskScopeConfig
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.FileMaskScopeConfig.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContext">
            <summary>
            Context where a template can be executed
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContext.WriteToXml(System.Xml.XmlElement)">
            <summary>
            Writes context to XML tag
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeSelectorControl">
            <summary>
            ScopeSelectorControl
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeSelectorControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeSelectorDialog">
            <summary>
            ScopeSelectorDialog
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeSelectorDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.CreateLocalVariableLookupItemBase.Shrink">
            <summary>
            Shrinks lookup item presentation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.CreateLocalVariableLookupItemBase.Unshrink">
            <summary>
            Restores unshrinked lookup item presentation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.CreateLocalVariableLookupItemBase.GetVisualReplaceRange(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange)">
            <summary>
            Gets visual replace range
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.CreateLocalVariableLookupItemBase.Image">
            <summary>
            Gets lookup item image
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.CreateLocalVariableLookupItemBase.DisplayName">
            <summary>
            Gets lookup item display name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.CreateLocalVariableLookupItemBase.DisplayTypeName">
            <summary>
            Gets type display name 
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.IDescriptionProvidingLookupItem">
            <summary>
            Interface for providing descriptions from lookup lists or other places
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Util.TemplateLookupItem.Accept(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange,JetBrains.ReSharper.Feature.Services.Lookup.LookupItemInsertType,JetBrains.ReSharper.Feature.Services.Lookup.Suffix,JetBrains.ProjectModel.ISolution,System.Boolean)">
            <summary>
            Completes the item at the specified range.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Util.TemplateLookupItem.GetVisualReplaceRange(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange)">
            <summary>
            Gets visual replace range
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager">
            <summary>
            Maintains layouters per text controls.
            // TODO: when we got text control components, make layouters text control components, and drop this component altogether.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.myMapTextControlToLayouters">
            <summary>
            Demand-created, destroyed when the text control is closed.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.GetForTextControl(JetBrains.TextControl.ITextControl)">
            <summary>
            Gets the collection of text controls, from which you should select the one you want the layouters for.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.TextControls">
            <summary>
            Gets the collection of text controls out of which you can get a layouter for the specific text control.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.LayoutersForTextControls">
            <summary>
            Implements the <see cref="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.TextControls"/> property.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.LayoutersForTextControls.Item(JetBrains.TextControl.ITextControl)">
            <summary>
            Gets an object that will create the layouters for the given text control.
            Note: do not store the instance you get, because it may expire. You should get a new instance thru this indexer each time you need it.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.AssemblyInfoNavigationData">
            <summary>
            Data class containing navigation info required to navigate to an assembly
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.AssemblyInfoNavigationData.Index">
            <summary>
            -1 if not initialized
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.CompiledElementNavigationInfo.UseFocusedTextControlContent">
            <summary>
            Use focused text control to search usages of declared elements
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.TextNavigationPoint">
            <summary>
            Project file's navigation point with cursor positioning
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.GoToRelated.IRelatedFilesProvider.GetRelatedFiles(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Get all related files to specified file.
            </summary>
            <param name="projectFile"></param>
            <returns>Enumeration of pairs of project file and it's relation type to requested file</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurences.IOccurenceProvider.MakeOccurence(JetBrains.ReSharper.Psi.Search.FindResult)">
            <summary>
            Makes occurence from find result. Return null if find result is incompatible with provider
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurences.OccurenceKindProviders.OccurenceKindManager.GetOccurenceKinds(JetBrains.ReSharper.Feature.Services.Search.IOccurence)">
            <summary>
            gets kinds for a specific occurence
            </summary>
            <param name="occurence"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurences.OccurenceKindProviders.OccurenceKindManager.GetAllOccurenceKinds">
            <summary>
            gets the set of all possible kinds from all providers
            </summary>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Occurences.TextDisplayStyle.ChainedPME">
            <summary>
            Display containing Project Model Element
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Occurences.TextDisplayStyle.ChainedCME">
            <summary>
            Dispaly containing Code Model Element
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Occurences.OccurenceKindProviders.OccurenceKind.Other">
            <summary>
            default occurence kind
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Occurences.Presentation.DeclaredElementMenuItemFormatter">
            <summary>
            Formats a declared element into a menu item descriptor, suitable for the GotoByName-style lists.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurences.Presentation.DeclaredElementMenuItemFormatter.Format(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.UI.PopupMenu.IMenuItemDescriptor,JetBrains.ReSharper.Feature.Services.Occurences.OccurencePresentationOptions,System.Boolean)">
            <summary>
            Formats a declared element into a menu item descriptor, suitable for the GotoByName-style lists.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Options.HostAutoFormatSettings">
            <summary>
            Host (e.g. VS) autoformat (e.g. Pretty Listing) settings
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.FeaturePartsContainer">
            <summary>
            Container for getting ALL (not only leaf) applicable components
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Psi.UnresolvedDeclaredType">
            <summary>
            Represents an unresolved type name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Psi.UnresolvedDeclaredType.Candidates">
            <summary>
            Gets collection of possible resolution candidates
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Psi.UnresolvedDeclaredType.Resolution">
            <summary>
            Gets or sets resolution for this unresolved type
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Search.LibrariesFlag">
            <summary>
            Defines whether the libraries should be included or not when searching for items.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.SelectEmbracingConstructUtil.TryFindRangeSeparatedByEmptyLines``1(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean},System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean},System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean},System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean})">
            <summary>
            Try to find a group of statements separated by blank lines
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.ISelectedTreeRange">
            <summary>
            If an ISelectedRange in implemented on a PSI it should imlement this interface in order to be used in combined features 
            i.e. ASP extend selection
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.CandidatesUtil.MultiplyDeclaredElementExecutor">
            <summary>
            
            </summary>
            <param name="context">DataContext initially passed to action</param>
            <param name="declaredElements">Candidates for navigation</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.FileSpecificUtil.SortDeclarationsByWritability(JetBrains.ReSharper.Psi.ITypeElement,JetBrains.ReSharper.Psi.Tree.IDeclaration,JetBrains.ReSharper.Psi.PsiLanguageType)">
            <summary>
            Returns all declarations of a type where type member can be created. Preferrable declarations are first.
            Methods acts as follow:
            1. Get all declaratinos of a type.
            2. Ask language specific services for extra declarations (e.g. base type of ASP page...)
            3. Filter declarations in other languages...
            4. Try filter generated declarations... Like windows forms desiner code...
            5. Filter declarations written in languages other then required...
            6. Try use prefered declaration...
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.FileSpecificUtil.SortDeclarationsByWritability(System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Psi.Tree.IDeclaration},JetBrains.ReSharper.Psi.Tree.IDeclaration,JetBrains.ReSharper.Psi.PsiLanguageType)">
            <summary>
            Returns all declarations of a type where type member can be created. Preferrable declarations are first.
            Methods acts as follow:
            1. Get all declaratinos of a type.
            2. Ask language specific services for extra declarations (e.g. base type of ASP page...)
            3. Filter declarations in other languages...
            4. Try filter generated declarations... Like windows forms desiner code...
            5. Filter declarations written in languages other then required...
            6. Try use prefered declaration...
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.IImplicitReference">
            <summary>
            Implicit references, which target determined by context (not always in this file), not owner itself
            Also, <see cref="M:JetBrains.ReSharper.Psi.Resolve.IReference.BindTo(JetBrains.ReSharper.Psi.IDeclaredElement)"/> has no effect on this reference
            </summary>
            <remarks>Such reference will be always selected in <see cref="M:JetBrains.ReSharper.Feature.Services.Util.CandidatesUtil.SelectGoodReferences(System.Collections.Generic.IList{JetBrains.ReSharper.Psi.Resolve.IReference})"/></remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.ICustomStyleHighlighting">
            <summary>
            Identifies that highlighting computes it's style at runtime
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.IHighlighting">
            <summary>
            Base interface for all error highlightings
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.IHighlighting.IsValid">
            <summary>
            Returns true if data (PSI, text ranges) associated with highlighting is valid
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.IHighlighting.ToolTip">
            <summary>
            Message for this highlighting to show in tooltip and in status bar (if <see cref="P:JetBrains.ReSharper.Daemon.HighlightingAttributeBase.ShowToolTipInStatusBar"/> is <c>true</c>)
            To override the default mechanism of tooltip, mark the implementation class with 
            <see cref="T:JetBrains.ReSharper.Daemon.DaemonTooltipProviderAttribute"/> attribute, and then this property will not be called
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.IHighlighting.ErrorStripeToolTip">
            <summary>
            Message for this highlighting to show in tooltip and in status bar (if <see cref="P:JetBrains.ReSharper.Daemon.HighlightingAttributeBase.ShowToolTipInStatusBar"/> is <c>true</c>)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.IHighlighting.NavigationOffsetPatch">
            <summary>
            Specifies the offset from the Range.StartOffset to set the cursor to when navigating 
            to this highlighting. Usually returns <c>0</c>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.ICustomStyleHighlighting.Attributes">
            <summary>
            Attribute of this highlighting in the markup model
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.VisualElements.IColorElement.ShortName">
            Name for color , if exists
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionType">
            <summary>
            Defines possible code completion types
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionType.AutomaticValueCompletion">
            <summary>
            Automatic code completion of enums members were the value of enum type is expected...
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionUtil.IterateStaticMembers(JetBrains.ReSharper.Psi.ITypeElement,JetBrains.ReSharper.Psi.Resolve.ISubstitution,JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType},System.Func{JetBrains.ReSharper.Psi.ITypeMember,System.Boolean})">
            <summary>
            Enumerate static members in given type element, which type is given, and which are visible from given source point
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager">
            <summary>
            Tracks statistics of choosing members in completion.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.PriorityStringList">
            <summary>
            Represents the list with priorities. It is sorted by priorities.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.PriorityStringList.myPriorities">
            <summary>
            Maps items to their priorities
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.PriorityStringList.IncreasePriority(System.String)">
            <summary>
            Increases priority of the specified item by 1
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.SmartCompletionPolicy">
            <summary>
            Completion policy for smart completion. Takes into account name corellation, etc.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.CorellationCalculator">
            <summary>
            Completion policy for smart completion. Takes into account name corellation, etc.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Comment.IBlockCommentActionProvider.GetBlockComment(JetBrains.ReSharper.Psi.Parsing.CachingLexer)">
            <summary>
            Identifies block comment range, even if it is not a single token.
            Lexer pos will be saved and resored by the caller
            </summary>
            <param name="lexer"></param>
            <returns>Invalid range if lexer is not positioned in block comment</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Comment.IBlockCommentActionProvider.NestedStartBlockCommentMarker">
            <summary>
            string used to replace nested block comments to make the code syntactically correct while commenting
            and restore comments while uncommenting
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.Daemon">
            <summary>
            Class managing background code analysis
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.Daemon.State(JetBrains.DocumentModel.IDocument)">
            <summary>
            Get the daemon state for the given document
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.Daemon.ForceReHighlight(JetBrains.DocumentModel.IDocument)">
            <summary>
            Force async rehighlighting process for given document
            </summary>
            <returns><c>false</c> if daemon wasn't started</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.Daemon.Invalidate">
            <summary>
            Invalidate daemon state for all documents
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:JetBrains.ReSharper.Daemon.Daemon.IsSuspended" -->
        <member name="E:JetBrains.ReSharper.Daemon.Daemon.DaemonStateChanged">
            <summary>
            Raised when DaemonState of any document is changed
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.DaemonTooltipProviderAttribute">
            <summary>
            Custom tooltip provider for the error.
            Tooltip provider should be solution-level component and implement <see cref="T:JetBrains.TextControl.Markup.IHighlighterTooltipProvider"/> interface
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.GutterMarkMenuLayouter">
            <summary>
            A factory for the gutter mark menu layouters.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.GutterMarkMenuLayouter.CreateSource(JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext)">
            <summary>
            Creates a popup window context with a layouter for the gutter mark menu.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.GutterMarkMenuLayouter.Create(JetBrains.DataFlow.Lifetime,JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext)">
            <summary>
            Creates a popup window context with a layouter for the gutter mark menu.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.IInheritanceMarkOnGutter.OnClick(System.Drawing.Image)">
            <summary>
            Triggers when the gutter icon gets clicked.
            Passes the icon that should be painted in the popup menu caption in case there's more than one alternative.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.HighlightingSettingsManager.HasNecessarySeverity(JetBrains.ReSharper.Daemon.Severity,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Check if any of the given highlighting list has severity equals or higher than <paramref name="severity"/>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.HighlightingSettingsManager.Settings">
            <summary>
            TODO: make it solution-level, not shell-level
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.IDaemonProcess.CreateFibers">
            <summary>
            Create fibers for multi-process thread execution
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.IDaemonProcess.CustomData">
            <summary>
            This property is used to pass custom specific data to daemon stages (such as exclude some analysis in test cases)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.ErrorStripeRequest">
            <summary>
            Defines the requirements for each stage
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.ErrorStripeRequest.NONE">
            <summary>
            The stage doesn't require error stripe at all
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.ErrorStripeRequest.STRIPE">
            <summary>
            Stage requires error stripe, but can't produce warnings/errors
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.ErrorStripeRequest.STRIPE_AND_ERRORS">
            <summary>
            The stage requires error stripe and can produce warnings/errors
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.IDaemonStage">
            <summary>
            Represents a "stage" in code analysis process.
            Each stage should have a key that allows stages to refer to each other.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.IDaemonStage.CreateProcess(JetBrains.ReSharper.Daemon.IDaemonProcess,JetBrains.ReSharper.Daemon.DaemonProcessKind)">
            <summary>
            Creates a code analysis process corresponding to this stage for analysing a file.
            </summary>
            <returns>Code analysis process to be executed or <c>null</c> if this stage is not available for this file.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.IDaemonStage.NeedsErrorStripe(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Check the error stripe indicator necessity for this stage after processing given <paramref name="sourceFile"/>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.DaemonStageAttribute">
            <summary>
            Marks the class as a daemon stage for automatic registration
            The marked clas should have default constructor and should implement 
            <see cref="T:JetBrains.ReSharper.Daemon.IDaemonStage"/> interface
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.DaemonStageAttribute.InternalMode">
            <summary>
            If set to <c>true</c>, then daemon stage will be run only in internal mode
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.DaemonStageAttribute.GlobalAnalysisStage">
            <summary>
            If set to <c>true</c>, then daemon stage will be run after analysing the whole solution
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.DaemonStageAttribute.StagesBefore">
            <summary>
            Stages which should precede this
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.DaemonStageAttribute.StagesAfter">
            <summary>
            Stages which shoud follow this
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.HighlightingInfo">
            <summary>
            Highlighting information which should be returned form stage <see cref="T:JetBrains.ReSharper.Daemon.IDaemonStageProcess"/>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.DaemonStageResult.#ctor(System.Collections.Generic.ICollection{JetBrains.ReSharper.Daemon.HighlightingInfo})">
            <summary>
            Set highlightings for the whole documents
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.DaemonStageResult.#ctor(System.Collections.Generic.ICollection{JetBrains.ReSharper.Daemon.HighlightingInfo},JetBrains.Util.TextRange)">
            <summary>
            Set highlightings for the specific text range
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.DaemonStageResult.Highlightings">
            <summary>
            Array of result highlightings to be added to the editor
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.DaemonStageResult.FullyRehighlighted">
            <summary>
            Indicates that the whole file was rehighlighted. 
            If file was incrementally rehighlighted, then the range should be returned in <see cref="P:JetBrains.ReSharper.Daemon.DaemonStageResult.RehighlightedRange"/>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.DaemonStageResult.RehighlightedRange">
            <summary>
            Range in the document for which the highlighting was recalculated. 
            All old highlightings that are inside this range will be removed 
            from the editor and replaced with the returned ones.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.DaemonStageResult.Layer">
            <summary>
            Highlighting key modifier, so one stage could produce highlgihtings for different layers. Usually shouldn't be used
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.IDaemonStageProcess">
            <summary>
            Represents a code analysis process corresponding to one stage when analysing one file
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.IDaemonStageProcess.Execute(System.Action{JetBrains.ReSharper.Daemon.DaemonStageResult})">
            <summary>
            Executes the process.
            The process should check for <see cref="P:JetBrains.ReSharper.Daemon.IDaemonProcess.InterruptFlag"/> periodically (with intervals less than 100 ms)
            and throw <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> if it is true. 
            Failing to do so may cause the program to prevent user from typing while analysing the code.
            Stage results should be passed to <param name="commiter"/>. If DaemonStageResult is <c>null</c>, it means that no highlightings available
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.IDaemonStageProcess.DaemonProcess">
            <summary>
            Whole daemon process
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.OverlapResolveKind">
            <summary>
            Controls how individual highlightings will be shown if overlaps
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.Severity">
            <summary>
            the role of each highlighting
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.HighlightingAttributeBase.AttributeId">
            <summary>
            Attribute of this highlighting in the markup model
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.HighlightingAttributeBase.ColorOnStripe">
            <summary>
            Color on gutter for this highlighting.  Will be called only if Severity == INFO
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.HighlightingAttributeBase.OverlapResolve">
            <summary>
            Get the ovelap resolving policy for this highlighting
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.HighlightingAttributeBase.OverloadResolvePriority">
            <summary>
            Get the ovelap resolving priority for this highlighting (To resolve 2 highlightings with the same range and resolve policy)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.HighlightingAttributeBase.ShowToolTipInStatusBar">
            <summary>
            Identifies if the tooltip message should be shown in the status bar when the cursor is over the highlighting
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.ConfigurableSeverityHighlightingAttribute.ConfigurableSeverityId">
            <summary>
            ID of configurable severity definition
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.ConfigurableSeverityHighlightingAttribute.Languages">
            <summary>
            Languages for which this highlighting is
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.RegisterConfigurableSeverityAttribute">
            <summary>
            Register new configurable severity definition
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.RegisterConfigurableSeverityAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,JetBrains.ReSharper.Daemon.Severity,System.Boolean)">
            <summary>
            Register new configurable severity definition
            </summary>
            <param name="id">Unique ID of severity definition. Key to match with implementation</param>
            <param name="compoundItemName">optional value, can join few items under the same header under group (items are matched by compoundItemName equality)</param>
            <param name="group">Group ID of the item. See <see cref="T:JetBrains.ReSharper.Daemon.HighlightingGroupIds"/> for common groups</param>
            <param name="title">title</param>
            <param name="description">description</param>
            <param name="defaultSeverity"></param>
            <param name="solutionAnalysisRequired"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.ICustomAttributeIdHighlighting">
            <summary>
            Identifies that highlighting attribute ID is computed at runtime
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.ICustomAttributeIdHighlighting.AttributeId">
            <summary>
            Attribute of this highlighting in the markup model
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext">
            <summary>
            Context in which generation occures
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Kind">
            <summary>
            Gets context kind, like constructor, property, delegating members, etc
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Language">
            <summary>
            Language in which generation should occur
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.ProjectFileType">
            <summary>
            File type of project item in which generation should occur
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Root">
            <summary>
            Root of the operation, usually ITypeDeclaration
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Anchor">
            <summary>
            Anchor of the operation, place where to put elements
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.ProvidedElements">
            <summary>
            Elements provided as possible sources for generation (shown on first page)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.InputElements">
            <summary>
            Elements selected by user as source of generation
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.OutputElements">
            <summary>
            Elements built by builder
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.GlobalOptions">
            <summary>
            Options configured on Element Selection page, which will be applied to every suitable element. This options are persisted.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.InputElementOptions">
            <summary>
            Options configured on Advanced page per input element. This options are not persisted.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.OutputElementOptions">
            <summary>
            Options configured on Advanced page per output element. This options are not persisted.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Project">
            <summary>
            Project in which generation occures
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.PsiModule">
            <summary>
            Psi Module
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.GetPossibleValues">
            <summary>
            Gets possible values for given output element in the given context
            </summary>
            <returns>List of possible values for combobox</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.IsValidValue(System.String)">
            <summary>
            Gets possible values for given output element in the given context
            </summary>
            <returns>List of possible values for combobox</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.ID">
            <summary>
            Option identity
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.Title">
            <summary>
            Title text
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.Kind">
            <summary>
            UI presention kind
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.Persist">
            <summary>
            Indicates if value should be saved across generate sessions
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.Value">
            <summary>
            Value for this option
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.OverridesGlobalOption">
            <summary>
            Global option value does not propagate to this option
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.HasDependentOptions">
            <summary>
            If this property is true, options are refreshed on change
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorWorkflow.GenerateAndFinish(System.String,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Generates code and commits transaction (for non-advanced scenario)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorWorkflow.Finish(System.String)">
            <summary>
            Commits transaction
            </summary>
            <param name="commandName">Name of command for Undo</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorWorkflow.Generate(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Starts transaction, generates code, build Options.Output
            </summary>
            <returns>object to Dispose to rollback transaction, e.g. on Cancel</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.GeneratorWorkflowBase.GenerateAndFinish(System.String,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Generates code and commits transaction (for non-advanced scenario)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.GeneratorWorkflowBase.Finish(System.String)">
            <summary>
            Commits transaction
            </summary>
            <param name="commandName">Name of command for Undo</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.GeneratorWorkflowBase.Generate(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Starts transaction, generates code, build Options.Output
            </summary>
            <returns>object to Dispose to rollback transaction, e.g. on Cancel</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorBuilder">
            <summary>
            Modifies context  
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOptionsProvider">
            <summary>
            Provides options for user
            </summary>
            <remarks>
            Global options are displayed on first page and applies to every element (or is default value)
            Element options are specific settings for each elements, available on Advanced page
            </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorBuilder.IsAvaliable(JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext)">
            <summary>
            Checks if this builder will produce any output in the specified context
            </summary>
            <param name="context">Context</param>
            <returns>true if builder can work with context, false otherwise</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorBuilder.Process(JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext)">
            <summary>
            Runs on context and modifies PSI
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorBuilder.HasProcessableElements(JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext,System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Feature.Services.Generate.IGeneratorElement})">
            <summary>
            Tells if builder will produce any output elements
            </summary>
            <param name="context"></param>
            <param name="elements"></param>
            <returns>true if elements will be produced, false otherwise</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorElementProvider">
            <summary>
            Provides elements 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorElementProvider.Populate(JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext)">
            <summary>
            Collects elements for builder
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IMemberBodyUtil.SetDelegatingCall(JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration,JetBrains.ReSharper.Psi.IClrDeclaredElement,JetBrains.ReSharper.Psi.IOverridableMember)">
            <summary>
            Sets declaration body to delegating call
            </summary>
            <param name="declaration">Declaration to set body for</param>
            <param name="qualifier">If is null, then use "this."</param>
            <param name="delegateTo">Method, event, property to delegate to</param>
            <returns>Body TextRange</returns>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.myActiveTextControl">
            <summary>
            Text control in which hyperlinks are currently enabled.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.myClickCommit">
            <summary>
            Makes sure we async-run no more than one click.
            Makes sure we cancel a pending click when we're turned off / closed / etc.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.myHyperlinkLifetimesSequence">
            <summary>
            Alive while a hyperlink is visible, also ensures the prev hyperlink is not visible when a new one is created.
            Must be guarded and readlocked.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.myCurrentStateLifetime">
            <summary>
            Terminated when exiting current state.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.OnHoverDocumentsCommitted">
            <summary>
            Async-commit requested by HoverChoosing has completed. Get the actual hyperlink object.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.OnMouseOrKeyboardMove(JetBrains.TextControl.TextControlMouseEventArgs)">
            <summary>
            Mouse moved or key state changed.
            </summary>
            <param name="args">Params. <c>Null</c> means mouse not in text control.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.TryEnterHoverState(JetBrains.TextControl.TextControlMouseEventArgs)">
            <summary>
            Enters the state if there're providers for the current keystate.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.State.Idle">
            <summary>
            Not active. No highlighting.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.StubbornAsyncCommitClient">
            <summary>
            Retries async commit on interruption until it completes.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Intentions.UpdateArgumentsDelegate">
            <summary>
            Provides new arguments for existing attribute
            </summary>
            <param name="instance">existing attribute  info</param>
            <returns>desired attribute arguments or null to ignore</returns>    
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.MutliDocumentNameExpression">
            <summary>
            Name expression. Updates not only declaration name but source reference.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.IntentionLanguageSpecific.ToExtensionMethod(JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration)">
            <summary>
            Makes method extension method.
            For C#: add this to first parameters
            For VB: add ExtensionAttribute to method declaration
            
            No any checks (ex. class and method are static) are performed
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.IntentionLanguageSpecific.IsVoidMethodDeclarationHasTypeUsage">
            <summary>
            Returns true for VB and false for C#
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.LiveTemplates.TemplateField">
            <summary>
            Live template variable
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.LiveTemplates.TemplateField.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.ActionUtil.CommitAndWaitForCaches(JetBrains.ReSharper.Psi.PsiManager,JetBrains.ActionManagement.IActionHandler)">
            <summary>
            When a PSI-consuming action is about to be executed, commits the documents and waits for the caches to become idle, displaying the cancelable modal UI progress.
            </summary>
            <param name="manager">PSI manager to wait for, identifies the solution.</param>
            <param name="actionhandler">Action handler from which the action name is retrieved, to display in the progress UI.</param>
            <returns>Whether the caches are, finally, idle (the wait might be cancelled).</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.ActionUtil.ExecuteWithCachesReady(JetBrains.ReSharper.Psi.PsiManager,System.String,System.Action)">
            <summary>
            When a PSI-consuming action is about to be executed, commits the documents and waits for the caches to become idle, displaying the cancelable modal UI progress.
            </summary>
            <param name="manager">PSI manager to wait for, identifies the solution.</param>
            <param name="action">Activity to execute if the caches are ready OK.</param>
            <param name="title">Progress title.</param>
            <returns>Whether the caches are, finally, idle (the wait might be cancelled).</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.GetRelatedDeclarations(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default: yield break
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.GetRelatedAndFilterHidden(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default: yield return declaration
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.IsHidden(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Works on auto-generated code-behind classed. By default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.IsCodeBehindClass(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.IsUserTextDeclaration(JetBrains.ReSharper.Psi.Tree.IDeclaration)">
            <summary>
            Works on auto-generated type members. By default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.CanContainSeveralClasses(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.CanImplementInterfaces(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.CanHaveConstructors(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.SuperClassCanBeChanged(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.SuperClassNameMustBeFull(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.GetNamespaceForElementsMovedToExternalScope(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - typeElement.GetContainingElement&lt;INamespaceDeclaration&gt;(false);
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.GetFolderForElementsMovedToExternalScope(JetBrains.ProjectModel.IProjectFile,System.String,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - file.Location.Directory
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.GetPrettyName(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - element.DeclaredName
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.IsOperationPossibleOnUnmappedRange(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.IsOperationPossibleOnUnmappedRange(JetBrains.ReSharper.Psi.ITreeRange)">
            <summary>
            Default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.CanDeclarationBeOverloaded(JetBrains.ReSharper.Psi.Tree.IDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.Title">
            <summary>
            Gets UI title
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.ContextOptionsUI">
            <summary>
            Gets control presenting context options UI
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.TemplateContext">
            <summary>
            Gets template context matching current settings in the UI
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.Valid">
            <summary>
            Gets flag indicating whether the UI is valid
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.ValidChanged">
            <summary>
            Event which is raised when the <see cref="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.Valid"/> property changes
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.TemplateAcceptanceContext">
            <summary>
            Represents neccessary context for accepting different kind of templates
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.EnterNameForm">
            <summary>
            Summary description for EnterNameForm.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.EnterNameForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.FileTemplatesContextForm">
            <summary>
            Summary description for FileTemplatesContextForm.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.FileTemplatesContextForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.CreateTemplate">
            <summary>
            Creates new template of the family
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.GetConflicts(JetBrains.ReSharper.LiveTemplates.Templates.Template)">
            <summary>
            Enumerates conflicts for the specified templates
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.CreateEditorUI(JetBrains.ReSharper.LiveTemplates.Templates.Template,JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateStorage)">
            <summary>
            Creates UI used in template editor
            </summary>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.UidUsed(System.Guid)">
            <summary>
            Checks if the specified uid is already used for a template of the family
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.StartBatch">
            <summary>
            Starts batch operation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.EndBatch">
            <summary>
            Ends batch operation
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.Title">
            <summary>
            Gets family title
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.TemplateImage">
            <summary>
            Gets image for presenting templates of the family in UI
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.PredefinedStorage">
            <summary>
            Gets storage of predefined templates
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.UserStorage">
            <summary>
            Gets storage of user templates
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.TemplateStorages">
            <summary>
            Gets all registered template storages
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.IsBatchRunning">
            <summary>
            Gets property indicating whether a batch operation is running
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.FileTemplatesFamilyEditorUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.FileTemplatesFamilyEditorUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.FileTemplatesFamilyEditorUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.FileTemplatesManager">
            <summary>
            Manages surround actions
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.FileTemplatesManager.CreateFileFromTemplate(System.String,JetBrains.ProjectModel.IProjectFolder,JetBrains.ReSharper.LiveTemplates.Templates.Template,System.Action{JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession})">
            <summary>
            Creates file with specified name in target folder using file template.
            </summary>
            <param name="fileNameNoExtension">If name is null or empty, dialog to create name is shown</param>
            <param name="targetFolder"></param>
            <param name="template"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.Hotspot">
            <summary>
            Represents a hot spot in live template expansion
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotContext">
            <summary>
            Implements the IExpressionContext interface
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext">
            <summary>
            Expression evaluation context
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotContext.HotspotSession">
            <summary>
            Gets the template result
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionContext">
            <summary>
            Implementation of ITemplateContext
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext">
            <summary>
            Context where a template can be executed
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext.Solution">
            <summary>
            Gets the project a template is executed in
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext.TextControl">
            <summary>
            Gets the editor a template is executed in
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext.StartOffset">
            <summary>
            Gets the position in editor a template is executed at
            </summary>              
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext.Document">
            <summary>
            Gets the document a template is expanded in
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionController">
            <summary>
            Template result context based on template field infos
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionController.Finalize(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext,JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.TerminationType)">
            <summary>
            Finalizes the template
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionExecutor">
            <summary>
            Controller for the insert live template action
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionUi">
            <summary>
            Represents a live template session
            </summary>  
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotService">
            <summary>
            Language-specific hotspot service
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.LiveTemplateHotspotSessionController">
            <summary>
            Template result context based on template
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.LiveTemplateHotspotSessionController.Finalize(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext,JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.TerminationType)">
            <summary>
            Finalizes the template
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.LiveTemplateHotspotSessionController.Init(System.String,JetBrains.TextControl.ITextControl,System.Int32@,JetBrains.ProjectModel.ISolution)">
            <summary>
            Initializes within a context
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.NameSuggestionsExpression.Serialize">
            <summary>
            Serializes the expression
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplatesFamilyEditorUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplatesFamilyEditorUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplatesFamilyEditorUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplatesManager.CreateHotspotSessionFromTemplate(JetBrains.ReSharper.LiveTemplates.Templates.Template,JetBrains.ProjectModel.ISolution,JetBrains.TextControl.ITextControl,System.Action{JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession})">
            <summary>
            Executes template with inserting text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplatesManager.CreateHotspotSessionFromTemplate(System.String,JetBrains.ReSharper.LiveTemplates.Templates.Template,JetBrains.ProjectModel.ISolution,JetBrains.TextControl.ITextControl,System.Action{JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession})">
            <summary>
            Executes template with inserting text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplatesManager.GetPrefix(JetBrains.DocumentModel.IDocument,System.Int32)">
            <summary>
            Generic template prefix (not context specific)
            </summary>
            <param name="document"></param>
            <param name="caretOffset"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroParameterValue">
            <summary>
            A parameter of live template macro
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroParameterValue.GetText(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Gets parameter text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ArrayVariableMacro">
            <summary>
            Suggests array variable
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ArrayVariableMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.BindToTypeMacro">
            <summary>
            Inserts reference bound to type with given CLR name
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.TypeLookupItem">
            <summary>
            Lookup item for type
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.CapitalizeMacro">
            <summary>
            A macro which capitalizes its input
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.CapitalizeMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ConstantMacroParameter">
            <summary>
            A string constant expression
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ConstantMacroParameter.GetText(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Gets parameter text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ContainingTypeMemberNameMacro">
            <summary>
            Returns the containing type name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ContainingTypeMemberNameMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ContainingTypeNameMacro">
            <summary>
            Returns the containing type name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ContainingTypeNameMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.CurrentDateMacro.GetPlaceholder">
            <summary>
            Gets default value to insert in text where the macro will be evaluated
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.CurrentDateMacro.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates quick macro result
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.CurrentDateMacro.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates list of lookup items
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.CurrentDateMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.CurrentDateTimeMacro.GetPlaceholder">
            <summary>
            Gets default value to insert in text where the macro will be evaluated
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.CurrentDateTimeMacro.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates quick macro result
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.CurrentDateTimeMacro.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates list of lookup items
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.CurrentDateTimeMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.CurrentNamespaceMacro.GetPlaceholder">
            <summary>
            Gets default value to insert in text where the macro will be evaluated
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.CurrentNamespaceMacro.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates quick macro result
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.CurrentNamespaceMacro.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates list of lookup items
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.CurrentNamespaceMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.DecapitalizeMacro">
            <summary>
            A macro which capitalizes its input
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.DecapitalizeMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.DefaultNamespaceMacro.GetPlaceholder">
            <summary>
            Gets default value to insert in text where the macro will be evaluated
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.DefaultNamespaceMacro.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates quick macro result
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.DefaultNamespaceMacro.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates list of lookup items
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.DefaultNamespaceMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.FileDefaultNamespaceMacro.GetPlaceholder">
            <summary>
            Gets default value to insert in text where the macro will be evaluated
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.FileDefaultNamespaceMacro.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates quick macro result
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.FileDefaultNamespaceMacro.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates list of lookup items
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.FileDefaultNamespaceMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.FileNameMacro.GetPlaceholder">
            <summary>
            Gets default value to insert in text where the macro will be evaluated
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.FileNameMacro.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates quick macro result
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.FileNameMacro.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates list of lookup items
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.FileNameMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.FileNameWithoutExtensionMacro.GetPlaceholder">
            <summary>
            Gets default value to insert in text where the macro will be evaluated
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.FileNameWithoutExtensionMacro.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates quick macro result
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.FileNameWithoutExtensionMacro.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates list of lookup items
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.FileNameWithoutExtensionMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.FullUserNameMacro.GetPlaceholder">
            <summary>
            Gets default value to insert in text where the macro will be evaluated
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.FullUserNameMacro.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates quick macro result
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.FullUserNameMacro.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates list of lookup items
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.FullUserNameMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.GuessElementTypeMacro">
            <summary>
            Guesses element type for a containter
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.TypeSuggestionMacroBase.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.GuessElementTypeMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.GuessKeyTypeMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.GuessValueTypeMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.LineNumberMacro">
            <summary>
            A macro which evaluates number of the current line
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.LineNumberMacro.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates quick macro result
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.LineNumberMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.OutputNameMacro.GetPlaceholder">
            <summary>
            Gets default value to insert in text where the macro will be evaluated
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.OutputNameMacro.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates quick macro result
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.OutputNameMacro.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates list of lookup items
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.OutputNameMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ParameterOfTypeMacro">
            <summary>
            Suggests IEnumerable variable
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ParameterOfTypeMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ProjectNameMacro.GetPlaceholder">
            <summary>
            Gets default value to insert in text where the macro will be evaluated
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ProjectNameMacro.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates quick macro result
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ProjectNameMacro.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates list of lookup items
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ProjectNameMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.SolutionNameMacro.GetPlaceholder">
            <summary>
            Gets default value to insert in text where the macro will be evaluated
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.SolutionNameMacro.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates quick macro result
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.SolutionNameMacro.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates list of lookup items
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.SolutionNameMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.SuggestEnumerableVariableMacro">
            <summary>
            Suggests IEnumerable variable
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.SuggestEnumerableVariableMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.SuggestIndexVariableNameMacro">
            <summary>
            Suggests index variable
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.SuggestVariableNameMacroBase.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.SuggestVariableNameMacro">
            <summary>
            Suggests variable name
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.SuggestVariableOfTypeMacro">
            <summary>
            Suggests IEnumerable variable
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.SuggestVariableOfTypeMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.UserNameMacro.GetPlaceholder">
            <summary>
            Gets default value to insert in text where the macro will be evaluated
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.UserNameMacro.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates quick macro result
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.UserNameMacro.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext,System.Collections.Generic.IList{System.String})">
            <summary>
            Evaluates list of lookup items
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.UserNameMacro.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroAttribute">
            <summary>
            Special attribute that should be applied to classes implementing <see cref="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacro"/> interface to 
            be automatically registered.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroAttribute.Name">
            <summary>
            Gets macro name (as written in expressions)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroAttribute.ShortDescription">
            <summary>
            Gets macro description (shown in the UI)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroAttribute.LongDescription">
            <summary>
            Gets long macro description
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroAttribute.ParameterTypes">
            <summary>
            Gets or sets parameter types accepted by the macro
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroCallExpression">
            <summary>
            Expression for calling a macro
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroCallExpression.Serialize">
            <summary>
            Serializes the expression
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroManager">
            <summary>
            Manages live templates macros
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroParser">
            <summary>
            Parses live template macros 
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.VariableMacroParameter">
            <summary>
            Expression which is evaluated to a variable value
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.VariableMacroParameter.GetText(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Gets parameter text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.QuickLists.QuickList">
            <summary>
            Quick list implementation
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateStorage">
            <summary>
            Represents a template storage
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateStorage.ReplaceTemplate(JetBrains.ReSharper.LiveTemplates.Templates.Template,JetBrains.ReSharper.LiveTemplates.Templates.Template)">
            <summary>
            Replaces one template with another
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateStorage.Icon">
            <summary>
            Get storage icon
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateStorage.Name">
            <summary>
            Gets storage name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateStorage.ReadOnly">
            <summary>
            Gets flag indicating whether the storage is readonly
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateStorage.Family">
            <summary>
            Gets templates family
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateStorage.Templates">
            <summary>
            Gets templates located in this folder
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.IPredefinedStorage.Restore(JetBrains.ReSharper.LiveTemplates.Templates.Template)">
            <summary>
            Restores template to original predefined version
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.UserStorage">
            <summary>
            Storage for user-level templates
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Support.IFileTemplatesSupport.Accepts(JetBrains.ProjectModel.IProject)">
            <summary>
            Checks if a project is supported
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Support.IFileTemplatesSupport.Name">
            <summary>
            Gets name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Support.IFileTemplatesSupport.QuickListSupport">
            <summary>
            Gets quick list support
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.LiveTemplates.SurroundTemplates.SurroundTemplatesFamilyEditorUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.SurroundTemplates.SurroundTemplatesFamilyEditorUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.SurroundTemplates.SurroundTemplatesFamilyEditorUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.LiveTemplates.Templates.Template">
            <summary>
            Implementation for the Template interface
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.LiveTemplates.Templates.Template.Context">
            <summary>
            Defines template context
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.LiveTemplates.Templates.Template.Text">
            <summary>
            Gets the template text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.LiveTemplates.TemplateKind">
            <summary>
            Enumerates possible kinds of templates
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.LiveTemplates.Templates.TemplateTokenType">
            <summary>
            Describes tokens which are specific for templates
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateUtil">
            <summary>
            Contains utility methods for template execution
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.LiveTemplates.UI.TemplateContextControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.UI.TemplateContextControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.UI.TemplateContextControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter">
            <summary>
            Paints code completion items
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.IListItemPainter`1">
            <summary>
            Interface for painters used in conjunction with ListForm
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter.myItems">
            <summary>
            List of items
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter.myListBoxControl">
            <summary>
            The list box to use
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter.myLeftAlign">
            <summary>
            The flag indicating whether to align types to the left
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter.myMaxNameWidth">
            <summary>
            Maximum left size width
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter.myRenderParams">
            <summary>
            The lookup item text rendering aspect.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter.ShrinkLookupListItemNameToWidth(JetBrains.ReSharper.Feature.Services.Lookup.LookupListItem,System.Int32,System.Drawing.Graphics)">
            <summary>
            Shrinks name text to the given width.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter.LeftAlign">
            <summary>
            Gets or sets the left align flag
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter.RenderParams">
            <summary>
            Gets the rendering aspect for the lookup list items.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.ContextTracker">
            <summary>
            Tracks keyboard commands and maintains prefix
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ContextTracker.ContextChanged">
            <summary>
            Event is raised when the tracker changes
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.IListItemDescriptor">
            <summary>
            Interface for creating custom list items
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.IListItemDescriptor.RichText">
            <summary>
            The presentation rich text
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.IListItemDescriptor.Tag">
            <summary>
            The custom tag
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.IListItemDescriptor.Image">
            <summary>
            The image
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.ILookup">
            <summary>
            Interface for creating lookup windows
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.Solution">
            <summary>
            Solution the window is executed within
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.BeforeShownItemsUpdated">
            <summary>
            Event is raised before items list is shown
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.CurrentItemChanged">
            <summary>
            Event which is raised when the current item changes
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.ItemCompleted">
            <summary>
            Raised when an item is completed
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.Closed">
            <summary>
            Raised when the window is closed
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.Typing">
            <summary>
            Raised when typing happens
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupWindow.CurrentItemBounds">
            <summary>
            Gets bounds of the current item, in client coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupWindow.Bounds">
            <summary>
            Gets bounds of the window
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookupWindow.ShowBefore">
            <summary>
            Event which is raised immediately before the lookup window is shown
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookupWindow.ShowAfter">
            <summary>
            Event which is raised immediately after the lookup window is shown
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookupWindow.WindowClose">
            <summary>
            Event which is raised before the lookup window closes
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookupWindow.WindowHidden">
            <summary>
            Event which is raised before the lookup window is hidden
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookupWindow.Scrolled">
            <summary>
            Event which is raised when lookup window is scrolled
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.IKeywordLookupItem">
            <summary>
            Marker interface mainly for overriding of keywords by live templates.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.ListForm`1">
            <summary>
            List form implementation.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.Lookup">
            <summary>
            Form which is used to display list of lookup items
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.Lookup.mySortedItems">
            <summary>
            The complete list of lookup items sorted by name
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.Lookup.myCurrentItems">
            <summary>
            The list of current (filtered) lookup items
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.Lookup.ItemCompleted">
            <summary>
            Raised when an item is completed
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.Lookup.Solution">
            <summary>
            Solution the window is executed within
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.Lookup.CurrentItemChanged">
            <summary>
            Event which is raised when the current item changes
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters">
            <summary>
            A class that implements the coupled layouters for the lookup window and parameter info tooltip.
            Create a new layouter through the <see cref="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.TextControls"/> property.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.OptionParameterInfoBelow">
            <summary>
            Whether the default parameter info disposition is above or below the line.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.TextControl">
            <summary>
            Gets the text controls instance for which the layouters can be created.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.TextControl.ITextControl)">
            <summary>
            Creates an instance, registers it in the list.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.CreateLookupLayouter(JetBrains.DataFlow.Lifetime,JetBrains.UI.IAnchoringRect)">
            <summary>
            Creates a layouter for the lookup window.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.CreateLookupTooltipLayouter(JetBrains.DataFlow.Lifetime,JetBrains.UI.IAnchoringRect)">
            <summary>
            Creates a layouter for the lookup-list-based parameter info window.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.CreateParameterInfoLayouter(JetBrains.DataFlow.Lifetime,JetBrains.UI.IAnchoringRect)">
            <summary>
            Creates a layouter for the text-editor-based parameter info window.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.GetAvailDispositions(JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.LayouterIds)">
            <summary>
            Gets the dispositions that can be used for running each of the layouters.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.CreateLayouter(JetBrains.DataFlow.Lifetime,JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.LayouterIds,JetBrains.UI.IAnchoringRect,System.Boolean)">
            <summary>
            Creates any of the layouters.
            </summary>
            <param name="lifetime"></param>
            <param name="id">Which layouter to create.</param>
            <param name="anchor">Anchor for the layouter.</param>
            <param name="bAllowNonStrictRecursion">With Option Strict OFF, sometimes the disposal of an already-used layouter causes the whole instance to dispose. In this case, make a recursive call over a new instance. This param prevents from infinite recursion.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.DirtyHackLookupAndParameterInfoDispositions">
            <summary>
            Dirty Hack for the Parameter Info and Lookup tooltips.
            Initially, ParamInfo is displayed below the line, which occupies the space of the lookup window. As lookup shows, move param-info up.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.UpdateLayout">
            <summary>
            Recalculates the layout.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.ActiveLayouter.AnchoringRect">
            <summary>
            Anchoring rectangles for the coupled layouters.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.ActiveLayouter.StickyDisposition">
            <summary>
            Stores the sticky dispositions for layouting each of the entities.
            This makes sure that if the parameter info has been switched up after completion was shown wouldn't jump back down after completion is closed.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.ActiveLayouter.Layouter">
            <summary>
            The coupled layouters controlled by this instance.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.LayouterIds">
            <summary>
            IDs for the layouters and anchors.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupHighlightingTracker">
            <summary>
            Tracks replacement highlighting
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemAnchoringRect">
            <summary>
            Tracks dynamically the currently selected item bounds within the given lookup window, in client coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemAnchoringRect.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.ReSharper.Feature.Services.Lookup.ILookup)">
            <summary>
            Creates the instance.
            </summary>
            <param name="lifetime"></param>
            <param name="lookup">Lookup window whose selection to track.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemAnchoringRect.UpdateAnchor">
            <summary>
            Updates the anchoring rectangle as it gets dirty.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemAnchoringRect.Lookup">
            <summary>
            The owning lookup window.
            May be <c>Null</c> if already disposed.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupListItem.myNameText">
            <summary>
            The rich presentation of name
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupListItem.myTypeText">
            <summary>
            Rich presentation of the type
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupListItem.myItem">
            <summary>
            The associated context item
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupListItem.myImage">
            <summary>
            The image
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupListItem.CancelShrink">
            <summary>
            Cancels all shrinks
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupListItem.Shrink">
            <summary>
            Shrinks the name a bit.
            </summary>
            <returns>Whether there was any shrinking. The <see cref="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupListItem.RichText"/> width must decrease if <c>True</c>.</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupOptions.DefaultLookupFont">
            <summary>
            Gets the editor font
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.AsyncLookupParameterInfoHandler">
            <summary>
            Parameter info handler for lookup lists
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider">
            <summary>
            Interface for creating parameter info handlers for different contexts
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider.CreatePopupWindowContext(JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates a popup window context.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider.Context">
            <summary>
            Gets the current context provided by the handler.
            </summary>
            <value>
            The current context or <c>null</c> if the context is not available and session 
            is finished.
            </value>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider.ContextChanged">
            <summary>
            Event which is raised when context changes
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider.HideFlags">
            <summary>
            Gets flags indicating when to close the window
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupUtil">
            <summary>
            Contains utility methods for lookup management
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindow">
            <summary>
            UI-related part of lookup form
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindow.MagicalOffsetConstant">
            <summary>
            A magical offset to be added to the lookup form. Presumably, accomodates for some gaps, intercolumn spacing, in-item padding and so on.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindow.myLookupListItemsCache">
            <summary>
            Caches lookup list items created for lookup items. This allows caching size for them in list item painter.
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindow.Scrolled">
            <summary>
            Event which is raised when lookup window is scrolled
            </summary> 
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindow.BeforeShownItemsUpdated">
            <summary>
            Event is raised before items list is shown
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindow.CurrentItemBounds">
            <summary>
            Gets bounds of the current item
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindow.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindow.ShowWithoutActivation">
            <summary>
            Gets a value indicating whether the window will be activated when it is shown.
            </summary>
            
            <returns>
            True if the window will not be activated when it is shown; otherwise, false. The default is false.
            </returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindowManagerImpl">
            <summary>
            Manages currently shown lookup window
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindowManagerImpl.IsExternalDocumentChangeAllowed">
            <summary>
            If this flag is set, any document change doesn't cancel code completion
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.MethodsLookupItem">
            <summary>
            Code completion item which consists of several methods
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.Suffix.Playback(JetBrains.TextControl.ITextControl)">
            <summary>
            Emulates typing of the suffix in given text control
            </summary>
            <param name="textControl"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.TypeNameCodeCompletionLookupItem">
            <summary>
            Code completion result item for type name completion
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.VariableComparer">
            <summary>
            Comparer which prefers local variables to fields and properties. 
            Note that for preference policy the "0" return value doesn't
            mean that items are equal - it means that the comparer can say nothing about the items.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.MatchingBrace.ISimpleMatchingBraceProvider">
            <summary>
            Provides token-level information about matching braces
            </summary>
            <remarks>
            <see cref="T:System.Collections.Generic.IComparer`1"/> must be implemented according to the following rules:
            <list type="disc">
              <item>It is defined on brace pairs, result for open and close brace of the same pair is the same</item>
              <item>If one brace pair is "greater" than another that means that balance of "lesser" brace pair outside of "greater" brace pair doesn't count inside the "greater" brace pair</item>
            </list>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.MatchingBrace.MatchingBraceUtil.BracketMatchStack">
            <summary>
            Stack of different bracket types for finding matched one.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.ProjectFileNavigationPoint">
            <summary>
            Project file's navigation point without cursor positioning
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Filtering.FilteringPrefixMatcher">
            <summary>
            A preofix matcher that features an additional freehand filter not based on the regex.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Filtering.FilteringPrefixMatcher.Matcher">
            <summary>
            Gets the underlying matcher.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.Argument">
            <summary>
            Argument under cursor
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.NamedArguments">
            <summary>
            Each array element contains argument name (if argument is named) or null or empty otherwise.
            Length of the array equals to number of arguments or 0.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.DefaultCandidate">
            <summary>
            Candidate, that is resolved, -1 otherwise
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.Candidates">
            <summary>
            Candidates available
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.Range">
            <summary>
            Invocation range. EndOffset == -1 if no right bound specified
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoContextBase.FilterOut(System.Int32)">
            <summary>
            Filters out an invocation
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoContextBase.Argument">
            <summary>
            Gets number of parameter we're standing at
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoContextBase.Range">
            <summary>
            Gets the left parenthesis offset
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoPopupController">
            <summary>
            Interface for component which controls automatic parameter info popup
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoPopupController.PopupParameterInfo(JetBrains.ProjectModel.ISolution,JetBrains.TextControl.ITextControl,System.Int32,JetBrains.ReSharper.Psi.IDeclaredElement)">
            <summary>
            Shows parameter info in the specified text control with specified expected left parenthesis offset and highlights
            the specified signature
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoSettings">
            <summary>
            Interface for component which controls automatic parameter info popup
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoSettings.ShowOneCandidate">
            <summary>
            Gets or sets flag indicating whether show one candidatein the popup or all.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoSettings.DelegatesAsLambdas">
            <summary>
            Gets or sets flag indicating whether show one candidatein the popup or all.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoSettings.UseArrowsForSignatureNavigation">
            <summary>
            Gets or sets flag indicating whether use arrows instead of Control+P in parameter info popup.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoSettings.AutopopupOn">
            <summary>
            Gets or sets flag indicating whether automatic parameter info popup is enabled.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoSettings.AutopopupDelay">
            <summary>
            Gets or sets delay to automatically show parameter info popup in.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.TypeArgumentCandidate.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.Render.IXmlDocHeaderPresenter.Present(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Psi.IPsiModule)">
            <summary>
            Presents the declared element as a header for HTML quick doc
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Search.ISpecialElementFinder.GetSearchTarget(JetBrains.ReSharper.Psi.Tree.IFile,System.Nullable{JetBrains.DocumentModel.DocumentRange},System.Nullable{System.Int32})">
            <summary>
            Get special finder's search targets
            </summary>
            <param name="file"></param>
            <param name="range">
              Range in document (selection or caret only). Can be null if invoked on project item
            </param>
            <param name="caretOffset">
              Caret position. Can be null if invoked on project item
            </param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.DotSelection.GetParentInternal(JetBrains.ReSharper.Psi.Tree.ITokenNode)">
            <summary>
            Implements special processing of some tokens
            </summary>
            <param name="tokenNode"></param>
            <returns>null, if no special processing required</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.TypingAssist.BracketMatcher.FindMatchingBracket(JetBrains.ReSharper.Psi.Parsing.CachingLexer,System.Int32@)">
            <summary>
            Try to find the corresponding matching bracket for the given
            </summary>
            <param name="cachingLexer">Caching lexer positioned at the source bracket</param>
            <param name="pos">position of paired bracket (or -1 if none)</param>
            <returns>true if matching bracket was found. If returns false, the pos may contain position of incorrect bracket</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.CodeInsightUtil">
            <summary>
            Contains utility methods for code insight features
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Validators.PropertyValidatorFactory">
            <summary>
            Performs validation of <see cref="T:JetBrains.DataFlow.IProperty`1"/> in the aspect of valid language names, and such.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Validators.PropertyValidatorFactory.CreateNewNameValidator(JetBrains.DataFlow.IProperty{System.String},JetBrains.ReSharper.Psi.IDeclaredElementPointer{JetBrains.ReSharper.Psi.IDeclaredElement},System.String)">
            <summary>
            Checks whether the string property value is a valid new name for an identifier.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Validators.PropertyValidatorFactory.CreateNewNameValidator(JetBrains.DataFlow.IProperty{System.String},JetBrains.ReSharper.Psi.IDeclaredElement,System.String)">
            <summary>
            Checks whether the string property value is a valid new name for an identifier.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Validators.PropertyValidatorFactory.CreateNewNameValidator(JetBrains.DataFlow.IProperty{System.String},JetBrains.ReSharper.Psi.PsiLanguageType,System.String)">
            <summary>
            Checks whether the string property value is a valid new name for an identifier.
            </summary>
        </member>
    </members>
</doc>
