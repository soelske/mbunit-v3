<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.ReSharper.UI.Avalon</name>
    </assembly>
    <members>
        <member name="M:JetBrains.UI.Avalon.Interop.AvalonBitmapInterop.ToBitmapSource(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Converts a portion of <see cref="T:System.Drawing.Bitmap"/> into a WPF <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.
            </summary>
            <remarks>Uses GDI to do the conversion. Hence the call to the marshalled DeleteObject.
            </remarks>
            <param name="source">The source bitmap.</param>
            <param name="sourceRect">Rectangle in source bitmap to convert</param>
            <returns>A BitmapSource</returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.AvalonBitmapInterop.ToBitmapSource(System.Drawing.Bitmap)">
            <summary>
            Converts a <see cref="T:System.Drawing.Bitmap"/> into a WPF <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.
            </summary>
            <remarks>Uses GDI to do the conversion. Hence the call to the marshalled DeleteObject.
            </remarks>
            <param name="source">The source bitmap.</param>
            <returns>A BitmapSource</returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.AvalonBitmapInterop.RenderGdipIntoAvalonImageSet(System.Drawing.Size,System.Int32,System.Action{System.Drawing.Graphics})">
            <summary>
            Creates a <see cref="T:System.Drawing.Graphics">GDI+ Graphics</see> to render into, and returns the rendering result in a form of set of sliced <see cref="T:System.Windows.Media.Imaging.BitmapSource">Avalon images</see>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.AvalonBitmapInterop.RenderGdipIntoAvalonImage(System.Drawing.Size,System.Action{System.Drawing.Graphics})">
            <summary>
            Creates a <see cref="T:System.Drawing.Graphics">GDI+ Graphics</see> to render into, and returns the rendering result in a form of set of sliced <see cref="T:System.Windows.Media.Imaging.BitmapSource">Avalon images</see>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.AvalonBitmapInterop.RenderGdipIntoAvalonImage(System.Windows.Size,JetBrains.UI.Avalon.Interop.AvalonBitmapInterop.AlphaChannel,System.Action{System.Drawing.Graphics})">
            <summary>
            Creates a <see cref="T:System.Drawing.Graphics">GDI+ Graphics</see> to render into, and returns the rendering result in a form of an <see cref="T:System.Windows.Media.ImageSource">Avalon image</see>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.AvalonBitmapInterop.RenderGdipIntoAvalonImage_GdiBitmap_DIBitmap(System.Windows.Size,JetBrains.UI.Avalon.Interop.AvalonBitmapInterop.AlphaChannel,System.Action{System.Drawing.Graphics})">
            <summary>
            Creates a <see cref="T:System.Drawing.Graphics">GDI+ Graphics</see> to render into, and returns the rendering result in a form of an <see cref="T:System.Windows.Media.ImageSource">Avalon image</see>.
            </summary>
            <remarks>Thought it could re-use the bits of <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/>, but seems like it's not the way it works.</remarks>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.AvalonBitmapInterop.RenderGdipIntoAvalonImage_GdipBitmap(System.Windows.Size,JetBrains.UI.Avalon.Interop.AvalonBitmapInterop.AlphaChannel,System.Action{System.Drawing.Graphics})">
            <summary>
            Creates a <see cref="T:System.Drawing.Graphics">GDI+ Graphics</see> to render into, and returns the rendering result in a form of an <see cref="T:System.Windows.Media.ImageSource">Avalon image</see>.
            </summary>
            <remarks>Creates a byte buffer, a GDI+ bitmap right on these bytes, and then an Avalon image off these bytes. Could be easily turned into a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> to reuse its bytes on subsequent renders of the same size, but in this method if a GDI DC is created off the GDIP DC, then any transparency functions would fail (cannot get the back color it seems), like ClearType or even rectangles with alpha. So we cannot use it as a main method, and thus no use optimizing into a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/>.</remarks>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.AvalonBitmapInterop.RenderGdipIntoAvalonImage_GdiBitmap_DIBSection(System.Windows.Size,JetBrains.UI.Avalon.Interop.AvalonBitmapInterop.AlphaChannel,System.Action{System.Drawing.Graphics})">
            <summary>
            Creates a <see cref="T:System.Drawing.Graphics">GDI+ Graphics</see> to render into, and returns the rendering result in a form of an <see cref="T:System.Windows.Media.ImageSource">Avalon image</see>.
            </summary>
            <remarks>Creates a GDI bitmap, HDC on it, Graphics on that, and uses the GDI bitmap bytes to create an Avalon image off those. Not quite compatible with <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> because the bits are created by <see cref="M:JetBrains.Interop.WinApi.Gdi32Dll.CreateDIBSection(System.Void*,JetBrains.Interop.WinApi.Declarations.Structures.BITMAPINFO*,System.UInt32,System.Void**,System.Void*,System.Int32)"/> anew each time.</remarks>
        </member>
        <member name="T:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap">
            <summary>
            Allows to render with GDIP into an Avalon device context.
            Bitmap source object reused on renders, recreated when size changes (with optional optimizations).
            Created (and gets size) on first <see cref="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.PaintGdip(System.Windows.Size,System.Action{System.Drawing.Graphics})"/>, any <see cref="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.Render(System.Windows.Media.DrawingContext,System.Windows.Rect)"/> calls before that are silently ignored.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.myBitmap">
            <summary>
            Avalon bitmap source: reused on renders, recreated when size changes.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.myLogicalSize">
            <summary>
            The size, as set by the user, as painted, as visible on screen on render.
            The bitmap might be larger to optimize for resizes (see <see cref="F:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.myResizePolicy"/>).
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.PaintGdip(System.Windows.Size,System.Action{System.Drawing.Graphics})">
            <summary>
            Does GDI+ rendering into this bitmap.
            </summary>
            <param name="sizeNew">The new size of the bitmap (or the old one, in which case the bitmap will remain intact).</param>
            <param name="FRender">Painter.</param>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.Render(System.Windows.Media.DrawingContext,System.Windows.Rect)">
            <summary>
            Renders the bitmap onto the given DC.
            Only the logical-size-part is painted, any lazy-sized regions outside the logical size are clipped out.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.ChooseBitmapSizeByPolicy_LazyDim(System.Double,System.Double)">
            <summary>
            Chooses each dim of the lazy preferred size.
            When less than screen, round up to the nearest power of 2. When larger, round up to the nearest screen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.ChooseBitmapSizeByPolicy(System.Windows.Size)">
            <summary>
            In lazy mode, we do not want to respawn the bitmap each time we're growing it gradually (eg resizing the window).
            Snap sizes to some common values in lazy mode.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.RecreateBitmap(System.Windows.Size)">
            <summary>
            Create new writable bitmap of the given size.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.ResizePolicy.Exact">
            <summary>
            Bitmap is always of the required size, exactly. Reallocated on each resize.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.ResizePolicy.Lazy">
            <summary>
            Old bitmap is reused if the new size is smaller.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.AvalonEx">
            <summary>
            Extension methods for Avalon.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.AddChild``1(``0,System.Windows.UIElement)">
            <summary>
            Adds a new child to the panel control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.AddColumnChild(System.Windows.Controls.Grid,System.String,System.Windows.UIElement)">
            <summary>
            Adds a new column to the grid, placing a child in the newly-added column.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.AddRowChild(System.Windows.Controls.Grid,System.String,System.Windows.UIElement)">
            <summary>
            Adds a new row to the grid, placing a child in the newly-added row.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Controls.TextBlock,System.String)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Documents.Span,System.String)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Documents.Span"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Documents.Span,System.Windows.Documents.Inline)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Inline"/> to the <see cref="T:System.Windows.Documents.Span"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Controls.TextBlock,System.String,System.Windows.FontStyle)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Controls.TextBlock,System.String,System.Windows.FontWeight)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Controls.TextBlock,System.Windows.Documents.Run)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Controls.TextBlock,System.Windows.Documents.Inline)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Inline"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Controls.TextBlock,System.String,System.Windows.FontStyle,System.Windows.FontWeight)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Documents.Span,System.String,System.Windows.FontStyle,System.Windows.FontWeight)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Documents.Span"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Documents.Paragraph,System.String)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Documents.Paragraph"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Documents.Paragraph,System.String,System.Windows.FontStyle,System.Windows.FontWeight)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Documents.Paragraph"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.AppendLine(System.Windows.Documents.Span)">
            <summary>
            Adds a line break to the <see cref="T:System.Windows.Documents.Span"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.AssertIsReal(System.Windows.Point,System.String)">
            <summary>
            Asserts that point coordinates are real numbers. Fluent.
            Throws on <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.PositiveInfinity"/>, <see cref="F:System.Double.NegativeInfinity"/>.
            </summary>
            <param name="pt">Point to test.</param>
            <param name="failmessage">Optional. Message to include in the failure exception.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.AssertIsReal(System.Windows.Rect,System.String)">
            <summary>
            Asserts that rectangle coordinates are real numbers. Fluent.
            Throws on <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.PositiveInfinity"/>, <see cref="F:System.Double.NegativeInfinity"/>.
            </summary>
            <param name="rect">Point to test.</param>
            <param name="failmessage">Optional. Message to include in the failure exception.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.AssertIsReal(System.Windows.Size,System.String)">
            <summary>
            Asserts that size dimensions are real numbers. Fluent.
            Throws on <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.PositiveInfinity"/>, <see cref="F:System.Double.NegativeInfinity"/>.
            </summary>
            <param name="size">Point to test.</param>
            <param name="failmessage">Optional. Message to include in the failure exception.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Bind``1(``0,System.Windows.DependencyProperty,System.String)">
            <summary>
            Establishes a two-way property binding on the element.
            The “Update Source” is triggered according to the default scenario (ie on focus loss for an edit box).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Bind``1(``0,System.Windows.DependencyProperty,System.Windows.Data.BindingBase)">
            <summary>
            Establishes a two-way property binding on the element.
            The “Update Source” is triggered according to the default scenario (ie on focus loss for an edit box).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.BindOnChange``1(``0,System.Windows.DependencyProperty,System.String)">
            <summary>
            Establishes a two-way property binding on the element.
            The “Update Source” is triggered immediately when the property changes (ie on typing for an edit box).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Cols(System.Windows.Controls.Grid,System.String[])">
            <summary>
            Adds columns to the grid. Each sizes element is a Star grid-length value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Constrain(System.Windows.Size,System.Windows.Size)">
            <summary>
            Constraints the <paramref name="size"/> to be no more than <paramref name="constraint"/> on each of the dimensions independently.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.ConvertBoolToVisibility(System.Boolean)">
            <summary>
            A converter.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Dock``1(``0,System.Windows.Controls.Dock)">
            <summary>
            Sets the <see cref="F:System.Windows.Controls.DockPanel.DockProperty"/> extension property on the specified UI element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.InGrid``1(``0,System.Int32,System.Int32)">
            <summary>
            Sets the <see cref="F:System.Windows.Controls.Grid.ColumnProperty"/> and <see cref="F:System.Windows.Controls.Grid.RowProperty"/> extension properties on the specified UI element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.InGrid``1(``0,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the <see cref="F:System.Windows.Controls.Grid.ColumnProperty"/> and <see cref="F:System.Windows.Controls.Grid.RowProperty"/> extension properties on the specified UI element.
            In addition, specifies the <see cref="F:System.Windows.Controls.Grid.ColumnSpanProperty"/> and <see cref="F:System.Windows.Controls.Grid.RowSpanProperty"/> extension properties.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.IsNanOrInf(System.Windows.Point)">
            <summary>
            Gets whether any of the coordinates are NAN or INF (<see cref="M:JetBrains.NumberUtil.IsNanOrInf(System.Double)"/>).
            </summary>
            <seealso cref="M:JetBrains.UI.Avalon.AvalonEx.AssertIsReal(System.Windows.Point,System.String)"/>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.IsNanOrInf(System.Windows.Size)">
            <summary>
            Gets whether any of the coordinates are NAN or INF (<see cref="M:JetBrains.NumberUtil.IsNanOrInf(System.Double)"/>).
            </summary>
            <seealso cref="M:JetBrains.UI.Avalon.AvalonEx.AssertIsReal(System.Windows.Size,System.String)"/>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.IsNanOrInf(System.Windows.Rect)">
            <summary>
            Gets whether any of the coordinates are NAN or INF (<see cref="M:JetBrains.NumberUtil.IsNanOrInf(System.Double)"/>).
            </summary>
            <seealso cref="M:JetBrains.UI.Avalon.AvalonEx.AssertIsReal(System.Windows.Rect,System.String)"/>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.MakeGeometryBrush(System.Windows.Media.Geometry,System.Windows.Media.SolidColorBrush,System.Windows.Media.Pen)">
            <summary>
            For a geometry, creates a brush that could be used to paint a rectangle with a geometry.
            The geometry spans the whole brush area.
            The coordinate space of the geometry is assumed to be (0,0)-(1000,1000).
            It would have been better to have (0,0)-(1,1), but some of the Avalon geometry clippers revert to rough edges on sizes less than one.
            </summary>
            <param name="geometry">The Geometry.</param>
            <param name="brush">Brush. Optional.</param>
            <param name="pen">Pen (brush + thinkness). Optional.</param>
            <returns>The brush that paints the geometry.</returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.MixWith(System.Windows.Media.Color,System.Windows.Media.Color,System.Single)">
            <summary>
            Mixes two colors together.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Name``1(``0,System.Windows.FrameworkElement,System.String)">
            <summary>
            Registers a name for the object in the host's name scope.
            The name scope must first be registered for the host or one of its parents.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.OnEvent``1(``0,System.Windows.RoutedEvent,System.Windows.RoutedEventHandler)">
            <summary>
            Sinks the specified <paramref name="event"/> on the <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.OnEvent``1(``0,System.Windows.RoutedEvent,System.Action)">
            <summary>
            Sinks the specified <paramref name="event"/> on the <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.OnEventC``1(``0,System.Windows.RoutedEvent,System.Windows.RoutedEventHandler)">
            <summary>
            Sinks the specified <paramref name="event"/> on the <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.RectFromScreen(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Like <see cref="M:System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)"/>, but for a <see cref="T:System.Windows.Rect"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.RectToScreen(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Like <see cref="M:System.Windows.Media.Visual.PointToScreen(System.Windows.Point)"/>, but for a <see cref="T:System.Windows.Rect"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Rows(System.Windows.Controls.Grid,System.String[])">
            <summary>
            Adds rows to the grid. Each sizes element is a Star grid-length value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Scale``1(``0,System.Double)">
            <summary>
            Applies a scale layout transformation to the element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Set``1(``0,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Sets a dependency property on a dependency object, allows to pipe such settings.
            Especially useful for setting extension properties.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.SetDialogFont``1(``0)">
            <summary>
            Applies dialog font to a control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.SetEditorFont``1(``0)">
            <summary>
            Applies editor font to a control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.SetSystemFont(System.Windows.Documents.FlowDocument)">
            <summary>
            By default, a document has some large serif font applied.
            Makes the document follow the system font family and sizes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.IsCollapsed(System.Windows.Size)">
            <summary>
            Gets whether the given size is collapsed, that is, has a zero or negative dimension.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.IsConstrained(System.Windows.Size,System.Windows.Size)">
            <summary>
            Checks whether the <paramref name="source"/> size satisfies the <paramref name="limit"/>, in terms of the <see cref="M:JetBrains.UI.Avalon.AvalonEx.Constrain(System.Windows.Size,System.Windows.Size)"/> function.
            </summary>
            <param name="source">The source size to be limited. May be non-normalized.</param>
            <param name="limit">The limiting size. Must be normalized.</param>
            <returns>Whether executing <see cref="M:JetBrains.UI.Avalon.AvalonEx.Constrain(System.Windows.Size,System.Windows.Size)"/> over <paramref name="source"/> and <paramref name="limit"/> won't change the <paramref name="source"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.IsNormalized(System.Windows.Size)">
            <summary>
            Checks whether the size corresponds to a normalized rectangle.
            A normalized rectangle is such whose left coordinate is not greater than right, and top coordinate is not greater than bottom.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.AvalonTemplates">
            <summary>
            Whenever an Avalon template is required, allows to supply a delegate to produce the object graph in runtime instead.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonTemplates.CreateControlTemplate(System.Func{System.Windows.UIElement})">
            <summary>
            Whenever an Avalon template is required, allows to supply a delegate to produce the object graph in runtime instead.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonTemplates.CreateDataTemplate(System.Func{System.Windows.UIElement})">
            <summary>
            Whenever an Avalon template is required, allows to supply a delegate to produce the object graph in runtime instead.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonTemplates.SetTemplate``1(``0,System.Func{System.Windows.UIElement})">
            <summary>
            A fluent method for setting up a template to be populated with a delegate.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Controls.Automation.AutomationProviders">
            <summary>
            See <see cref="M:JetBrains.UI.Avalon.Controls.Automation.AutomationProviders.Initialize"/>.
            Also, if we're running in the mode that includes this assembly, winds up the automation providers automatically.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.AutomationProviders.Initialize">
            <summary>
            Call this method to enable all of the automation peers.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.AutomationProviders.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.AutomationProviders.JetBrains#ComponentModel#IComponent#Init">
            <summary>
            <para>Initializes the component. Called by the component container after the component is created.</para>
            <para><see cref="M:System.IDisposable.Dispose"/> is the pairing method that's guaranteed to be called by the component container to tear down your component.</para>
            <para>You must not access other components before your <see cref="M:JetBrains.ComponentModel.IComponent.Init"/> method is called.</para>
            <para>All of the components that you access from <see cref="M:JetBrains.ComponentModel.IComponent.Init"/> are guaranteed to exist when your <see cref="M:System.IDisposable.Dispose"/> is called. Any other component might be missing by that time, and trying to get it will throw an exception.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ElementProviderFromPoint(System.Double,System.Double)">
            <summary>
            Retrieves the element in this fragment that is at the specified point. 
            </summary>
            <returns>
            The provider for the child element at the specified point, if one exists, or the root provider if the point is on this element but not on any child element. Otherwise returns null.
            </returns>
            <param name="x">The X coordinate,.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.GetEmbeddedFragmentRoots">
            <summary>
            Retrieves an array of fragment roots that are embedded in the UI Automation element tree rooted at the current element.
            </summary>
            <returns>
            An array of root fragments, or null.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.GetFocus">
            <summary>
            Retrieves the element in this fragment that has the input focus.
            </summary>
            <returns>
            The provider for the element in this fragment that has the input focus, if any; otherwise, a null reference (Nothing in Visual Basic).
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.GetPatternProvider(System.Int32)">
            <summary>
            Retrieves an object that provides support for a control pattern on a UI Automation element.
            </summary>
            <returns>
            Object that implements the pattern interface, or null if the pattern is not supported.
            </returns>
            <param name="patternId">Identifier of the pattern.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.GetPropertyValue(System.Int32)">
            <summary>
            Retrieves the value of a property supported by the UI Automation provider.
            </summary>
            <returns>
            The property value, or a null if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.
            </returns>
            <param name="propertyId">The property identifier.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.GetRuntimeId">
            <summary>
            Retrieves the runtime identifier of an element. 
            </summary>
            <returns>
            The unique run-time identifier of the element.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.Navigate(System.Windows.Automation.Provider.NavigateDirection)">
            <summary>
            Retrieves the UI Automation element in a specified direction within the tree.
            </summary>
            <returns>
            The element in the specified direction, or null if there is no element in that direction
            </returns>
            <param name="direction">The direction in which to navigate.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.SetFocus">
            <summary>
            Sets the focus to this element. 
            </summary>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.BoundingRectangle">
            <summary>
            Gets the bounding rectangle of this element.
            </summary>
            <returns>
            The bounding rectangle, in screen coordinates.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.FragmentRoot">
            <summary>
            Retrieves the root node of the fragment.
            </summary>
            <returns>
            The root node. 
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.HostRawElementProvider">
            <summary>
            Gets a base provider for this element.
            </summary>
            <returns>
            The base provider, or null.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ProviderOptions">
            <summary>
            Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider. 
            </summary>
            <returns>
            Either <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider" /> or <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider" />.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.Invoke">
            <summary>
            Sends a request to activate a control and initiate its single, unambiguous action.
            </summary>
            <returns>
            </returns>
            <exception cref="T:System.Windows.Automation.ElementNotEnabledException">If the control is not enabled.</exception>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.GetEmbeddedFragmentRoots">
            <summary>
            Retrieves an array of fragment roots that are embedded in the UI Automation element tree rooted at the current element.
            </summary>
            <returns>
            An array of root fragments, or null.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.GetPatternProvider(System.Int32)">
            <summary>
            Retrieves an object that provides support for a control pattern on a UI Automation element.
            </summary>
            <returns>
            Object that implements the pattern interface, or null if the pattern is not supported.
            </returns>
            <param name="patternId">Identifier of the pattern.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.GetPropertyValue(System.Int32)">
            <summary>
            Retrieves the value of a property supported by the UI Automation provider.
            </summary>
            <returns>
            The property value, or a null if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.
            </returns>
            <param name="propertyId">The property identifier.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.GetRuntimeId">
            <summary>
            Retrieves the runtime identifier of an element. 
            </summary>
            <returns>
            The unique run-time identifier of the element.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.Navigate(System.Windows.Automation.Provider.NavigateDirection)">
            <summary>
            Retrieves the UI Automation element in a specified direction within the tree.
            </summary>
            <returns>
            The element in the specified direction, or null if there is no element in that direction
            </returns>
            <param name="direction">The direction in which to navigate.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.SetFocus">
            <summary>
            Sets the focus to this element. 
            </summary>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.BoundingRectangle">
            <summary>
            Gets the bounding rectangle of this element.
            </summary>
            <returns>
            The bounding rectangle, in screen coordinates.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.FragmentRoot">
            <summary>
            Retrieves the root node of the fragment.
            </summary>
            <returns>
            The root node. 
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.HostRawElementProvider">
            <summary>
            Gets a base provider for this element.
            </summary>
            <returns>
            The base provider, or null.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.ProviderOptions">
            <summary>
            Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider. 
            </summary>
            <returns>
            Either <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider" /> or <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider" />.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.ElementProviderFromPoint(System.Double,System.Double)">
            <summary>
            Retrieves the element in this fragment that is at the specified point. 
            </summary>
            <returns>
            The provider for the child element at the specified point, if one exists, or the root provider if the point is on this element but not on any child element. Otherwise returns null.
            </returns>
            <param name="x">The X coordinate,.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.GetFocus">
            <summary>
            Retrieves the element in this fragment that has the input focus.
            </summary>
            <returns>
            The provider for the element in this fragment that has the input focus, if any; otherwise, a null reference (Nothing in Visual Basic).
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.Invoke">
            <summary>
            Sends a request to activate a control and initiate its single, unambiguous action.
            </summary>
            <returns>
            </returns>
            <exception cref="T:System.Windows.Automation.ElementNotEnabledException">If the control is not enabled.</exception>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.GetEmbeddedFragmentRoots">
            <summary>
            Retrieves an array of fragment roots that are embedded in the UI Automation element tree rooted at the current element.
            </summary>
            <returns>
            An array of root fragments, or null.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.GetPatternProvider(System.Int32)">
            <summary>
            Retrieves an object that provides support for a control pattern on a UI Automation element.
            </summary>
            <returns>
            Object that implements the pattern interface, or null if the pattern is not supported.
            </returns>
            <param name="patternId">Identifier of the pattern.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.GetPropertyValue(System.Int32)">
            <summary>
            Retrieves the value of a property supported by the UI Automation provider.
            </summary>
            <returns>
            The property value, or a null if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.
            </returns>
            <param name="propertyId">The property identifier.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.GetRuntimeId">
            <summary>
            Retrieves the runtime identifier of an element. 
            </summary>
            <returns>
            The unique run-time identifier of the element.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.Navigate(System.Windows.Automation.Provider.NavigateDirection)">
            <summary>
            Retrieves the UI Automation element in a specified direction within the tree.
            </summary>
            <returns>
            The element in the specified direction, or null if there is no element in that direction
            </returns>
            <param name="direction">The direction in which to navigate.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.SetFocus">
            <summary>
            Sets the focus to this element. 
            </summary>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.BoundingRectangle">
            <summary>
            Gets the bounding rectangle of this element.
            </summary>
            <returns>
            The bounding rectangle, in screen coordinates.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.FragmentRoot">
            <summary>
            Retrieves the root node of the fragment.
            </summary>
            <returns>
            The root node. 
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.HostRawElementProvider">
            <summary>
            Gets a base provider for this element.
            </summary>
            <returns>
            The base provider, or null.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.ProviderOptions">
            <summary>
            Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider. 
            </summary>
            <returns>
            Either <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider" /> or <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider" />.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuViewAutomationProvider.Invoke">
            <summary>
            Sends a request to activate a control and initiate its single, unambiguous action.
            </summary>
            <returns>
            </returns>
            <exception cref="T:System.Windows.Automation.ElementNotEnabledException">If the control is not enabled.</exception>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuViewAutomationProvider.GetPatternProvider(System.Int32)">
            <summary>
            Retrieves an object that provides support for a control pattern on a UI Automation element.
            </summary>
            <returns>
            Object that implements the pattern interface, or null if the pattern is not supported.
            </returns>
            <param name="patternId">Identifier of the pattern.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuViewAutomationProvider.GetPropertyValue(System.Int32)">
            <summary>
            Retrieves the value of a property supported by the UI Automation provider.
            </summary>
            <returns>
            The property value, or a null if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.
            </returns>
            <param name="propertyId">The property identifier.</param>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuViewAutomationProvider.HostRawElementProvider">
            <summary>
            Gets a base provider for this element.
            </summary>
            <returns>
            The base provider, or null.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuViewAutomationProvider.ProviderOptions">
            <summary>
            Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider. 
            </summary>
            <returns>
            Either <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider" /> or <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider" />.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.TipControlViewAutomationProvider.GetPatternProvider(System.Int32)">
            <summary>
            Retrieves an object that provides support for a control pattern on a UI Automation element.
            </summary>
            <returns>
            Object that implements the pattern interface, or null if the pattern is not supported.
            </returns>
            <param name="patternId">Identifier of the pattern.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.TipControlViewAutomationProvider.GetPropertyValue(System.Int32)">
            <summary>
            Retrieves the value of a property supported by the UI Automation provider.
            </summary>
            <returns>
            The property value, or a null if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.
            </returns>
            <param name="propertyId">The property identifier.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.TipControlViewAutomationProvider.SetValue(System.String)">
            <summary>
            Sets the value of a control.
            </summary>
            <returns>
            </returns>
            <param name="value">The value to set. The provider is responsible for converting the value to the appropriate data type.</param>
            <exception cref="T:System.InvalidOperationException">If locale-specific information is passed to a control in an incorrect format such as an incorrectly formatted date. </exception>
            <exception cref="T:System.ArgumentException">If a new value cannot be converted from a string to a format the control recognizes.</exception>
            <exception cref="T:System.Windows.Automation.ElementNotEnabledException">When an attempt is made to manipulate a control that is not enabled.</exception>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.TipControlViewAutomationProvider.HostRawElementProvider">
            <summary>
            Gets a base provider for this element.
            </summary>
            <returns>
            The base provider, or null.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.TipControlViewAutomationProvider.ProviderOptions">
            <summary>
            Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider. 
            </summary>
            <returns>
            Either <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider" /> or <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider" />.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.TipControlViewAutomationProvider.IsReadOnly">
            <summary>
            Gets a value that specifies whether the value of a control is read-only. 
            </summary>
            <returns>
            true if the value is read-only; false if it can be modified. 
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.TipControlViewAutomationProvider.Value">
            <summary>
            Gets the value of the control.
            </summary>
            <returns>
            The value of the control as a string. 
            </returns>
        </member>
        <member name="T:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim">
            <summary>
            Applies a list of <see cref="T:JetBrains.UI.StatusBar.JetStatusBarIndicator"/>s to an Avalon <see cref="T:System.Windows.Controls.Primitives.StatusBar"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.OptionDevTenBeta2PlantIntoStatusDockPanel">
            <summary>
            In DevTen Beta2, the status bar itself lives on another thread, which makes it planting our controls very complicated because of the threading issues.
            That's why we prefer planting to the dock panel that hosts the status bar.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.AvalonStatusBar">
            <summary>
            When non-<c>Null</c>, means the status bar we should be attached to.
            Note: this is used along the code path when we have the status bar hosted on the UI thread (VS10 beta 1). In VS 10 Beta 2, another approach is used. This code remains for possible other shells.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.StatusDockPanel">
            <summary>
            When non-<c>Null</c>, means the <see cref="T:System.Windows.Controls.DockPanel"/> on the bottom of the window, to which our status indicators should be added in a dock-right fashion. Usually the status bar itself sits in the same dock panel. This approach is used when we cannot deal with the status bar itself to put the items into it properly. The case in VS 10 beta 2, where the status bar control itself sits on another thread and causes a marshalling pain for us if operated directly.
            It's expected to be a <see cref="T:System.Windows.Controls.DockPanel"/> really, but we'd fallback for cases when we find ourselves in an unexpected layout and  look for just any suitable panel.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.TryFindStatusBarInHwnd(System.IntPtr)">
            <summary>
            Tries to find an Avalon status bar in the given window. The window must be fully inited by the moment.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.TryFindStatusDockPanelInHwnd(System.IntPtr)">
            <summary>
            Tries to detect the status line of the window
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.AddItemsHostToStatusBar(System.Windows.DependencyObject,System.Windows.Controls.ItemsControl)">
            <summary>
            Helper for attaching to a status bar. Places a panel for our items in among its indicators.
            Must be executed on the status bar thread.
            </summary>
            <param name="statbar">The status bar to plant into.</param>
            <param name="panelToHostOnStatusBar">The Avalon element to put on the status bar as its item.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.AddItemsHostToStatusDockPanel(System.Windows.Controls.Panel,System.Windows.Controls.ItemsControl)">
            <summary>
            Helper for attaching to the status line of a window. Places a panel for our items in between the status bar and resize grip.
            Must be executed on the UI thread.
            </summary>
            <param name="statusdock">The dock panel of the window status line.</param>
            <param name="panelToHostOnStatusBar">The Avalon element to put on the status bar as its item.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.TryFindStatusBarInHwnd_UiThread(System.Windows.PresentationSource)">
            <summary>
            Take 1: find all explicit status bars in the application window.
            Workable on VS10 up to Beta2 (non-inclusive).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.TryFindStatusBarInHwnd_WorkerThread(System.Windows.PresentationSource)">
            <summary>
            Take 2: in VS 10 beta 2, the status bar is hosted in another thread. There seems to be no legal way for ripping out the nested object graph. Do some hacks.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Controls.WindowlessControlElement">
            <summary>
            Renders an <see cref="T:JetBrains.CommonControls.IWindowlessControl"/>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.WindowlessControlElement.myFArrangeOverride">
            <summary>
            Switchable implementation that's activated only when we have a presentation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.WindowlessControlElement.myFMeasureOverride">
            <summary>
            Switchable implementation that's activated only when we have a presentation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.WindowlessControlElement.myFRender">
            <summary>
            Switchable implementation that's activated only when we have a presentation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.WindowlessControlElement.AlphaChannel">
            <summary>
            Gets or sets whether the windowless control will be rendered with an alpha channel or not.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.WindowlessControlElement.Presentation">
            <summary>
            Sets the presentation for the UI element. Get collapsed on <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.WindowlessControlElement.TooltipRequested">
            <summary>
            Fires when we're queried for a tooltip.
            The <see cref="T:System.Drawing.Point"/> in the arguments is in client coordinates, and the <see cref="T:System.Func`1"/>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.WindowlessControlElement.InitTooltips">
            <summary>
            Tooltips support thru <see cref="T:JetBrains.UI.Tooltips.ITooltipManager"/> and <see cref="F:JetBrains.UI.Avalon.Controls.WindowlessControlElement.TooltipRequested"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.IndicatorView.#ctor(JetBrains.UI.StatusBar.JetStatusBarIndicator)">
            <summary>
            Wraps the given indicator, detaches on dispose.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.IndicatorView.Data">
            <summary>
            The data item to be presented. A property (non-readonly) because we sometimes want to explicitly detach the backend and its resources from the view (by setting <see cref="F:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.IndicatorView.Data"/> to <c>Null</c>).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.IndicatorView.InitTooltips">
            <summary>
            Forwards tooltip requests to the indicator.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.IndicatorsItemsControl">
            <summary>
            A custom items control for the indicator. Changes the measuring layout pass logic to fir the height of the existing Visual Studio status bar (VS itself asks for the vertical-size as unbounded, we default to actual status bar size as the vertical bound, or to the scrollwidth if not calculated yet).
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Controls.ProgressCircle">
            <summary>
            Implements a progress indication control in a circle.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.ProgressCircle.ArrangeOverride(System.Windows.Size)">
            <summary>
            Called to arrange and size the content of a <see cref="T:System.Windows.Controls.Control"></see> object. 
            </summary>
            
            <returns>
            The size of the control.
            </returns>
            
            <param name="arrangeBounds">The computed size that is used to arrange the content.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.ProgressCircle.MeasureOverride(System.Windows.Size)">
            <summary>
            Called to remeasure a control. 
            </summary>
            
            <returns>
            The size of the control.
            </returns>
            
            <param name="constraint">Measurement constraints, a control cannot return a size larger than the constraint.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.ProgressCircle.OnMaximumChanged(System.Double,System.Double)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"></see> property changes. 
            </summary>
            
            <param name="newMaximum">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"></see> property.</param>
            <param name="oldMaximum">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"></see> property.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.ProgressCircle.OnMinimumChanged(System.Double,System.Double)">
            <summary>
             Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"></see> property changes. 
            </summary>
            
            <param name="oldMinimum">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"></see> property.</param>
            <param name="newMinimum">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"></see> property.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.ProgressCircle.OnValueChanged(System.Double,System.Double)">
            <summary>
             Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value"></see> property changes. 
            </summary>
            
            <param name="oldValue">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value"></see> property</param>
            <param name="newValue">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value"></see> property</param>
        </member>
        <member name="T:JetBrains.UI.Avalon.Controls.RunBindable">
            <summary>
            A text element whose text value can be bound to a property.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.RunBindable.#ctor">
            <summary>
            Initializes a new, default instance of the <see cref="T:System.Windows.Documents.Run"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.RunBindable.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Documents.Run"/> class, taking a specified string as the initial contents of the text run.
            </summary>
            <param name="text">A string specifying the initial contents of the <see cref="T:System.Windows.Documents.Run"/> object.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.RunBindable.GetForegroundProp">
            <summary>
            Creates and binds the property.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Controls.UIElementWindowlessControl">
            <summary>
            A jet windowless control to paint an UI Element.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.ExceptionReport.Yoracle">
            <summary>
            Cites Yoda.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.DependencyPropertyBridge`1">
            <summary>
            Provides a two-way bridge between the Data Flow Properties and Dependency Properties.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.DependencyPropertyBridge`1.CheckDependencyPropertyType(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Ensures that the property is of type <typeparamref name="TValue"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.DependencyPropertyBridge`1.CreatePropertyId(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Creates a new Data Flow Property ID, based on the dependency property identity.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.DependencyPropertyBridge`1.Property">
            <summary>
            Gets the Data Flow Property that mirrors the outer dependency property.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.DependencyPropertyBridge`1.Value">
            <summary>
            An infrastructure property that exposes the bridging dependency property.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.DependencyPropertyWrapper">
            <summary>
            Wraps a <see cref="T:System.Windows.DependencyProperty"/> into an <see cref="T:JetBrains.DataFlow.IProperty`1"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.DependencyPropertyWrapper.Create``1(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Boolean)">
            <summary>
            Creates an <see cref="T:JetBrains.DataFlow.IProperty`1"/> that is synchronized to an Avalon property.
            </summary>
            <typeparam name="TValue">Type of the property value. Must coincide to the dependency property type.</typeparam>
            <param name="dependencyobject">The owning instance for the dependency property.</param>
            <param name="dependencyproperty">The property identifier.</param>
            <param name="bSinkEvents">Whether to sink the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> events from the owning object about the updates of the requested property.</param>
            <returns>The wrapping property.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.DependencyPropertyWrapper.Create``1(System.Windows.UIElement,System.Windows.DependencyProperty,System.Windows.RoutedEvent)">
            <summary>
            Creates an <see cref="T:JetBrains.DataFlow.IProperty`1"/> that is synchronized to an Avalon property.
            </summary>
            <typeparam name="TValue">Type of the property value. Must coincide to the dependency property type.</typeparam>
            <param name="owner">The owning instance for the dependency property.</param>
            <param name="dependencyproperty">The property identifier.</param>
            <param name="event">If not <c>Null</c>, the specified event will be sinked from the <paramref name="owner"/> object.</param>
            <returns>The wrapping property.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.DependencyPropertyWrapper.FlowInto``1(JetBrains.DataFlow.IProperty{``0},System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Flows DataFlow property values into a dependency property.
            </summary>
            <param name="propSource">The source DataFlow property.</param>
            <param name="doTarget">The dependency object that owns the property container.</param>
            <param name="dpropTarget">The target property identifier for the property container.</param>
            <returns>Undo token for the binding.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.DependencyPropertyWrapper.BindDataFlowToDependency``1(JetBrains.DataFlow.IProperty{``0},System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Binds two properties in the forward direction.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.DependencyPropertyWrapper.BindDependencyToDataFlow_RoutedEvent``1(JetBrains.DataFlow.IProperty{``0},System.Windows.UIElement,System.Windows.DependencyProperty,System.Windows.RoutedEvent)">
            <summary>
            Binds two properties in the backward direction.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.DataTemplateDelegate">
            <summary>
            Supports a data template that executes some code to create the object graph.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.DataTemplateDelegate.#ctor(System.Func{System.Windows.UIElement})">
            <summary>
            Creates a Data Template that produces the object graph at runtime.
            </summary>
            <param name="funcObjectGraphCreator">The function to create the object graph.</param>
        </member>
        <member name="T:JetBrains.UI.Avalon.DataTemplateSwitchSelector">
            <summary>
            Chooses a data template based on the type of the item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.DataTemplateSwitchSelector.Add``1(System.Windows.DataTemplate)">
            <summary>
            Registers a <paramref name="template">data template</paramref> to be returned for the objects of the given <typeparamref name="TType"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.DataTemplateSwitchSelector.Add(System.Type,System.Windows.DataTemplate)">
            <summary>
            Registers a <paramref name="template">data template</paramref> to be returned for the objects of the given <paramref name="type"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.DispatcherEx.AssertAccess(System.Windows.Threading.Dispatcher)">
            <summary>
            Throws if the current thread is not the thread associated with this dispatcher.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.DispatcherEx.BeginOrInvoke(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            If the current thread is the dispatcher's home thread, executes the action synchronously.
            Otherwise, marshals asynchronous execution to the dispatcher thread.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.DummyListEvents`1">
            <summary>
            While our collections cannot use <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> because even though it's defined in mscorlib-2 it requires netfx 2 sp 1, they're implementing the similar <see cref="T:System.Collections.Specialized.Dummy.INotifyCollectionChanged"/> interface. Expose the original interface to use the collection in binding.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:JetBrains.UI.Avalon.DummyListEvents`1.#ctor(System.String)">
            <summary>
            Creates a new list that does not allow duplicate items, with a simple list storage inside.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.DummyListEvents`1.#ctor(JetBrains.DataFlow.PropertyId{`0})">
            <summary>
            Creates a new list that does not allow duplicate items, with a simple list storage inside.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.DummyListEvents`1.#ctor(JetBrains.DataFlow.PropertyId{`0},System.Boolean)">
            <summary>
            Creates a new list with a simple list storage inside.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Helpers">
            <summary>
            Avalon-related helper routines.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Helpers.Glassify(System.Windows.Window,System.Boolean,JetBrains.UI.Avalon.Helpers.NoWindowHandleAction)">
            <summary>
            Applies the aeroglass effect to the whole window, if possible.
            Returns whether the effect is supported in the current environment and was applied successfully.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Helpers.Glassify(System.IntPtr,System.Boolean)">
            <summary>
            Applies the aeroglass effect to the whole window, if possible.
            Returns whether the effect is supported in the current environment and was applied successfully.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Helpers.NoWindowHandleAction">
            <summary>
            What to do if the window has no handle.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.HwndSourceEx">
            <summary>
            Things related to treating Avalon UI elements as Windows desktop citizens, in which case they end up being hosted in an <see cref="T:System.Windows.Interop.HwndSource"/> of some kind, we can track their screen pixel position, etc.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.HwndSourceEx.GetElementBoundsInScreenPixels(System.Windows.UIElement)">
            <summary>
            For an UI Element hosted in an HWND render target, gets its pixel bounds on screen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.HwndSourceEx.GetElementBoundsInWindowPixels(System.Windows.UIElement)">
            <summary>
            For an UI Element hosted in an HWND render target, gets its pixel bounds within the HWND.
            The pixels are window-relative, but nonclient (ie are based on the window bounds not on the client area).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.HwndSourceEx.GetHwndSourceLive(System.Windows.UIElement)">
            <summary>
            Tracks the HWND presentation source the element is placed onto.
            This defines which HWND the element ends up hosted in.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Hooks.AvalonOperationCrisp">
            <summary>
            Enforses crisp fonts in avalon controls.
            Call whenever you're about to use Avalon, before or after doing so.
            All the calls but the first one will be ignored.
            </summary>
            <remarks>
            Hooks the MILCORE so that it obtained somehow improved information about the system settings.
            </remarks>
        </member>
        <member name="M:JetBrains.UI.Hooks.AvalonOperationCrisp.Execute_InstallHook">
            <summary>
            Injects the hook.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Hooks.AvalonOperationCrisp.Execute_InvalidateMil">
            <summary>
            A kick for the MILCORE to query for the display settings again, this time with our improved data.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Hooks.AvalonOperationCrisp.OnSystemParametersInfoW(System.UInt32,System.UInt32,System.Void*,System.UInt32)">
            <summary>
            Our replacement function which we hook into the MILCORE's IAT.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Hooks.AvalonOperationCrispComponent">
            <summary>
            Executes the <see cref="T:JetBrains.UI.Hooks.AvalonOperationCrisp"/> on shell startup.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Hooks.AvalonOperationCrispComponent.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.UI.Avalon.Interop.EitherControl">
            <summary>
            Adapts the WinForms and Avalon controls to one another.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Interop.EitherControl.myControl">
            <summary>
            Stores the WinForms control, if explicitly inited.
            <see cref="F:JetBrains.UI.Avalon.Interop.EitherControl.myControl"/> and <see cref="F:JetBrains.UI.Avalon.Interop.EitherControl.myElement"/> are mutually exclusive.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Interop.EitherControl.myElement">
            <summary>
            Stores the Avalon element, if explicitly inited.
            <see cref="F:JetBrains.UI.Avalon.Interop.EitherControl.myControl"/> and <see cref="F:JetBrains.UI.Avalon.Interop.EitherControl.myElement"/> are mutually exclusive.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Interop.EitherControl.myElementHost">
            <summary>
            Stores the element host that adapts an Avalon control to the WinForms host, in case we were created with an Avalon control. Lazy-created.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Interop.EitherControl.myWindowsFormsHost">
            <summary>
            Stores the winforms host that adapts a WinForms control to the Avalon host, in case we were created with a WinForms control. Lazy-created.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.EitherControl.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes from a WinForms control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.EitherControl.#ctor(System.Windows.UIElement)">
            <summary>
            Initializes from an Avalon element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.EitherControl.FromObject(System.Object)">
            <summary>
            Detects the control type, throws if neither. Calls the appropriate ctor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.EitherControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.Avalon.Interop.EitherControl.Control">
            <summary>
            Gets the contained either-control as a Windows Forms control, creating a wrapper as needed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Avalon.Interop.EitherControl.Element">
            <summary>
            Gets the contained either-control as an Avalon UI element, creating a wrapper as needed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Avalon.Interop.EitherControl.IsDisposed">
            <summary>
            Gets whether the WinForms controls have been disposed of.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Interop.DwmStatus">
            <summary>
            DWM Status properties.
            The properties are statically available, but their values are tracked only within the component's lifetime.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Interop.DwmStatus.IsDwmCompositionEnabled">
            <summary>
            Gets whether the Desktop Window Manager composition is currently enabled.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.DwmStatus.UpdateIsDwmCompositionEnabled">
            <summary>
            Updates the <see cref="F:JetBrains.UI.Avalon.Interop.DwmStatus.IsDwmCompositionEnabled"/> property value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.DwmStatus.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.UI.Avalon.Interop.DwmStatus.ReadonlyToken">
            <summary>
            A separate class to ensure initorder, otherwise csc3 fails to arrange static fields properly.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Interop.ElementHost">
            <summary> 
                A Windows Forms control that can be used to host a Windows Presentation
                Foundation element. 
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Interop.ElementHost._decorator">
            <summary>
            The decorator is used to provide an Adorner layer which is needed to show UI highlights for focus etc. In the pure-Avalon case, this would be handled by Window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Interop.ElementHost.Child">
            <summary> 
             The user-defined Avalon element in this host.
            </summary> 
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.ElementHost.HwndSourceHook(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary> 
                Hook for the HwndSource.WndProc. 
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.ElementHost.InputManager_PostProcessInput(System.Object,System.Windows.Input.ProcessInputEventArgs)">
            <summary>
                Catch WM_CHAR messages which weren't handled by Avalon 
                (including mnemonics which were typed without the "Alt" key) 
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.ElementHost.IsInputChar(System.Char)">
            <summary>
                Ensures that all WM_CHAR key messages are forwarded to the hosted element.
            </summary>
            <internal> 
                Grab all WM_CHAR messages as text input to ensure they're sent to
                Avalon.  If Avalon doesn't handle the message, we will call 
                ProcessDialogChar later on. 
            </internal>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.ElementHost.OnGotFocus(System.EventArgs)">
            <summary> 
            Raises the GotFocus event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.ElementHost.OnLeave(System.EventArgs)">
            <summary>
            Raises the Leave event. 
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.ElementHost.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
                Processes a command key, ensuring that the hosted element has an 
                opportunity to handle the command before normal Windows Forms processing. 
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.ElementHost.ProcessMnemonic(System.Char)">
            <summary> 
                Processes a mnemonic character, ensuring that the hosted element has an opportunity to handle the mnemonic before
                normal Windows Forms processing.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.ElementHost.Select(System.Boolean,System.Boolean)">
            <summary> 
                Activates the hosted element.
            </summary> 
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.ElementHost.WndProc(System.Windows.Forms.Message@)">
            <summary> 
            Processes Windows messages. 
            </summary>
            <param name="m"></param> 
        </member>
        <member name="P:JetBrains.UI.Avalon.Interop.ElementHost.TopLevelElement">
            <summary>
            The top-level Avalon element over the HWND.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Avalon.Interop.ElementHost.DefaultSize">
            <summary> 
                Gets the default size of the control.
            </summary> 
        </member>
        <member name="T:JetBrains.UI.Avalon.Interop.RichTextEx">
            <summary>
            Extension methods for <see cref="N:JetBrains.UI.RichText"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Interop.WindowsFormsIntegration">
            <summary>
            Carries out the internal members out of the <c>WindowsFormsIntegration</c> DLL, and some more.
            Bridges the Avalon and WinForms worlds.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.WindowsFormsIntegration.SetFontA``1(``0,System.Drawing.Font)">
            <summary>
            Tears apart a WinForms <see cref="T:System.Drawing.Font"/> and applies it to an Avalon element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.WindowsFormsIntegration.SetFontB``1(``0,System.Drawing.Font,System.Boolean)">
            <summary>
            Tears apart a WinForms <see cref="T:System.Drawing.Font"/> and applies it to an Avalon element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.WindowsFormsIntegration.SetFontC``1(``0,System.Drawing.Font,System.Boolean)">
            <summary>
            Tears apart a WinForms <see cref="T:System.Drawing.Font"/> and applies it to an Avalon element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.WindowsFormsIntegration.AvalonLengthToWinFormsLength(System.Double)">
            <summary>
            Turns a double length into an int, coercing NaN and Inf values.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.MultiValueConverter">
            <summary>
            A factory for <see cref="T:JetBrains.UI.Avalon.MultiValueConverter"/>, the universal Avalon Value Converter.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.MultiValueConverter.System#Windows#Data#IMultiValueConverter#Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty" />.<see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding" />.<see cref="F:System.Windows.Data.Binding.DoNothing" /> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> or the default value.
            </returns>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.MultiValueConverter.System#Windows#Data#IMultiValueConverter#ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.AvalonAnchoringRect">
            <summary>
            Anchors to a screen location of an Avalon object.
            </summary>
            <remarks>
            Technically, anchors to the HWND-based rendertarget of the visual tree and the relative coordinates of the visual within it.
            </remarks>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.AvalonAnchoringRect.Element">
            <summary>
            The UI element we're anchoring to.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.TrackedWindow">
            <summary>
            A window that hosts an <see cref="T:System.Windows.UIElement"/> and can be tracked by an <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.TrackedWindow.myShouldBeVisible">
            <summary>
            A property whose value is composited from the user volition and physical capability to show the window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.TrackedWindow.myUpdatePopupLayoutReentrancyFlag">
            <summary>
            When in <see cref="M:JetBrains.UI.PopupWindowManager.TrackedWindow.UpdatePopupLayout"/>, prevents from reentering it.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.TrackedWindow.myWannaBeVisible">
            <summary>
            Whether the user explicitly wants the window to be shown.
            This is ANDed with the physical capability to show the window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.AttachEvents">
            <summary>
            Starts sining the environment events.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.DetachEvents">
            <summary>
            Stops sining the environment events.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.GetClientRoomFromWindowRoom(System.Drawing.Size,System.Windows.Interop.HwndSource)">
            <summary>
            Based on the room for the window, calculates the available room for its content.
            In per-pixel-transparency mode, the nonclient area is not present.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.GetWindowRoomFromClientRoom(System.Windows.Size,System.Windows.Interop.HwndSource)">
            <summary>
            Based on the room required by the client area, calculates the required room for the window.
            In per-pixel-transparency mode, the nonclient area is not present.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.OnHideFlagsChange(JetBrains.DataFlow.PropertyChangedEventArgs{JetBrains.UI.PopupWindowManager.HideFlags})">
            <summary>
            Attaches and detaches the <see cref="P:JetBrains.UI.PopupWindowManager.TrackedWindow.HideFlags"/>-related events.
            Should be (un)sinked in (attach/detach)-event.
            Note: when the property value is changed in runtime, updates the set of sinked hide-signals.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.OnHideSignal(System.Object,System.EventArgs)">
            <summary>
            A hide signal has been received, eg from the popup window context owner.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.OnShouldBeVisibleChanged_Hide">
            <summary>
            The window should be hidden.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.OnShouldBeVisibleChanged_Show">
            <summary>
            The window should be shown.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.UpdatePopupLayout">
            <summary>
            Applies the popup layout suggested by the <see cref="P:JetBrains.UI.PopupWindowManager.TrackedWindow.Layouter"/> to the window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.MeasureOverride(System.Windows.Size)">
            <summary>
            Override this method to measure the size of a window.
            </summary>
            
            <returns>
            A <see cref="T:System.Windows.Size"></see> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.
            </returns>
            
            <param name="availableSize">A <see cref="T:System.Windows.Size"></see> that reflects the available size that this window can give to the child. Infinity can be given as a value to indicate that the window will size to whatever content is available.</param>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Closed"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Deactivated"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.OnSourceInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.SourceInitialized"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.HideWindow">
            <summary>
            Closes the window. After that the window cannot resurrect. Invoking this will cause the <see cref="E:JetBrains.UI.PopupWindowManager.IPopupWindow.Closed"/> event to fire.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.ShowWindow">
            <summary>
            Initially shows the popup window. The window remains shown until it is closed by the <see cref="M:JetBrains.UI.PopupWindowManager.IPopupWindow.HideWindow"/> method or by an action from the <see cref="T:JetBrains.UI.PopupWindowManager.IPopupWindowContext"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.JetBrains#UI#PopupWindowManager#IPopupWindow#add_Closed(System.EventHandler)">
            <summary>
            A window that hosts an <see cref="T:System.Windows.UIElement"/> and can be tracked by an <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.JetBrains#UI#PopupWindowManager#IPopupWindow#remove_Closed(System.EventHandler)">
            <summary>
            A window that hosts an <see cref="T:System.Windows.UIElement"/> and can be tracked by an <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.Glassify">
            <summary>
            Specifies whether the Aero Glass effect should be applied to the window, if available.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.HideFlags">
            <summary>
            Gets or sets the flags that control the set of signals from the popup window context owner on which the window can be hidden.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.IsGlassified">
            <summary>
            A readonly property that gets whether the glass effect is actually applied to the window at the moment.
            The <see cref="P:JetBrains.UI.PopupWindowManager.TrackedWindow.Glassify"/> property is just an intention that may be unsupported by the runtime.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.Handle">
            <summary>
            Gets the window handle to the current window, or <c>NULL</c> if not created yet.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.HwndSource">
            <summary>
            Returns the <see cref="T:System.Windows.Interop.HwndSource"/> for the current window.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.Context">
            <summary>
            Gets context the window is shown in.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.HideMethod">
            <summary>
            Gets or sets what exactly the popup window should do to hide the controlled form.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.IsDisposed">
            <summary>
            Gets whether the window has already been disposed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.LayoutMode">
            <summary>
            Gets or sets whether the popup window location and size is currently controlled by the layouter.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.Mutex">
            <summary>
            Gets the mutex that defines the popup window's identity class.
            For example, it may prohibit displaying more than one window of the same class at a time.
            This value should be immutable.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.Visible">
            <summary>
            Gets value indicating whether the window is currently shown.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.RectEx.GetCenter(System.Windows.Rect)">
            <summary>
            Gets a point that is the center of the rectangle.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.SizeEx">
            <summary>
            Ext for <see cref="T:System.Windows.Size"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.TemplateBorder">
            <summary>
            A border-derived control that supports runtime delegate-based data templates.
            On creation, exeutes the supplied code to build the nested objects.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.TemplateBorder.ApplyObjectGraphCreatorProperty(System.Func{System.Windows.UIElement})">
            <summary>
            Creates the new object graph whenever <see cref="F:JetBrains.UI.Avalon.TemplateBorder.ObjectGraphCreatorProperty"/> changes its value.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.AvalonTreeHelpers">
            <summary>
            Helps with navigating Avalon trees.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonTreeHelpers.GetLogicalDescendantsBreadthFirst(System.Windows.DependencyObject)">
            <summary>
            Does BFS on logical children.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonTreeHelpers.GetVisualDescendantsBreadthFirst(System.Windows.DependencyObject)">
            <summary>
            Does BFS on visual children.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Tooltips.AvalonTooltipElement">
            <summary>
            Defines tooltips over Avalon elements.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Tooltips.AvalonTooltipElement.UIElement">
            <summary>
            The UI element over which the tooltip is shown.
            Note that, unlike <see cref="P:System.Windows.FrameworkElement.ToolTip"/>, the tooltip described by our <see cref="P:JetBrains.UI.Tooltips.ITooltipElement.TooltipInfo"/> does not necessarily represent the whole element area, but only a subpart designated by <see cref="M:JetBrains.UI.Tooltips.ITooltipInfo.HitTestToolArea(System.Drawing.Point)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Tooltips.AvalonTooltipManagerComponent">
            <summary>
            Initializes the Avalon tooltip event handling.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Tooltips.AvalonTooltipManagerComponent.GetJetTooltipEvent">
            <summary>
            Fires when the tooltip is requested for the element under the mouse. Bubbles up the elements tree to see if somebody has a tooltip.
            Handle the event and call its arguments' <see cref="M:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.SetTooltip(System.Windows.UIElement,JetBrains.UI.Tooltips.ITooltipInfo)"/> to provide a tooltip.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Tooltips.FindAvalonTooltipElementsAtCursor">
            <summary>
            Avalon tooltip provider.
            Finds elements to handle the <see cref="F:JetBrains.UI.Avalon.Tooltips.AvalonTooltipManagerComponent.GetJetTooltipEvent"/> call-for-tooltip event.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs">
            <summary>
            Arguments to the <see cref="F:JetBrains.UI.Avalon.Tooltips.AvalonTooltipManagerComponent.GetJetTooltipEvent"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.HitElement">
            <summary>
            The element immediately hit by the mouse. Normally, if you get this event, you're an ancestor of the hit element (or the hit element itself).
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.myPointInRoot">
            <summary>
            The hit test point, in <see cref="F:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.myRootElement"/> coord space.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.myPointOnScreen">
            <summary>
            Needed for <see cref="T:JetBrains.UI.Tooltips.ITooltipElement"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.myRootElement">
            <summary>
            Root element of the tree, an ancestor for any possible hit element handling this event. Basically, just the element in which the <see cref="F:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.myPointInRoot"/> is initially defined.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.myTooltipElement">
            <summary>
            The result of a <see cref="M:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.SetTooltip(System.Windows.UIElement,JetBrains.UI.Tooltips.ITooltipInfo)"/> call.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.GetPointInVisual(System.Windows.Media.Visual)">
            <summary>
            Gets the hit test point in local coordinate space of your element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.SetTooltip(System.Windows.UIElement,JetBrains.UI.Tooltips.ITooltipInfo)">
            <summary>
            If you handle the event and would like to show a tooltip, call this method. Sets the <see cref="P:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.TooltipElement"/> property.
            The event will be marked as <see cref="P:System.Windows.RoutedEventArgs.Handled"/> automatically.
            </summary>
            <param name="element">The element to “own” the tooltip. Used for limiting the tooltip lifetime and treating the local coordinates in <paramref name="tti"/>'s tool area and the newly-created <see cref="T:JetBrains.UI.Tooltips.ITooltipElement"/>.</param>
            <param name="tti">The tooltip.</param>
        </member>
        <member name="P:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.TooltipElement">
            <summary>
            The result of a <see cref="M:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.SetTooltip(System.Windows.UIElement,JetBrains.UI.Tooltips.ITooltipInfo)"/> call.
            The entity firing the event must make sure this value is disposed of, eventually.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventHandler">
            <summary>
            Delegate to the <see cref="F:JetBrains.UI.Avalon.Tooltips.AvalonTooltipManagerComponent.GetJetTooltipEvent"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.ValueConverter`2">
            <summary>
            The universal Avalon Value Converter.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.ValueConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates a value from the binding source to the binding target.
            </summary>
            
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"></see>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"></see> indicates that the converter produced no value and that the binding uses the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see>, if available, or the default value instead.A return value of <see cref="T:System.Windows.Data.Binding"></see>.<see cref="F:System.Windows.Data.Binding.DoNothing"></see> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see> or default value.
            </returns>
            
            <param name="culture">The culture to use in the converter.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="value">The value produced by the binding source.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.ValueConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates a value from the binding target to the binding source.
            </summary>
            
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"></see>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"></see> indicates that the converter produced no value and that to the binding uses the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see>, if available, or the default value instead.A return value of <see cref="T:System.Windows.Data.Binding"></see>.<see cref="F:System.Windows.Data.Binding.DoNothing"></see> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see> or default value.
            </returns>
            
            <param name="culture">The culture to use in the converter.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="value">The value that is produced by the binding target.</param>
        </member>
        <member name="T:JetBrains.UI.Avalon.ValueConverter">
            <summary>
            A factory for <see cref="T:JetBrains.UI.Avalon.ValueConverter`2"/>, the universal Avalon Value Converter.
            </summary>
        </member>
    </members>
</doc>
