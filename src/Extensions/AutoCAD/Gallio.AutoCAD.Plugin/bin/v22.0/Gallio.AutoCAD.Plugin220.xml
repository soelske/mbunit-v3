<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gallio.AutoCAD.Plugin220</name>
    </assembly>
    <members>
        <member name="T:Gallio.AutoCAD.Plugin.Commands">
            <summary>
            Contains commands for performing Gallio operations inside the AutoCAD process.
            </summary>
            <remarks>
            <para>
            This class assumes that the Gallio.Loader.dll assembly is registered in the GAC.
            </para>
            </remarks>
        </member>
        <member name="M:Gallio.AutoCAD.Plugin.Commands.CreateEndPointAndWait">
            <summary>
            Creates an <c>AcadTestDriver</c> instance and registers it as a service.
            </summary>
            <remarks>
            <para>
            This command blocks on the calling thread until <c>Shutdown</c> is called.
            </para>
            </remarks>
        </member>
        <member name="T:Gallio.AutoCAD.Plugin.Commands.ShimWithLoader">
            <summary>
            Within this class we can access Gallio.Loader types because the loader has been loaded.
            </summary>
        </member>
        <member name="T:Gallio.AutoCAD.Plugin.Commands.ShimWithRuntime">
            <summary>
            Within this class we can access Gallio types because the runtime has been initialized.
            </summary>
        </member>
        <member name="T:Gallio.Loader.NamespaceDoc">
            <summary>
            The Gallio.Loader namespace contains types for loading the Gallio runtime
            into an application.
            </summary>
            <remarks>
            <para>
            The loader is not distributed as a compiled assembly.  Instead it is intended
            to be included as a source file within the application itself.
            </para>
            <para>
            For documentation see: http://www.gallio.org/wiki/devel:gallio_loader
            </para>
            </remarks>
        </member>
        <member name="T:Gallio.Loader.LoaderUtils">
            <summary>
            Helper utilities for implementing the Gallio loader.
            </summary>
        </member>
        <member name="M:Gallio.Loader.LoaderUtils.GetAssemblyPath(System.Reflection.Assembly)">
            <summary>
            Gets the local path of an assembly.  (Not its shadow copied location.)
            </summary>
            <param name="assembly">The assembly, not null.</param>
            <returns>The assembly path.</returns>
        </member>
        <member name="M:Gallio.Loader.LoaderUtils.GetLoaderDirectoryPath">
            <summary>
            Gets the directory path of the assembly that contains the loader.
            </summary>
            <returns>The directory path of the assembly that contains the loader.</returns>
        </member>
        <member name="T:Gallio.Loader.LoaderException">
            <summary>
            The exception that is thrown by the loader when an operation cannot be performed.
            </summary>
        </member>
        <member name="M:Gallio.Loader.LoaderException.#ctor">
            <summary>
            Creates an exception.
            </summary>
        </member>
        <member name="M:Gallio.Loader.LoaderException.#ctor(System.String)">
            <summary>
            Creates an exception.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Gallio.Loader.LoaderException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an exception.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Gallio.Loader.LoaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an exception from serialization info.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Gallio.Loader.RuntimeLocator">
            <summary>
            Specifies how to locate the Gallio runtime.
            </summary>
        </member>
        <member name="M:Gallio.Loader.RuntimeLocator.GetValidatedRuntimePathOrThrow">
            <summary>
            Gets the path of the runtime and validates it.  If not found or if a
            problem occurs, throws.
            </summary>
            <returns>The validated runtime path.</returns>
            <exception cref="T:Gallio.Loader.LoaderException">Thrown if the runtime path could not be obtained or validated.</exception>
        </member>
        <member name="M:Gallio.Loader.RuntimeLocator.GetFailureHint">
            <summary>
            Returns a hint to help the user figure out how to resolve an issue
            involving a bad runtime path.
            </summary>
        </member>
        <member name="M:Gallio.Loader.RuntimeLocator.GetRuntimePath">
            <summary>
            Gets the path of the runtime.
            </summary>
            <returns>The runtime path, or null if not found.</returns>
        </member>
        <member name="M:Gallio.Loader.RuntimeLocator.IsRuntimePathValid(System.String)">
            <summary>
            Returns true if the specified runtime path is valid.
            </summary>
            <param name="runtimePath">The runtime path, not null.</param>
            <returns>True if the path was valid.</returns>
        </member>
        <member name="M:Gallio.Loader.RuntimeLocator.GetGallioAssemblyPath(System.String)">
            <summary>
            Gets the path of the Gallio assembly.
            </summary>
            <param name="runtimePath">The runtime path, not null.</param>
            <returns>The path of the Gallio assembly.</returns>
        </member>
        <member name="T:Gallio.Loader.DefaultRuntimeLocator">
            <summary>
            Locates the runtime path automatically using environment variables and the registry.
            </summary>
        </member>
        <member name="M:Gallio.Loader.DefaultRuntimeLocator.GetFailureHint">
            <inheritdoc />
        </member>
        <member name="M:Gallio.Loader.DefaultRuntimeLocator.GetRuntimePath">
            <summary>
            Gets the path of the runtime.
            </summary>
            <remarks>
            The default implementation tries <see cref="M:Gallio.Loader.DefaultRuntimeLocator.GetRuntimePathUsingEnvironment" />
            then <see cref="M:Gallio.Loader.DefaultRuntimeLocator.GetRuntimePathUsingRegistry" /> then
            <see cref="M:Gallio.Loader.DefaultRuntimeLocator.GetRuntimePathUsingApplicationBaseDirectoryOrAncestor"/>.
            </remarks>
            <returns>The runtime path, or null if not found.</returns>
        </member>
        <member name="M:Gallio.Loader.DefaultRuntimeLocator.GetRuntimePathUsingEnvironment">
            <summary>
            Gets the Gallio runtime path by examining the GALLIO_RUNTIME_PATH
            environment variable.
            </summary>
            <returns>The runtime path, or null if not found.</returns>
        </member>
        <member name="M:Gallio.Loader.DefaultRuntimeLocator.GetRuntimePathUsingRegistry">
            <summary>
            Gets the Gallio runtime path by searching the registry for the
            version returned by <see cref="M:Gallio.Loader.DefaultRuntimeLocator.GetRuntimeVersion"/>.
            </summary>
            <returns>The runtime path, or null if not found.</returns>
        </member>
        <member name="M:Gallio.Loader.DefaultRuntimeLocator.GetRuntimePathUsingApplicationBaseDirectoryOrAncestor">
            <summary>
            Gets the Gallio runtime path by searching the application base directory
            and its ancestors for Gallio.dll.
            </summary>
            <remarks>
            This fallback option only makes sense for applications that are themselves
            installed in the Gallio runtime path.  It is also useful for
            debugging since debug versions of Gallio contain extra special logic
            hardcoded in the runtime to tweak the runtime path assuming that the
            application resides in the Gallio source tree.
            </remarks>
            <returns>The runtime path, or null if not found.</returns>
        </member>
        <member name="M:Gallio.Loader.DefaultRuntimeLocator.GetRuntimeVersion">
            <summary>
            Gets the version of Gallio to load.
            </summary>
            <remarks>
            The default implementation tries <see cref="M:Gallio.Loader.DefaultRuntimeLocator.GetRuntimeVersionUsingEnvironment" />
            then <see cref="M:Gallio.Loader.DefaultRuntimeLocator.GetRuntimeVersionUsingReferencedAssemblies" />.
            </remarks>
            <returns>The runtime version, or null if not found.</returns>
        </member>
        <member name="M:Gallio.Loader.DefaultRuntimeLocator.GetRuntimeVersionUsingEnvironment">
            <summary>
            Gets the version of Gallio to load by examining the GALLIO_RUNTIME_VERSION
            environment variable.
            </summary>
            <returns>The runtime version, or null if not found.</returns>
        </member>
        <member name="M:Gallio.Loader.DefaultRuntimeLocator.GetRuntimeVersionUsingReferencedAssemblies">
            <summary>
            Gets the version of Gallio to load by searching the referenced assemblies
            for an assembly name for which <see cref="M:Gallio.Loader.DefaultRuntimeLocator.IsGallioAssemblyName(System.Reflection.AssemblyName)"/> returns true
            then returns the runtime version that was discovered.
            </summary>
            <returns>The runtime version, or null if not found.</returns>
        </member>
        <member name="M:Gallio.Loader.DefaultRuntimeLocator.IsGallioAssemblyName(System.Reflection.AssemblyName)">
            <summary>
            Returns true if the assembly name is a Gallio assembly.
            </summary>
            <remarks>
            The default implementation returns true for any assembly called
            "Gallio" or whose name starts with "Gallio.".
            </remarks>
            <param name="assemblyName">The assembly name to check, not null.</param>
            <returns>True if the assembly is a Gallio assembly.</returns>
        </member>
        <member name="M:Gallio.Loader.DefaultRuntimeLocator.GetReferencedAssemblies">
            <summary>
            Gets the referenced assemblies to search for a Gallio reference in order
            to automatically determine the version of Gallio to load.
            </summary>
            <remarks>
            The default implementation returns the name of the assemblies referenced by the
            currently executing assembly and the name of the executing assembly itself.
            </remarks>
            <returns>The referenced assemblies.</returns>
        </member>
        <member name="T:Gallio.Loader.ExplicitRuntimeLocator">
            <summary>
            A runtime locator that uses an explicitly specified runtime path.
            </summary>
        </member>
        <member name="M:Gallio.Loader.ExplicitRuntimeLocator.#ctor(System.String)">
            <summary>
            Creates the explicit runtime locator.
            </summary>
            <param name="runtimePath">The runtime path, or null if not found.</param>
        </member>
        <member name="T:Gallio.Loader.ILoader">
            <summary>
            The loader provides access to Gallio runtime services from an application
            that might not be installed in Gallio's runtime path.
            </summary>
            <seealso cref="T:Gallio.Loader.LoaderManager"/>
        </member>
        <member name="P:Gallio.Loader.ILoader.RuntimePath">
            <summary>
            Gets the Gallio runtime path used by the loader.
            </summary>
            <exception cref="T:Gallio.Loader.LoaderException">Thrown if the operation could not be performed.</exception>
        </member>
        <member name="M:Gallio.Loader.ILoader.SetupRuntime">
            <summary>
            Sets up the runtime with a default runtime setup using the loader's
            runtime path and a null logger.  Does nothing if the runtime has
            already been initialized.
            </summary>
            <remarks>
            <para>
            If you need more control over this behavior, call RuntimeBootstrap
            yourself.
            </para>
            </remarks>
            <exception cref="T:Gallio.Loader.LoaderException">Thrown if the operation could not be performed.</exception>
        </member>
        <member name="M:Gallio.Loader.ILoader.AddHintDirectory(System.String)">
            <summary>
            Adds a hint directory to the assembly resolver.
            </summary>
            <param name="path">The path of the hint directory to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="path"/> is null.</exception>
            <exception cref="T:Gallio.Loader.LoaderException">Thrown if the operation could not be performed.</exception>
        </member>
        <member name="M:Gallio.Loader.ILoader.Resolve``1">
            <summary>
            Resolves a runtime service.
            </summary>
            <typeparam name="T">The type of service to resolve.</typeparam>
            <returns>The resolved service.</returns>
            <exception cref="T:Gallio.Loader.LoaderException">Thrown if the operation could not be performed.</exception>
        </member>
        <member name="M:Gallio.Loader.ILoader.Resolve(System.Type)">
            <summary>
            Resolves a runtime service.
            </summary>
            <param name="serviceType">The type of service to resolve.</param>
            <returns>The resolved service.</returns>
            <exception cref="T:Gallio.Loader.LoaderException">Thrown if the operation could not be performed.</exception>
        </member>
        <member name="T:Gallio.Loader.LoaderManager">
            <summary>
            The loader manager is responsible for initializing a loader within the current process.
            At most one loader can exist in a process.
            </summary>
            <remarks>
            <para>
            The Gallio loader is used in situations where applications that are not installed
            in the Gallio runtime path need to load Gallio assemblies.  We can't just copy
            Gallio assemblies into the application base directory because it creates
            assembly loading ambiguities.  In particular, it is possible for multiple copies
            to be loaded in the same process simultaneously in different load contexts
            (Load / LoadFrom / LoadFile).  When multiple copies of the same assembly are loaded
            their types are considered distinct and they cannot reliably exchange information
            with other components (like plugins).
            </para>
            <para>
            For example, assembly load context problems were observed when two different Visual
            Studio add-ins installed in different locations were loaded at the same time.
            The Gallio loader avoids this problem by ensuring that there is only one copy of
            Gallio installed on the machine.  Applications installed outside of the Gallio
            runtime path are required to use a custom assembly resolver to load Gallio assemblies.
            </para>
            <para>
            Before the loader is initialized, it might not be possible to load
            certain Gallio types unless the appropriate assemblies have been
            copied into the application base directory.  (In fact, that's the
            problem that the loader is designed to solve.)
            </para>
            <para>
            Consequently it is very important that the application refrain
            from causing any Gallio types to be loaded.  This bears repeating!
            Don't try to use any Gallio functions or declare any fields of
            Gallio types until the loader is initialized.  Otherwise a runtime
            exception will probably be thrown.  Ideally you should initialize
            the loader in your program's main entry point before doing anything
            else.
            </para>
            <para>
            When the loader is initialized, it will install a custom assembly
            resolver to ensure that assemblies in the Gallio runtime path can
            be resolved.  In particular, this makes it possible to initialize
            the Gallio runtime extensibility framework.
            </para>
            </remarks>
        </member>
        <member name="P:Gallio.Loader.LoaderManager.Loader">
            <summary>
            Gets the current loader, or null if it has not been initialized.
            </summary>
        </member>
        <member name="M:Gallio.Loader.LoaderManager.InitializeAndSetupRuntimeIfNeeded">
            <summary>
            If the loader has not been initialized, initializes it using the default
            runtime locator and sets up the runtime.
            </summary>
        </member>
        <member name="M:Gallio.Loader.LoaderManager.Initialize">
            <summary>
            Initializes the loader using the <see cref="T:Gallio.Loader.DefaultRuntimeLocator"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the loader has already been initialized.</exception>
            <exception cref="T:Gallio.Loader.LoaderException">Thrown if the loader could not be initialized.</exception>
        </member>
        <member name="M:Gallio.Loader.LoaderManager.Initialize(Gallio.Loader.RuntimeLocator)">
            <summary>
            Initializes the loader.
            </summary>
            <param name="locator">The runtime locator.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="locator"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the loader has already been initialized.</exception>
            <exception cref="T:Gallio.Loader.LoaderException">Thrown if the loader could not be initialized.</exception>
        </member>
    </members>
</doc>
