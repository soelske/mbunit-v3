<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gallio.Tests</name>
    </assembly>
    <members>
        <member name="M:Gallio.Tests.Common.Collections.PropertyBagTest.DeserializeFromXml_RegressionTestForEmptyMetadataElement">
            <summary>
            We had a case where the implementation of the metadata Xml reader was
            reading the final end element too agressively.  It was causing the
            remainder of the containing element to be discarded when an empty
            metadata section was found.
            </summary>
        </member>
        <member name="M:Gallio.Tests.Common.Collections.PropertySetTest.DeserializeFromXml_RegressionTestForEmptyMetadataElement">
            <summary>
            We had a case where the implementation of the metadata Xml reader was
            reading the final end element too agressively.  It was causing the
            remainder of the containing element to be discarded when an empty
            metadata section was found.
            </summary>
        </member>
        <member name="T:Gallio.Tests.Common.Reflection.BaseReflectionPolicyTest">
            <summary>
            An abstract base class that can be used to test reflection wrappers 
            provided by a reflection policy on the assumption that wrappers can be
            obtained that are equivalent to native reflection objects.
            </summary>
            <todo>
            We still need to test constructed types.
            </todo>
        </member>
        <member name="P:Gallio.Tests.Common.Reflection.BaseReflectionPolicyTest.ReflectionPolicy">
            <summary>
            Gets the reflection policy to use to obtain wrappers.
            </summary>
        </member>
        <member name="T:Gallio.Tests.Common.Reflection.WrapperAssert">
            <summary>
            Assertions for testing the reflection wrappers.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Common.Reflection.WrapperAssert.SupportsSpecialFeatures">
            <summary>
            Specifies whether the reflection API supports all of the weird quirky runtime
            tricks the CLR plays with reflection like creating new methods out of
            thin air.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Common.Reflection.WrapperAssert.SupportsSpecialName">
            <summary>
            Specifies whether the reflection API supports the SpecialName property for members.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Common.Reflection.WrapperAssert.SupportsCallingConventions">
            <summary>
            Specifies whether the reflection API supports the CallingConventions property for methods.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Common.Reflection.WrapperAssert.SupportsReturnAttributes">
            <summary>
            Specifies whether the reflection API supports attributes on method return values.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Common.Reflection.WrapperAssert.SupportsGenericParameterAttributes">
            <summary>
            Specifies whether the reflection API supports attributes on generic parameters.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Common.Reflection.WrapperAssert.SupportsEventFields">
            <summary>
            Specifies whether the reflection API supports representing events as fields.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Common.Reflection.WrapperAssert.SupportsFinalizers">
            <summary>
            Specifies whether the reflection API supports finalizer methods.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Common.Reflection.WrapperAssert.SupportsStaticConstructors">
            <summary>
            Specifies whether the reflection API supports static constructors.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Common.Reflection.WrapperAssert.SupportsFullAssemblyName">
            <summary>
            Specifies whether the reflection API supports full assembly name information.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Common.Reflection.WrapperAssert.SupportsNestedGenericTypes">
            <summary>
            Specifies whether the reflection API supports nested generic types.
            This is to workaround R# 3.1 specific issues involving a generic type
            that contains another generic type nested within.
            </summary>
        </member>
        <member name="M:Gallio.Tests.Common.Reflection.WrapperAssert.MemoizeEquivalence(System.Object,System.Object,Gallio.Common.GallioAction)">
            <summary>
            We memoize results from comparing for equivalence of certain members to help
            the exhaustive recursive reflection tests run in a more reasonable period of time.
            This implementation assumes that the Equals methods are implemented correctly.
            If you're uncertain of this, you should disable memoization.
            </summary>
        </member>
        <member name="M:Gallio.Tests.Common.Text.DiffSetTest.RegressionTests.TrailingAddition">
            <summary>
            There was a bug where we would return an invalid diff basically consisting
            of just the common prefix because the diff algorithm was terminating prematurely
            on empty input in one document without recording the diffs.
            </summary>
        </member>
        <member name="M:Gallio.Tests.Common.Text.DiffSetTest.RegressionTests.OverlappingCommonPrefixAndSuffix">
            <summary>
            In this case, the fast path optimization was causing problems because the
            length of the common prefix plus the length of the common suffix exceeded
            the length of the shorter string.  That's because one character was part
            of both the common prefix and suffix.
            The fix was to be sure to exclude the common prefix from the range when
            computing the common suffix.
            </summary>
        </member>
        <member name="T:Gallio.Tests.BaseTestWithMocks">
            <summary>
            Base unit test.
            All unit tests that require certain common facilities like Mock Objects
            inherit from this class.
            </summary>
        </member>
        <member name="P:Gallio.Tests.BaseTestWithMocks.Mocks">
            <summary>
            Gets the mock object repository.
            </summary>
        </member>
        <member name="M:Gallio.Tests.Framework.CompositePatternAttributeTest.CompositePatternAttributeSample.ExpectIgnoredFromFirstOfMultipleCompositeCatchAttributesIndex2WhenThrowArgOutOfRangeExWithExpectedMessage">
            <remarks>
            <para>
            NOTE: It appears that the expected outcome of this test and the related test may be non-deterministic.
            This test is therefore being disabled for now.
            </para>
            NOTE: The expected outcome of this test is different than that of 
            <see cref="M:Gallio.Tests.Framework.CompositePatternAttributeTest.CompositePatternAttributeSample.ExpectPendingFromFirstOfReversedMultipleCompositeCatchAttributesIndex1WhenThrowArgOutOfRangeExWithExpectedMessage"/> 
            because of the differing order in which the 2 composite catch attributes are applied to each of those test methods.
            Since each composite catch attributes contains a <see cref="T:MbUnit.Framework.CatchExceptionAttribute"/> 
            that matches the exception thrown by the test method, 
            and each of those have equal <see cref="P:Gallio.Framework.Pattern.DecoratorPatternAttribute.Order"/> values, 
            the outcome therefore depends on which of the two 
            <see cref="T:MbUnit.Framework.CatchExceptionAttribute"/>s intercepts the thrown exception first.
            </remarks>
            <seealso cref="M:Gallio.Tests.Framework.CompositePatternAttributeTest.CompositePatternAttributeSample.ExpectPendingFromFirstOfReversedMultipleCompositeCatchAttributesIndex1WhenThrowArgOutOfRangeExWithExpectedMessage"/>
        </member>
        <member name="M:Gallio.Tests.Framework.CompositePatternAttributeTest.CompositePatternAttributeSample.ExpectPendingFromFirstOfReversedMultipleCompositeCatchAttributesIndex1WhenThrowArgOutOfRangeExWithExpectedMessage">
            <remarks>
            <para>
            NOTE: It appears that the expected outcome of this test and the related test may be non-deterministic.
            This test is therefore being disabled for now.
            </para>
            NOTE: The expected outcome of this test is different than that of 
            <see cref="M:Gallio.Tests.Framework.CompositePatternAttributeTest.CompositePatternAttributeSample.ExpectIgnoredFromFirstOfMultipleCompositeCatchAttributesIndex2WhenThrowArgOutOfRangeExWithExpectedMessage"/> 
            because of the differing order in which the 2 composite catch attributes are applied to each of those test methods.
            Since each composite catch attributes contains a <see cref="T:MbUnit.Framework.CatchExceptionAttribute"/> 
            that matches the exception thrown by the test method, 
            and each of those have equal <see cref="P:Gallio.Framework.Pattern.DecoratorPatternAttribute.Order"/> values, 
            the outcome therefore depends on which of the two 
            <see cref="T:MbUnit.Framework.CatchExceptionAttribute"/>s intercepts the thrown exception first.
            </remarks>
            <seealso cref="M:Gallio.Tests.Framework.CompositePatternAttributeTest.CompositePatternAttributeSample.ExpectIgnoredFromFirstOfMultipleCompositeCatchAttributesIndex2WhenThrowArgOutOfRangeExWithExpectedMessage"/>
        </member>
        <member name="T:Gallio.Tests.Framework.Pattern.PatternTestFrameworkStackDepthTest">
            <summary>
            This test verifies that the pattern test framework limits the total
            stack depth for execution.  This is in consideration of the fact that
            the Visual Studio debugger has serious performance issues single-stepping
            through code when the stack depth is high.  Previously the pattern
            test framework would regularly have a stack depth well over 150 levels!
            Now we have specifically inlined certain methods and changed control structures
            (such as C# "using" statements instead of lambdas) to
            minimize stack depth.  The code is a bit uglier but performance is significantly
            better during debugging.
            </summary>
        </member>
        <member name="M:Gallio.Tests.Framework.Pattern.PatternTestFrameworkStackDepthTest.ManualSingleStepTime">
            <summary>
            With the debugger attached, step-over manually through all trials of this test as quickly
            as possible from BEGIN to END to time how long it takes to progress.  Write this number
            down and compare it across multiple runs to observe how optimizing stack depth has
            helped or hindered.
            </summary>
        </member>
        <member name="T:Gallio.Tests.Integration.StubFormatterIntegrationTest">
            <summary>
            This integration test verifies that <see cref="T:Gallio.Runtime.Formatting.StubFormatter" /> is
            used when the runtime is not initialized.  The trick to doing this is
            in running the test code in an isolated AppDomain where the runtime does
            not exist.
            </summary>
        </member>
        <member name="T:Gallio.Tests.Integration.StubContextIntegrationTest">
            <summary>
            This integration test verifies that <see cref="T:Gallio.Model.Contexts.StubTestContextTracker" /> is
            used when the runtime is not initialized.  The trick to doing this is
            in running the test code in an isolated AppDomain where the runtime does
            not exist.
            </summary>
        </member>
        <member name="T:Gallio.Tests.Model.Filters.ITypeFilterTest">
            <summary>
            This interface is implemented to assist with checking whether the option
            to include derived types correctly handles interfaces.
            </summary>
        </member>
        <member name="T:Gallio.Tests.Model.ModelAssert">
            <summary>
            Provides assertions for common Gallio framework types.
            </summary>
        </member>
        <member name="T:Gallio.Tests.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Properties.Resources.CommandLineArgumentAttributeTests_Description">
            <summary>
              Looks up a localized string similar to Description.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Properties.Resources.CommandLineArgumentAttributeTests_LongName">
            <summary>
              Looks up a localized string similar to Long name.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Properties.Resources.CommandLineArgumentAttributeTests_ShortName">
            <summary>
              Looks up a localized string similar to Short name.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Properties.Resources.CommandLineArgumentAttributeTests_Synonym1">
            <summary>
              Looks up a localized string similar to Synonym1.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Properties.Resources.CommandLineArgumentAttributeTests_Synonym2">
            <summary>
              Looks up a localized string similar to Synonym2.
            </summary>
        </member>
        <member name="P:Gallio.Tests.Properties.Resources.CommandLineArgumentAttributeTests_ValueLabel">
            <summary>
              Looks up a localized string similar to Value label.
            </summary>
        </member>
        <member name="T:Gallio.Tests.Reports.ManualTestLogFeatureTest">
            <summary>
            This test generates interesting test logs that may be used to
            manually inspect the report formatting.
            </summary>
        </member>
        <member name="T:Gallio.Tests.Runner.Reports.Schema.ReportAssert">
            <summary>
            Provides assertions for common Gallio core types.
            </summary>
        </member>
        <member name="T:Gallio.Tests.RunSampleAttribute">
            <summary>
            Used together with <see cref="T:Gallio.Tests.BaseTestWithSampleRunner" /> to specify
            a sample test to run.
            </summary>
        </member>
        <member name="T:Gallio.Tests.RunSampleFileAttribute">
            <summary>
            Used together with <see cref="T:Gallio.Tests.BaseTestWithSampleRunner" /> to specify
            a sample file to run.
            </summary>
        </member>
        <member name="T:Gallio.Tests.Runtime.Conversions.BaseConversionRuleTest`1">
            <summary>
            Abstract base class for <see cref="T:Gallio.Runtime.Conversions.IConversionRule" /> tests.
            Automatically sets up a <see cref="T:Gallio.Runtime.Conversions.RuleBasedConverter" /> populated with
            the rule and a <see cref="T:Gallio.Runtime.Conversions.ConvertibleToConvertibleConversionRule"/>
            </summary>
        </member>
        <member name="T:Gallio.Tests.Runtime.Formatting.BaseFormattingRuleTest`1">
            <summary>
            Abstract base class for <see cref="T:Gallio.Runtime.Formatting.IFormattingRule" /> tests.
            Automatically sets up a <see cref="T:Gallio.Runtime.Formatting.RuleBasedFormatter" /> populated with
            the rule and a <see cref="T:Gallio.Runtime.Formatting.ConvertToStringFormattingRule"/> with a
            basic <see cref="T:Gallio.Runtime.Conversions.ObjectToStringConversionRule"/> converter.
            </summary>
        </member>
        <member name="T:Gallio.Tests.BaseTestWithSampleRunner">
            <summary>
            Abstract base class for integration tests based on test samples.
            </summary>
            <remarks>
            <para>
            This fixture runs the samples specified by <see cref="T:Gallio.Tests.RunSampleAttribute" />
            and <see cref="T:Gallio.Tests.RunSampleFileAttribute" /> then presents the results from the runner
            via the <see cref="P:Gallio.Tests.BaseTestWithSampleRunner.Runner" /> and <see cref="P:Gallio.Tests.BaseTestWithSampleRunner.Report"/> properties.  Test cases should
            then verify the results from the samples.
            </para>
            </remarks>
        </member>
        <member name="P:Gallio.Tests.BaseTestWithSampleRunner.Runner">
            <summary>
            Gets the sample runner for the fixture.
            </summary>
        </member>
        <member name="P:Gallio.Tests.BaseTestWithSampleRunner.Report">
            <summary>
            Gets the report for the tests that ran.
            </summary>
        </member>
        <member name="M:Gallio.Tests.BaseTestWithSampleRunner.ConfigureRunner">
            <summary>
            Configures the test runner.
            </summary>
        </member>
        <member name="M:Gallio.Tests.BaseTestWithSampleRunner.GetLog(Gallio.Runner.Reports.Schema.TestStepRun)">
            <summary>
            Returns the log of the specified test step run.
            </summary>
            <param name="run">The test step run.</param>
            <returns>The log text or an empty string.</returns>
        </member>
        <member name="M:Gallio.Tests.BaseTestWithSampleRunner.GetLog(Gallio.Runner.Reports.Schema.TestStepRun,System.String)">
            <summary>
            Returns the log of the specified test step run.
            </summary>
            <param name="run">The test step run.</param>
            <param name="streamName">The name of log stream.</param>
            <returns>The log text or an empty string.</returns>
        </member>
        <member name="M:Gallio.Tests.BaseTestWithSampleRunner.GetLogs(System.Collections.Generic.IEnumerable{Gallio.Runner.Reports.Schema.TestStepRun})">
            <summary>
            Returns the default non-empty logs of the specified test step runs.
            </summary>
            <param name="runs">The test step runs.</param>
            <returns>An enumeration of non-empty logs.</returns>
        </member>
    </members>
</doc>
