<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MbUnit.Tests</name>
    </assembly>
    <members>
        <member name="T:MbUnit.Tests.Framework.ContractVerifiers.AbstractContractTest">
            <summary>
            Abstract base class for integration tests 
            on the contract verifiers.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.ContractVerifiers.AbstractContractTest.VerifySampleContract(System.String,System.Type,System.String,Gallio.Model.TestStatus)">
            <summary>
            verifies that the specified test method has been run or not, and
            that it gave the expected result.
            </summary>
            <param name="groupName">Name of the group which contains the test method.</param>
            <param name="fixtureType">Type of the sample fixture which must be run.</param>
            <param name="testMethodName">Name of evaluated test method.</param>
            <param name="expectedTestStatus">Expected test status. If <see cref="F:Gallio.Model.TestStatus.Inconclusive" />
            is specified, the test method is expected to not run.</param>
        </member>
        <member name="T:MbUnit.Tests.Framework.ContractVerifiers.ExceptionContractTest.SampleSerializedException">
            <summary>
            Sample exception which has the 3 recommended constructors
            and supports serialization.
            </summary>
        </member>
        <member name="T:MbUnit.Tests.Framework.ContractVerifiers.ExceptionContractTest.SampleUnserializedException">
            <summary>
            Sample exception which has the 3 recommended constructors
            but does not support serialization.
            </summary>
        </member>
        <member name="T:MbUnit.Tests.Framework.ContractVerifiers.ExceptionContractTest.SampleMissingBaseCallException">
            <summary>
            Sample exception which has the 3 recommended constructors
            but does not support serialization.
            </summary>
        </member>
        <member name="T:MbUnit.Tests.Framework.ContractVerifiers.ListContractTest.BasicSample`1">
            <summary>
            Minimal and operational implementation of a collection.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
        </member>
        <member name="T:MbUnit.Tests.Framework.ContractVerifiers.ListContractTest.ReadOnlySample`1">
            <summary>
            Minimal and operational implementation of a read-only collection.
            Add, Remove, or Clear throws a NotSupportedException.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectErrorWhenThrowArgNullExAndArgNullExIsError">
            <summary>
            Verifies simplest catch scenario.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectErrorWhenThrowArgNullExAndArgExIsError">
            <summary>
            Verifies that a CatchException can detect and handle an Exception 
            that inherits from the CatchExceptionAttribute.ExceptionType.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectFailWhenThrowInvalidOpExAndArgNullExIsError">
            <summary>
            Verifies scenario where an unhandled exception Type is thrown by the test.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectPassWhenExceptionNotThrownAndArgNullExIsError">
            <summary>
            Verifies scenario where no exception is thrown by the test.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectErrorWhenThrowMatchingArgNullExAndArgNullExWithMessageSubstringIsError">
            <summary>
            Verifies scenario where a handled exception Type with a handled Exception.Message is thrown by the test.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectFailWhenThrowInvOpExWithUnmatchedMessageAndInvOpExWithMessageSubstringIsSkipped">
            <summary>
            Verifies scenario where a handled exception Type with an unhandled Exception.Message is thrown by the test.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectSkippedErrorFromOutcomeStatusPropertyAndUnspecifiedOutcomeCategoryProperty">
            <summary>
            Verifies that a custom <see cref="P:Gallio.Model.TestOutcome.Status"/> can be specified using 
            <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeStatus"/>.
            Also verifies that <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeStatus"/> 
            can be specified without specifying <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeCategory"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectFailedCustomFromOutcomeCategoryPropertyAndUnspecifiedOutcomeStatusProperty">
            <summary>
            Verifies that a custom <see cref="P:Gallio.Model.TestOutcome.Category"/> can be specified using 
            <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeCategory"/>.
            Also verifies that <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeCategory"/> 
            can be specified without specifying <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeStatus"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectFailedFromOutcomeCategoryPropertyEqualsNullAndUnspecifiedOutcomeStatusProperty">
            <summary>
            Verifies that a custom <see cref="P:Gallio.Model.TestOutcome.Category"/> can be specified using 
            <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeCategory"/>.
            Also verifies that <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeCategory"/> 
            can be specified without specifying <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeStatus"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectPassedCustomFromOutcomeStatusPropertyAndOutcomeCategoryProperty">
            <summary>
            Verifies that a custom <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeCategory"/> can be specified 
            even when the value of <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeStatus"/> 
            is <see cref="F:Gallio.Model.TestStatus.Passed"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectPassedNullFromOutcomeStatusPropertyEqualsPassedAndOutcomeCategoryPropertyEqualsNull">
            <summary>
            Verifies that a custom <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeCategory"/> can be specified 
            even when the value of <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeStatus"/> 
            is <see cref="F:Gallio.Model.TestStatus.Passed"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectPassedFailedFromOutcomeStatusPropertyAndOutcomeCategoryProperty">
            <summary>
            Verifies that an <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeCategory"/> can be specified 
            even when the value of <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeStatus"/> 
            is <see cref="F:Gallio.Model.TestStatus.Passed"/>.
            Also verifies that unusual value pairs can be specified (using a standard category) for 
            <see cref="P:Gallio.Model.TestOutcome.Status"/> and <see cref="P:Gallio.Model.TestOutcome.Category"/> 
            using <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeStatus"/> and 
            <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeCategory"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectFailedPassedFromOutcomeStatusPropertyAndOutcomeCategoryProperty">
            <summary>
            Verifies that unusual value pairs can be specified (using a standard category) for 
            <see cref="P:Gallio.Model.TestOutcome.Status"/> and <see cref="P:Gallio.Model.TestOutcome.Category"/> 
            using <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeStatus"/> and 
            <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeCategory"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectInconclusiveConclusiveFromOutcomeStatusPropertyAndOutcomeCategoryProperty">
            <summary>
            Verifies that unusual value pairs can be specified (using a custom category) for 
            <see cref="P:Gallio.Model.TestOutcome.Status"/> and <see cref="P:Gallio.Model.TestOutcome.Category"/> 
            using <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeStatus"/> and 
            <see cref="P:MbUnit.Framework.CatchExceptionAttribute.OutcomeCategory"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectSkippedWhenThrowArgNullExAndArgNullExIsSkipped">
            <summary>
            Verifies that a non-Error TestOutcome can be specified when handling an Exception.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectIgnoredWhenThrowArgNullExAndArgExIsIgnored">
            <summary>
            Verifies that a non-Error TestOutcome can be specified when handling an Exception 
            that inherits from the CatchExceptionAttribute.ExceptionType.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectPassWhenThrowArgNullExAndArgExIsExpectedAndArgNullExIsSkipped">
            <summary>
            Verifies that an ExpectedException can detect an Exception before a CatchException sees it 
            (effectively overriding the behavior of the CatchException).
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectPassFromExpExcOrder5WhenThrowInvOpExAndArgNullExIsSkippedAndArgExIsInconclusiveAndNotImplExIsPendingAndNotSuppExIsIgnoredAndInvOpExIsExpected">
            <summary>
            Verifies that multiple CatchExceptions can transparently detect and rethrow an Exception before an ExpectedException gets it 
            (without changing the behavior of the ExpectedException).
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectFailWhenThrowOutOfMemExAndArgNullExIsSkippedAndArgExIsInconclusiveAndNotImplExIsPendingAndNotSuppExIsIgnoredAndInvOpExIsExpected">
            <summary>
            Verifies that multiple CatchExceptions can transparently detect and rethrow an Exception before an ExpectedException gets it 
            (without changing the behavior of the ExpectedException).
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectSkippedWhenThrowArgNullExAndArgNullExIsSkippedAndArgExIsExpected">
            <summary>
            Verifies that a CatchException can detect an Exception before an ExpectedException sees it 
            (effectively overriding the behavior of the ExpectedException).
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.ExpectInconclusiveFromOrder2WhenThrowArgExAndArgNullExIsSkippedAndArgExIsInconclusiveAndNotImplExIsPendingAndNotSuppExIsIgnoredAndInvOpExIsExpected">
            <summary>
            Verifies that a CatchException can detect an Exception before an ExpectedException sees it 
            (effectively overriding the behavior of the ExpectedException),
            even when there are other CatchExceptions that detect and rethrow the Exception 
            (before and after the handling CatchException, and before the ExpectedException).
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.CatchExceptionExample1">
            <summary>
            This test will have an outcome of <see cref="P:Gallio.Model.TestOutcome.Error"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.CatchExceptionExample2">
            <summary>
            This test will have an outcome of <see cref="P:Gallio.Model.TestOutcome.Pending"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.CatchExceptionExample3">
            <summary>
            This test will have an outcome of <see cref="P:Gallio.Model.TestOutcome.Passed"/> 
            whether the test throws a <see cref="T:System.NotImplementedException"/> or throws no exception.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.CatchExceptionAttributeTest.CatchExceptionSample.CatchExceptionExample4">
            <summary>
            This test will have an outcome of <see cref="P:Gallio.Model.TestOutcome.Pending"/>.
            </summary>
            <remarks>
            This test can have any of several outcomes depending on what type of exception is thrown (if any) during test execution.
            </remarks>
        </member>
        <member name="M:MbUnit.Tests.Framework.AssertExceptionAttributeTest.AssertExceptionSample.ExpectPassWhenThrowArgNullExAndArgNullExIsAsserted">
            <summary>
            Verifies simplest happy path scenario.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.AssertExceptionAttributeTest.AssertExceptionSample.ExpectFailedWhenExceptionNotThrownAndArgNullExIsAsserted">
            <summary>
            Verifies sad path scenario where no exception is thrown by the test.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.AssertExceptionAttributeTest.AssertExceptionSample.ExpectFailWhenThrowInvalidOpExAndArgNullExIsAsserted">
            <summary>
            Verifies sad path scenario where an exception of the wrong type is thrown by the test.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.AssertExceptionAttributeTest.AssertExceptionSample.ExpectPassWhenThrowArgNullExAndArgExIsAsserted">
            <summary>
            Verifies that AssertException can handle an Exception that inherits from the AssertExceptionAttribute.ExceptionType.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.AssertExceptionAttributeTest.AssertExceptionSample.ExpectPassFromExpExcOrder5WhenThrowInvOpExAndArgNullExIsSkippedAndArgExIsInconclusiveAndNotImplExIsPendingAndNotSuppExIsIgnoredAndInvOpExIsAsserted">
            <summary>
            Verifies that multiple CatchExceptions can transparently detect and rethrow an Exception before an AssertException gets it 
            (without changing the behavior of the AssertException).
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.AssertExceptionAttributeTest.AssertExceptionSample.ExpectFailWhenThrowOutOfMemExAndArgNullExIsSkippedAndArgExIsInconclusiveAndNotImplExIsPendingAndNotSuppExIsIgnoredAndInvOpExIsAsserted">
            <summary>
            Verifies that multiple CatchExceptions can transparently detect and rethrow an Exception before an AssertException gets it 
            (without changing the behavior of the AssertException).
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.AssertExceptionAttributeTest.AssertExceptionSample.ExpectSkippedWhenThrowArgNullExAndArgNullExIsSkippedAndArgExIsAsserted">
            <summary>
            Verifies that a CatchException can detect an Exception before an AssertException sees it 
            (effectively overriding the behavior of the AssertException).
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.AssertExceptionAttributeTest.AssertExceptionSample.ExpectInconclusiveFromOrder2WhenThrowArgExAndArgNullExIsSkippedAndArgExIsInconclusiveAndNotImplExIsPendingAndNotSuppExIsIgnoredAndInvOpExIsAsserted">
            <summary>
            Verifies that a CatchException can detect an Exception before an AssertException sees it 
            (effectively overriding the behavior of the AssertException),
            even when there are other CatchExceptions that detect and rethrow the Exception 
            (before and after the handling CatchException, and before the AssertException).
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.AssertExceptionAttributeTest.AssertExceptionSample.AssertExceptionExample1">
            <summary>
            This test will have an outcome of <see cref="P:Gallio.Model.TestOutcome.Passed"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.AssertExceptionAttributeTest.AssertExceptionSample.AssertExceptionExample2">
            <summary>
            This test will have an outcome of <see cref="P:Gallio.Model.TestOutcome.Failed"/> 
            whether the test throws a <see cref="T:System.NotImplementedException"/> or throws no exception.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Framework.AssertExceptionAttributeTest.AssertExceptionSample.AssertExceptionExample3">
            <summary>
            This test will have an outcome of <see cref="P:Gallio.Model.TestOutcome.Pending"/>.
            </summary>
            <remarks>
            This test can have any of several outcomes depending on what type of exception is thrown (if any) during test execution.
            </remarks>
        </member>
        <member name="T:MbUnit.Tests.Framework.AutomaticTestFixtureTest">
            <summary>
            Verifies the behavior of types that do not possess [TestFixture] attributes.
            The framework may determine that a type is a test fixture despite not having
            a [TestFixture] attribute applied.
            </summary>
        </member>
        <member name="T:MbUnit.Tests.Framework.AutomaticTestFixtureTest.AutomaticTestFixtureSampleWithNonPrimaryPattern">
            <summary>
            This is a sample test fixture that has no [TestFixture] attribute but does
            have some other non-primary pattern attribute, [Explicit].
            </summary>
        </member>
        <member name="T:MbUnit.Tests.Framework.AutomaticTestFixtureTest.AutomaticTestFixtureSampleNotInferred">
            <summary>
            This is a sample test fixture that has no [TestFixture] attribute and no
            other non-primary pattern attributes and no test methods either.
            </summary>
        </member>
        <member name="T:MbUnit.Tests.Framework.AutomaticTestFixtureTest.AutomaticTestFixtureSampleInferredFromMethod">
            <summary>
            This is a sample test fixture that has no [TestFixture] attribute and no
            other non-primary pattern attributes but has test methods.
            </summary>
        </member>
        <member name="T:MbUnit.Tests.Framework.IsolationTest">
            <summary>
            Verifies that tests are adequately isolated from one another at the process level.
            </summary>
        </member>
        <member name="T:MbUnit.Tests.Integration.ConfigurationFileTest">
            <summary>
            Tests the test assembly configuration file integration.
            </summary>
        </member>
        <member name="T:MbUnit.Tests.Integration.WorkingDirectoryAndApplicationBaseTest">
            <summary>
            Tests the test assembly working directory and application base directory defaults.
            </summary>
        </member>
        <member name="M:MbUnit.Tests.Model.MbUnitTestFrameworkTest.PopulateTestTree_WhenAssemblyReferencesMbUnit_ContainsSimpleTest">
            <summary>
            This is really just a quick sanity check to be sure that the framework
            seems to produce a sensible test tree.  More detailed checks on how particular
            attributes are handled belong elsewhere.
            </summary>
        </member>
    </members>
</doc>
