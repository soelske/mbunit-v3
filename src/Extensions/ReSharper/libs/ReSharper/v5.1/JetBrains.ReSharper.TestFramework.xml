<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.TestFramework</name>
    </assembly>
    <members>
        <member name="P:JetBrains.ReSharper.TestFramework.BaseTestWithSolution.GuardAffinity">
            <summary>
            How the main test method should be executed.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.TestFramework.BaseTestWithSolution.GuardAffinityFlags">
            <summary>
            How the main test method should be executed.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.TestFramework.BaseTestWithSolution.GuardAffinityFlags.GuardedAndSync">
            <summary>
            The test method is executed under guard. <see cref="P:JetBrains.Threading.JetDispatcher.IsAsyncBehaviorProhibited">Async behavior</see> prohibited.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.TestFramework.BaseTestWithSolution.GuardAffinityFlags.UnguardedAndAsync">
            <summary>
            The test method is executed without an external guard. <see cref="P:JetBrains.Threading.JetDispatcher.IsAsyncBehaviorProhibited">Async behavior</see> is allowed for the test run.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.TestFramework.CaretMovement">
            <summary>
            Helper class for testing navigation actions. Mimics movements of the caret from a source to a destination point
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.TestFramework.NamedPositionsProcessor.SkipExtensions">
            <summary>
            List of file extensions to skip text processing. Usefull for binary files.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.TestFramework.CaretPositionsProcessor">
            <summary>
            Helper class for testing navigation actions. Extracts information about caret movements from test data file.
            The encoding of caret movement is as follows:
            {sourceN} - source point for Nth movement
            {targetN} - target point for Nth movement
            </summary>
        </member>
    </members>
</doc>
