<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.VSI</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.VS.Actions.RunStartupProjectAction">
            <summary>
            Runs the target application that is specified in the active configiration of the startup project in the current solution.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.VS.Actions.RunStartupProjectAction.mySpawnedProcesses">
            <summary>
            The list of processes spawned by us. They should be killed when doing build-and-run.
            To be accessed from the UI thread only.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.RunStartupProjectAction.CloseSpawnedProcesses">
            <summary>
            Sends a close control to the processes we have spawned that are still running.
            The processes are not killed, ie any “do you want to close” windows will hold them.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.RunStartupProjectAction.StartProcess">
            <summary>
            Starts the startup project process.
            Reports to the user and returns <c>Null</c> on failures.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.RunStartupProjectAction.OnSpawnedProcessExited(System.Object,System.EventArgs)">
            <summary>
            The process has exited, unwatch it.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.RunStartupProjectAction.Execute(JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.RunStartupProjectAction.Update(JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="P:JetBrains.ReSharper.VS.Actions.RunStartupProjectAction.NotifyTargetProcessStarted">
            <summary>
            Gets whether to notify of target process started.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.VS.Actions.RunStartupProjectAction.WaitForTargetProcess">
            <summary>
            Gets whether to wait for the target process to exit before running the build-and-run action.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.VS.Actions.RunStartupProjectAction.WaitProcessPopup">
            <summary>
            Popups up a window that says which processes we're waiting for, and closes when done waiting.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.RunStartupProjectAction.WaitProcessPopup.WaitFor(System.Collections.Generic.ICollection{System.Diagnostics.Process})">
            <summary>
            Spawns the popup, returns whether to go on building.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.RunStartupProjectAction.WaitProcessPopup.CheckProcesses">
            <summary>
            Re-check the running processes.
            Update text, close if done.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.RunStartupProjectAction.WaitProcessPopup.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Closing"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.RunStartupProjectAction.WaitProcessPopup.OnSourceInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.SourceInitialized"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="T:JetBrains.ReSharper.VS.Actions.BuildAndRunSolutionAction">
            <summary>
            Builds the solution using the solution-builder, then runs the target application.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.VS.Actions.BuildAndRunAction">
            <summary>
            Builds either the solution or the current project using the solution-builder, then runs the target application.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.BuildAndRunAction.Execute(JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.BuildAndRunAction.Update(JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="T:JetBrains.ReSharper.VS.Actions.BuildAndRunAction.Notifier">
            <summary>
            Notifies that the build is over and the target process is starting.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.BuildAndRunAction.Notifier.ShowWhenReady(System.Diagnostics.Process)">
            <summary>
            Waits for the process to start pumping, then calls <see cref="M:JetBrains.ReSharper.VS.Actions.BuildAndRunAction.Notifier.ShowOnAllDesktops"/>.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.VS.Actions.BuildAndRunAction.ProjectOrSolution">
            <summary>
            Specifies what to build.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.VS.Actions.BuildAndRunProjectAction">
            <summary>
            Builds the current project using the solution-builder, then runs the target application.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.SolBuilderBuildActions.Execute(JetBrains.ReSharper.VS.Actions.SolBuilderBuildActions.ItemDesc,JetBrains.ProjectModel.ISolution,JetBrains.ProjectModel.IProject[])">
            <summary>
            Isolated build action implementation.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.SolBuilderBuildActions.GetSelection(JetBrains.ActionManagement.IDataContext)">
            <summary>
            Gets the selected projects to build (for the build actions that run on selection).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.SolBuilderBuildActions.RunPostBuild(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ReSharper.VS.Actions.SolBuilderBuildActions.ItemDesc.RunOrDebug)">
            <summary>
            Runs the post-build action on the session.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.SolBuilderBuildActions.JetBrains#ActionManagement#IActionHandler#Execute(JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.SolBuilderBuildActions.JetBrains#ActionManagement#IActionHandler#Update(JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.SolBuilderCancelAction.Execute(JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.SolBuilderCancelAction.Update(JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceSerializerOnTheFly">
            <summary>
            Takes an assembly and serializes its public API surface into an XML Document.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceSerializerOnTheFly.Run(JetBrains.Metadata.Reader.API.IMetadataAssembly,System.IO.Stream)">
            <summary>
            Takes an assembly and serializes its public API surface into an XML Document.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceSerializerOnTheFly.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.ReSharper.VSI.Components.GetCursorPosCorruptionWatchdog">
            <summary>
            Once upon a time, <see cref="M:JetBrains.Interop.WinApi.User32Dll.GetCursorPos(JetBrains.Interop.WinApi.POINT*)"/> stops functioning correctly and starts crashing.
            This kills Avalon mouse handling entirely, and makes certain checkboxes unclickable (eg in DevExpress trees).
            We're trying to track the exact moment when this starts failing.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Components.GetCursorPosCorruptionWatchdog.#ctor(JetBrains.Application.Shell)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Components.GetCursorPosCorruptionWatchdog.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Components.GetCursorPosCorruptionWatchdog.JetBrains#ComponentModel#IComponent#Init">
            <summary>
            <para>Initializes the component. Called by the component container after the component is created.</para>
            <para><see cref="M:System.IDisposable.Dispose"/> is the pairing method that's guaranteed to be called by the component container to tear down your component.</para>
            <para>You must not access other components before your <see cref="M:JetBrains.ComponentModel.IComponent.Init"/> method is called.</para>
            <para>All of the components that you access from <see cref="M:JetBrains.ComponentModel.IComponent.Init"/> are guaranteed to exist when your <see cref="M:System.IDisposable.Dispose"/> is called. Any other component might be missing by that time, and trying to get it will throw an exception.</para>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.VSI.Misc.LocalProj">
            <summary>
            Runs some of the <c>Local.Proj</c> tasks.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Misc.LocalProj.RegisterAndDevenvSetup">
            <summary>
            Does local registration and runs devenv/setup. Returns the success flag.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.RemoteResult">
            <summary>
            A safe class for passing exceptions against the service boundary.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionInitialDataSerialized">
            <summary>
            A static-only initial data from <see cref="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession"/> for passing one thru a channel.
            Plus some additional MSBuild-session-specific params.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionInitialDataSerialized.Heuristics">
            <summary>
            MSBuild-specific.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionInitialDataSerialized.IsConcurrent">
            <summary>
            MSBuild-specific.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ISolBuilderDuoClient">
            <summary>
            An interface exposed by the SolBuilderDuo client (runs in the VS process) for the server (satellite process) to call back into.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ISolBuilderDuoClient.QueryBuildProjects(JetBrains.Util.FileSystemPath[])">
            <summary>
            Requests whether the projects should be built, or could rather be skipped as up-to-date.
            Must be executed sync.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ISolBuilderDuoClient.ReportBuildCompleted">
            <summary>
            Reports that the build is over.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ISolBuilderDuoClient.ReportBuildSessionBuildEvent(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEventWithLocation)">
            <summary>
            Reports a build event, either per-project or session-global.
            </summary>
            <param name="pathProject">Project, or <c>Null</c> for a session event.</param>
            <param name="evtn">No-location event.</param>
            <param name="evtl">Location-aware event. Even though it could be technically passed as <paramref name="evtn"/>, we need to have both (one of them <c>Null</c>), otherwise the data contract serializer won't allow the derived type thru the pipe.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ISolBuilderDuoClient.ReportBuildSessionProjectBuildState(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState)">
            <summary>
            The build state of a project has changed.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ISolBuilderDuoClient.ReportServerAddress(System.Int32,System.Uri)">
            <summary>
            When the remote server process completes its initialization, it reports its service to the client.
            </summary>
            <param name="nProcessId">ID of the process, to make sure there isn't any race in multiple attempts in starting a client.</param>
            <param name="uriAddress">URI of the service.</param>
            <returns>Whether the server were accepted and can continue running.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ISolBuilderDuoClient.Test">
            <summary>
            Tests the channel.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ISolBuilderDuoClient.UpdateBuildSignatures(JetBrains.Util.FileSystemPath[])">
            <summary>
            Notifies the client that the projects have been rebuilt and their signatures in the cache should be updated.
            The caller need not wait for the callee to complete on this event.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ISolBuilderDuoServer.AbortBuild">
            <summary>
            If the build is currently running, aborts the build as soon as possible.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ISolBuilderDuoServer.BeginBuild">
            <summary>
            Initiates the build, asynchronously, and returns.
            The return value could indicate a failure to start the build. Subsequent build errors and exceptions get into the session's build events.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ISolBuilderDuoServer.Shutdown">
            <summary>
            Exits the satellite process when it's not needed anymore.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ISolBuilderDuoServer.Test">
            <summary>
            Tests the channel.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ISolBuilderDuoServer.UploadBuildSession(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionInitialDataSerialized)">
            <summary>
            Submits the initial build session to the satellite process.
            The server session changes are then reflected into the client copy of the session (but not back).
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerEngine">
            <summary>
            Runs searches and transformations on an MSBuild project.
            Works on the native MSBuild representation of an MSBuild project.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerEngine.XmlnsMsbuild">
            NOTE: namespace could be extracted from C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild\Microsoft.Build.Core.xsd file 
             
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerEngine.MakeBuildConditional(Microsoft.Build.BuildEngine.Project)">
            <summary>
            Augments the Build target of the project so that it asked which projects actually have to be built before starting each of the build levels.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerEngine.BuildConfiguration">
            <summary>
            Defines the two-component build configuration.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerEngine.BuildConfiguration.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerEngine.BuildConfiguration.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerEngine.BuildConfiguration.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            
            <returns>
            A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerEngine.BuildConfiguration.Equals(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerEngine.BuildConfiguration)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="obj" /> parameter; otherwise, false.
            </returns>
            <param name="obj">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoClientProxy">
            <summary>
            Runs on the server (satellite), connects to the client on-demand, attempts to revive the channel in case of channel problems.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoClientProxy.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoClientProxy.JetBrains#ReSharper#SolutionBuilder#SolBuilderDuo#ISolBuilderDuoClient#QueryBuildProjects(JetBrains.Util.FileSystemPath[])">
            <summary>
            Requests whether the projects should be built, or could rather be skipped as up-to-date.
            Must be executed sync.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoClientProxy.JetBrains#ReSharper#SolutionBuilder#SolBuilderDuo#ISolBuilderDuoClient#ReportBuildCompleted">
            <summary>
            Reports that the build is over.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoClientProxy.JetBrains#ReSharper#SolutionBuilder#SolBuilderDuo#ISolBuilderDuoClient#ReportBuildSessionBuildEvent(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEventWithLocation)">
            <summary>
            Reports a build event, either per-project or session-global.
            </summary>
            <param name="pathProject">Project, or <c>Null</c> for a session event.</param>
            <param name="evtn">No-location event.</param>
            <param name="evtl">Location-aware event. Even though it could be technically passed as <paramref name="evtn"/>, we need to have both (one of them <c>Null</c>), otherwise the data contract serializer won't allow the derived type thru the pipe.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoClientProxy.JetBrains#ReSharper#SolutionBuilder#SolBuilderDuo#ISolBuilderDuoClient#ReportBuildSessionProjectBuildState(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState)">
            <summary>
            The build state of a project has changed.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoClientProxy.JetBrains#ReSharper#SolutionBuilder#SolBuilderDuo#ISolBuilderDuoClient#ReportServerAddress(System.Int32,System.Uri)">
            <summary>
            When the remote server process completes its initialization, it reports its service to the client.
            </summary>
            <param name="nProcessId">ID of the process, to make sure there isn't any race in multiple attempts in starting a client.</param>
            <param name="uriAddress">URI of the service.</param>
            <returns>Whether the server were accepted and can continue running.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoClientProxy.JetBrains#ReSharper#SolutionBuilder#SolBuilderDuo#ISolBuilderDuoClient#Test">
            <summary>
            Tests the channel.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoClientProxy.JetBrains#ReSharper#SolutionBuilder#SolBuilderDuo#ISolBuilderDuoClient#UpdateBuildSignatures(JetBrains.Util.FileSystemPath[])">
            <summary>
            Notifies the client that the projects have been rebuilt and their signatures in the cache should be updated.
            The caller need not wait for the callee to complete on this event.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoCommunication.CreateServiceBinding">
            <summary>
            Gets a binding for client/server WCF channels.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter">
            <summary>
            Run on the client side, spawns and controls the satellite process to perform a build as needed.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.DispatcherMain">
            <summary>
            Main thread of the object.
            On this thread the object is created, and on this thread the <see cref="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession"/> can be modified.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.DispatcherWorker">
            <summary>
            Thread on which we execute the request/responses and can wait synchronously without stopping the UI.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.myMapBuildProjectPathCache">
            <summary>
            Build project identity to the project itself.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.myServerProcess">
            <summary>
            When server process is started, keeps its ID.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.myServerService">
            <summary>
            When server process is started, and its service has connected back, keeps that service.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.#ctor(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.BuildHeuristics,System.Boolean)">
            <summary>
            Creates a new MSBuild run over the <see cref="!:session"/> that describes the initial params and results.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.DisposablesRunMain">
            <summary>
            Encloses the scope of the <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.States.Building"/> state, disposes of in the main thread.
            Disposed of in <see cref="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.BeginRun"/> if it fails, or from within <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.DisposablesRunWorker"/> dispose.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.DisposablesRunWorker">
            <summary>
            Encloses the scope of the <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.States.Building"/> state, disposes of on the worker thread.
            Disposed of at the end of the <see cref="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.WorkerRun"/> span.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.RequiredBuildEventImportance">
            <summary>
            Specifies which events, by priority, should be allowed thru the pipe to the session.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.State">
            <summary>
            Gets the current state of the engine.
            Changes on the original thread only.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.Abort">
            <summary>
            Aborts the current build, if it's running.
            Safe to call at any time.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.BeginRun">
            <summary>
            Starts running the build for the specific target.
            The build proceeds async, check at the <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.State"/> property.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.DummyTryExec(System.Action)">
            <summary>
            Temp method. We cannot quite delay the execution in many cases; as it's readonly, there's no problem in merging it.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.AssertState(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.States)">
            <summary>
            Expects a specific state.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.AssertServer">
            <summary>
            Makes sure we're connected to a valid server.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.WorkerRun">
            <summary>
            Runs in the worker thread all the time we're busy.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.WorkerRun_InvokeRemoteBuild">
            <summary>
            Begins the remote build async, waits for it to complete.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.WorkerRun_PushMarkAllProjectsAsPending">
            <summary>
            Marks <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.Session"/> projects as pending when starting, as excluded if there're pending upon stopping.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.WorkerRun_RegisterService">
            <summary>
            Starts listening for remote requests.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.WorkerRun_SpawnServerProcess">
            <summary>
            Starts the server, waits for it to reply.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.States.Invalid">
            <summary>
            Invalid state.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.States.Initialized">
            <summary>
            The session has been initialized, and it's ready for building.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.States.Building">
            <summary>
            The build is running.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoEngineStarter.States.UsedUp">
            <summary>
            The build has run, session cannot be reused.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoMsbuildNodeLogger">
            <summary>
            An MSBuild logger that runs on remote MSBuild nodes and listens to the build events inplace with an ability to filter them down.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoMsbuildNodeLogger.Initialize(Microsoft.Build.Framework.IEventSource)">
            <summary>
            Subscribes loggers to specific events. This method is called when the logger is registered with the build engine, before any events are raised.
            </summary>
            <param name="eventSource">The events available to loggers.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoMsbuildNodeLogger.Initialize(Microsoft.Build.Framework.IEventSource,System.Int32)">
            <summary>
            </summary>
            <param name="eventSource">An <see cref="T:Microsoft.Build.Framework.IEventSource" /> object representing the build event source.</param>
            <param name="nodeCount">The number of CPUs.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoMsbuildNodeLogger.Shutdown">
            <summary>
            Releases the resources allocated to the logger at the time of initialization or during the build. This method is called when the logger is unregistered from the engine, after all events are raised. A host of MSBuild typically unregisters loggers immediately before quitting.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoMsbuildNodeLogger.BuildEventRedirector">
            <summary>
            Get or set by the build engine to allow node loggers to forward messages to the central logger.
            </summary>
            <returns>
            An <see cref="T:Microsoft.Build.Framework.IEventRedirector" /> representing the event redirector to forward messages to.
            </returns>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoMsbuildNodeLogger.NodeId">
            <summary>
            Get or set by the build engine or node to inform the forwarding logger on which node it is running.
            </summary>
            <returns>
            An integer representing the node ID on which the build engine is running.
            </returns>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoMsbuildNodeLogger.Parameters">
            <summary>
            Gets or sets the user-defined parameters of the logger. 
            </summary>
            <returns>
            The logger parameters.
            </returns>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoMsbuildNodeLogger.Verbosity">
            <summary>
            Gets or sets the level of detail to show in the event log.
            </summary>
            <returns>
            One of the enumeration values. The default is <see cref="F:Microsoft.Build.Framework.LoggerVerbosity.Normal" />.
            </returns>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSolutionBuilder">
            <summary>
            An implementation of the solution builder that uses MSBuild for building the projects and can cut the build short by examining the public API surface of the projects.
            The component installs itself as the active implementation, if the options allow.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSolutionBuilder.RequiredBuildEventImportance">
            <summary>
            The events allowed into the logger must be at least this important.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSolutionBuilder.InitSelfPromotion">
            <summary>
            Promotes self as the active implementation.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSolutionBuilder.Abort">
            <summary>
            Aborts the <see cref="P:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.RunningSession"/>, does nothing if not running.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSolutionBuilder.BeginRun(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession)">
            <summary>
            Begins running a build of the session (from <see cref="M:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.CreateSession(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity,JetBrains.ProjectModel.IProject[])"/>), async.
            It's an error to invoke this method when <see cref="P:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.RunningSession"/> is present.
            </summary>
            <param name="session">The session to run the build of. Must not be used yet.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSolutionBuilder.CreateSession(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity,JetBrains.ProjectModel.IProject[])">
            <summary>
            Creates a new build session.
            </summary>
            <param name="severity">How to build the projects.</param>
            <param name="projectsToBuild">The projects that must be included in the build (others might be included as needed), or an empty array to build the whole solution.</param>
            <returns>The new session on which the build could be started and the progress could be tracked.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSolutionBuilder.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSolutionBuilder.JetBrains#ComponentModel#IComponent#Init">
            <summary>
            <para>Initializes the component. Called by the component container after the component is created.</para>
            <para><see cref="M:System.IDisposable.Dispose"/> is the pairing method that's guaranteed to be called by the component container to tear down your component.</para>
            <para>You must not access other components before your <see cref="M:JetBrains.ComponentModel.IComponent.Init"/> method is called.</para>
            <para>All of the components that you access from <see cref="M:JetBrains.ComponentModel.IComponent.Init"/> are guaranteed to exist when your <see cref="M:System.IDisposable.Dispose"/> is called. Any other component might be missing by that time, and trying to get it will throw an exception.</para>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSolutionBuilder.IsOverridingDevenvActions">
            <summary>
            Whether we should override the devenv actions and invoke our own activities on them.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSolutionBuilder.UseApiSurfaceHeuristics">
            <summary>
            Whether to use the <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.BuildHeuristics.ByApiSurface"/> mode instead of <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.BuildHeuristics.ByDate"/>.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSolutionBuilder.UseConcurrentBuild">
            <summary>
            Whether to build on all of the CPUs available on the computer, in parallel.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSolutionBuilder.UseMsbuildSolutionBuilder">
            <summary>
            Whether this implementation should be promoted into the solution builder service.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSolutionBuilder.UseMsbuildSolutionBuilderConsentDisplayed">
            <summary>
            Whether we have displayed the consent about using the MSBuild Solution Builder.
            If not, on the first use the user should be asked about his choice.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSolutionBuilder.RunningSession">
            <summary>
            Gets the build session being currently run by the solution builder. <c>Null</c> if idle.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.RunStartupProject.KillOldProcesses">
            <summary>
            Kills all of the processes previosly started from building this solution.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.RunStartupProject.StartProcess">
            <summary>
            Starts the startup project process.
            Reports to the user and returns <c>Null</c> on failures.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.RunStartupProject.GetStartupInfo">
            <summary>
            Gets the process start info (executable, cmdline args, and working folder) for the startup project of the solution.
            Throws on fatal errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.RunStartupProject.GetStartupProject">
            <summary>
            Gets the VS Project for the startup project in the solution.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.RunStartupProject.OnAfterGetStartupInfo_HackPlatformProduct(System.Diagnostics.ProcessStartInfo)">
            <summary>
            When running a platform product, see which product we currently have registered for VS.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.RunStartupProject.WaitForTargetProcess">
            <summary>
            Gets whether to wait for the target process to exit before running the build-and-run action.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.SolBuilderDuoAutoShowResults">
            <summary>
            Shows the build results when build finishes.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.SolBuilderDuoAutoShowResults.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.SolBuilderDuoAutoShowResults.JetBrains#ComponentModel#IComponent#Init">
            <summary>
            <para>Initializes the component. Called by the component container after the component is created.</para>
            <para><see cref="M:System.IDisposable.Dispose"/> is the pairing method that's guaranteed to be called by the component container to tear down your component.</para>
            <para>You must not access other components before your <see cref="M:JetBrains.ComponentModel.IComponent.Init"/> method is called.</para>
            <para>All of the components that you access from <see cref="M:JetBrains.ComponentModel.IComponent.Init"/> are guaranteed to exist when your <see cref="M:System.IDisposable.Dispose"/> is called. Any other component might be missing by that time, and trying to get it will throw an exception.</para>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.SolBuilderDuoAutoShowResults.AutoShowBuildResults">
            <summary>
            Whether to open the view when the build starts.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoMsbuildEventConverter">
            <summary>
            Converts between MSBuild event and our presentation.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoMsbuildEventConverter.ConvertFrom(Microsoft.Build.Framework.BuildEventArgs)">
            <summary>
            Generic methods, checks from which args to convert from.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoSatelliteArgument.ConfigFileName">
            <summary>
            Name for the file we install.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.SolBuilderDuoStatusBarIndicator">
            <summary>
            Tracks build progress in the status bar.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.SolBuilderDuoStatusBarIndicator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.SolBuilderDuoStatusBarIndicator.Init">
            <summary>
            <para>Initializes the component. Called by the component container after the component is created.</para>
            <para><see cref="M:System.IDisposable.Dispose"/> is the pairing method that's guaranteed to be called by the component container to tear down your component.</para>
            <para>You must not access other components before your <see cref="M:JetBrains.ComponentModel.IComponent.Init"/> method is called.</para>
            <para>All of the components that you access from <see cref="M:JetBrains.ComponentModel.IComponent.Init"/> are guaranteed to exist when your <see cref="M:System.IDisposable.Dispose"/> is called. Any other component might be missing by that time, and trying to get it will throw an exception.</para>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.SolBuilderDuoStatusBarIndicator.UseSolBuilderDuoStatusBarIndicator">
            <summary>
            Whether to open the view when the build starts.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.VS.Actions.SolBuildEventsBrowserDescriptor">
            <summary>
            Opens the Find Results View with the build events from the session.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.VS.Actions.SolBuildEventsBrowserDescriptor.myFilter">
            <summary>
            If the specific item is present, then the filter passes that kind of events.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.VS.Actions.SolBuildEventsBrowserDescriptor.myFuncDomainFilter">
            <summary>
            Filters down the set of events displayed down to some domain, eg events of a single project.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.SolBuildEventsBrowserDescriptor.#ctor(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ProjectModel.ISolution,System.Func{JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject,System.Boolean})">
            <summary>
            Ctor.
            </summary>
            <param name="session">Session that gives the events to show.</param>
            <param name="solution">Current solution, just in case.</param>
            <param name="funcDomainFilter">Allows to limit down the set of <paramref name="session"/> events to show. All-<c>True</c> by default.</param>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.SolBuildEventsBrowserDescriptor.Show(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ProjectModel.ISolution,System.Func{JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject,System.Boolean})">
            <summary>
            Opens the Find Results View with the build events from the session.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.SolBuildEventsBrowserDescriptor.ShowIfNeeded(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ProjectModel.ISolution)">
            <summary>
            Opens the Find Results View with the build events from the session, if there are any significant items.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.SolBuildEventsBrowserDescriptor.ShowIfNeeded(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ProjectModel.ISolution,System.Func{JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject,System.Boolean})">
            <summary>
            Opens the Find Results View with the build events from the session, if there are any significant items.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.VS.Actions.SolBuildEventsBrowserDescriptor.HasSignificantEvents">
            <summary>
            Gets whether there are occurences significant enough to be shown.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.SolBuildEventsBrowserDescriptor.SolBuildEventsBrowserDescriptorSettings.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.SolBuildEventsBrowserDescriptor.SolBuildEventsBrowserDescriptorSettings.JetBrains#ComponentModel#IComponent#Init">
            <summary>
            <para>Initializes the component. Called by the component container after the component is created.</para>
            <para><see cref="M:System.IDisposable.Dispose"/> is the pairing method that's guaranteed to be called by the component container to tear down your component.</para>
            <para>You must not access other components before your <see cref="M:JetBrains.ReSharper.VS.Actions.SolBuildEventsBrowserDescriptor.Init"/> method is called.</para>
            <para>All of the components that you access from <see cref="M:JetBrains.ReSharper.VS.Actions.SolBuildEventsBrowserDescriptor.Init"/> are guaranteed to exist when your <see cref="M:System.IDisposable.Dispose"/> is called. Any other component might be missing by that time, and trying to get it will throw an exception.</para>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.VS.Actions.SolBuildEventsBrowserDescriptor.SolBuildEventsBrowserDescriptorSettings.GroupBuildResultsByMembers">
            <summary>
            Whether to use the <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.BuildHeuristics.ByApiSurface"/> mode instead of <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.BuildHeuristics.ByDate"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.StdAfxAction.Execute(JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.StdAfxAction.Update(JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, ExecuteAsync
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.StdAfxAction.MenuController.#ctor(JetBrains.UI.GotoByName.GotoByNameModel)">
            <summary> 
            Creates the controller and attaches to the model.
            The controller lifetime is also synchronized to the model lifetime. That is, when the model is disposed of, the controller is also disposed of (but not the other way).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.StdAfxAction.MenuController.ExecuteItem(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)">
            <summary>
            Called when an item is to be executed.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.StdAfxAction.MenuController.UpdateItems(System.String,System.Func{System.Collections.Generic.IEnumerable{JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem},JetBrains.UI.GotoByName.GotoByNameController.AddItemsBehavior,System.Boolean})">
            <summary>
            When the items get dirty (<see cref="F:JetBrains.UI.GotoByName.GotoByNameController.ItemsGottenDirty"/>), this function is called on the secondary thread.
            The function should be checking for <paramref name="checkCancelled"/> every so often.
            </summary>
            <param name="filterString">The filtering string against which the items list should be produced.</param>
            <param name="checkCancelled">Call from time to time, on <c>True</c>, abort immediately.</param>
            <param name="itemsConsumer">A function you can use to add items to the output collection in a thread-safe manner. The function checks for the items limit and returns whether more items can be added.</param>
        </member>
        <member name="T:JetBrains.ReSharper.VS.Actions.BuildEventOccurence">
            <summary>
            A textual occurence for presenting the build results messages.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.BuildEventOccurence.InitCommon(JetBrains.ProjectModel.IProjectFile,JetBrains.Util.TextRange,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ReSharper.VS.Actions.BuildEventOccurence.DocumentForFileCache)">
            <summary>
            Common init for both location-bound and location-unbound events.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.BuildEventOccurence.InitWithLocation(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ProjectModel.IProject,JetBrains.ReSharper.VS.Actions.BuildEventOccurence.DocumentForFileCache)">
            <summary>
            Try using the location info from the event, if available and valid.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.BuildEventOccurence.InitWithoutLocation(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ProjectModel.IProject,JetBrains.ReSharper.VS.Actions.BuildEventOccurence.DocumentForFileCache)">
            <summary>
            No location in evt data, or failed to make use of it.
            Attach to hte project file itself.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.VS.Actions.BuildEventOccurence.DocumentForFileCache">
            <summary>
            When doing subsequent events for the same file, allows to reuse the document for that file.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.VS.Actions.BuildEventOccurence.FeatureFlags.TrackLocationChanges">
            <summary>
            When code is edited above the warning, its location is tracked.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.VS.Actions.BuildEventOccurence.FeatureFlags.GroupBuildResultsByMembers">
            <summary>
            Enables grouping by project structure.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView">
            <summary>
            Provides a customizable presentation for a declared element that can be used in runs of text.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView.myDeclaredElementEnvoy">
            <summary>
            Helps tracking the <see cref="F:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView.DeclaredElementProperty"/> value across document changes.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView.myIsInternalDeclaredElementChange">
            <summary>
            Raised when changing the <see cref="F:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView.DeclaredElementProperty"/> due to a change in the envoy.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView.AttachEnvoy(JetBrains.ReSharper.Psi.IDeclaredElement)">
            <summary>
            Creates a new envoy for the new declared element.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView.OnGotoDeclaredElement(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            When the hyperlink is clicked, navigates to the target.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView.UpdateChildren">
            <summary>
            Updates the visual presentation of the object.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView.DeclaredElement">
            <summary>
            Gets or sets the declared element presented by this instance.
            The declared element tries to track changes in the document and remain valid as long as possible.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.VS.Actions.Abbreviator`1">
            <summary>
            Creates short abbreviated names for the entities.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.Abbreviator`1.Run(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.String})">
            <summary>
            Produces abbreviated names for the given set of items.
            </summary>
            <param name="items">The list of items to process.</param>
            <param name="funcItemName">The way of getting the item names.</param>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.Abbreviator`1.IsCaps(System.Char)">
            <summary>
            Tells whether the char is CAPS, in our terms.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.Abbreviator`1.CreateDataWithThreeCaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initial data.
            All items to three caps (at most).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.Abbreviator`1.GetNameParts(`0)">
            <summary>
            Gets the item name, splits it into parts by the Caps.
            Each part is a property bag.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.Abbreviator`1.GetResult">
            <summary>
            Reverses the internal map to make it item-to-name.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.Abbreviator`1.Run">
            <summary>
            Central operating method.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.Abbreviator`1.StageResolveWithCaps">
            <summary>
            Resolve conflicts by letting more letters, but only caps.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.Abbreviator`1.StageResolveWithUniqueNoncaps">
            <summary>
            Add unique non-caps letters to the caps.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceCache">
            <summary>
            A list of <see cref="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceHash"/> and <see cref="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ProjectBuildSignature"/> objects for storing during the build and between sessions.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceCache.Load(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceCache@)">
            <summary>
            Loads the cache and returns the token for later saving it back.
            If the cache is missing, or if the algorithm version is outdated, returns a clean copy.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceCache.GetAssemblySurfaceHash(JetBrains.Util.FileSystemPath)">
            <summary>
            Looks up an existing hash by assembly path, if it's available and still valid, or computes a new one.
            Does not throw if missing. The caller does not need to know if it were missing or not.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceCache.RemoveProjectSignature(JetBrains.Util.FileSystemPath)">
            <summary>
            Removes the signature, if present. Does nothing if missing.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceCache.ReplaceProjectSignature(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ProjectBuildSignature)">
            <summary>
            Sets a new signature for the project, removing the old one.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceCache.TryGetProjectBuildSignature(JetBrains.Util.FileSystemPath)">
            <summary>
            Tries to look up the project signature, returns <c>Null</c> if missing. Should NOT create a new one if missing, these are quite different cases.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceCache.CurrentAlgorithm">
            <summary>
            <see cref="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceCache.Algorithm"/> for the currently running implementation.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceCache.Algorithm">
            <summary>
            The algorithm ID of the current implementation.
            Each time the impl is changed, produce a new ID here. 
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ListEventsAddChild`1">
            <summary>
            A ListEvents impl that can take part in XAML serialization.
            </summary>
            <remarks>Either <see cref="T:System.Collections.IList"/> (yes, nongeneric) or <see cref="T:System.Windows.Markup.IAddChild"/> is required for it to work, we implement the latter.</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ListEventsAddChild`1.AddChild(System.Object)">
            <summary>
            Adds a child object. 
            </summary>
            <param name="value">The child object to add.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ListEventsAddChild`1.AddText(System.String)">
            <summary>
            Adds the text content of a node to the object. 
            </summary>
            <param name="text">The text to add to the object.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ListEventsAddChild`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList" />.
            </summary>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />. </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ListEventsAddChild`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.
            </summary>
            <returns>
            true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.
            </returns>
            <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ListEventsAddChild`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.
            </summary>
            <returns>
            The index of <paramref name="value" /> if found in the list; otherwise, -1.
            </returns>
            <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ListEventsAddChild`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value" /> should be inserted. </param>
            <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException"><paramref name="value" /> is null reference in the <see cref="T:System.Collections.IList" />.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ListEventsAddChild`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />. </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ListEventsAddChild`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList" /> is read-only. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ListEventsAddChild`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ProjectBuildSignature">
            <summary>
            When a project is built, records the <see cref="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceHash"/> of the assemblies that are its project references, to check on the next build whether they have changed or not.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ProjectBuildSignature.HasBreakingChangesAgainst(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ProjectBuildSignature)">
            <summary>
            Compares this signature to the prev one, checks if there were any breaking changes. If no, the build is not necessary.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ProjectBuildSignature.ProjectFileFullPath">
            <summary>
            The identity of the item.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceHash">
            <summary>
            Holds a hash of the assembly's public API surface.
            Whenever there is a breaking change in the surface, all of the projects referencing this assembly must be rebuilt.
            The equality is not strict, it checks assembly name, version, and surface hash only.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceHash.OptionDumpSignature">
            <summary>
            Whether to dump the XML Signature file to disk. Debug option.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceHash.#ctor(JetBrains.Util.FileSystemPath)">
            <summary>
            Captures the signature from the file.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceHash.#ctor">
            <summary>
            Default ctor, used for serialization.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceHash.IsUpToDate">
            <summary>
            Checks if this signature is still up-to-date for its file (only timestamp is considered).
            If not, you should create a new one with the ctor.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceHash.ComputeHash_Block(JetBrains.Util.FileSystemPath)">
            <summary>
            Old impl. Gets the whole XML signature as a document, writes into a stream, then calcs the hash. Uses a lot of memory on most sizable assemblies.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceHash.ComputeHash_Stream(JetBrains.Util.FileSystemPath)">
            <summary>
            New impl. Streams the XML Signature producer into the hashing stream consumer. Uses much less memory and has better perf.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceHash.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceHash.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceHash.Equals(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceHash)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="obj" /> parameter; otherwise, false.
            </returns>
            <param name="obj">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceHash.AssemblyName">
            <summary>
            The serialized form of the <see cref="T:System.Reflection.AssemblyName"/>.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceHash.FullPath">
            <summary>
            Full path to the assembly. This is the key.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceHash.ModificationTime">
            <summary>
            Modification time of the a
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceHash.PublicApiHash">
            <summary>
            The public API surface of the assembly, compacted with a hash.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceSerializer">
            <summary>
            Takes an assembly and serializes its public API surface into an XML Document.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceSerializer.Run(JetBrains.Metadata.Reader.API.IMetadataAssembly)">
            <summary>
            Takes an assembly and serializes its public API surface into an XML Document.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolBuilderDuo.BuildTasks.BuildLevelConditionalFilter">
            <summary>
            This task is executed on the build side before building the next pack of non-interdependent projects and filters out those projects that should not be built.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolBuilderDuo.BuildTasks.BuildLevelConditionalFilter.Execute">
            <summary>
            Executes a task.
            </summary>
            <returns>
            true if the task executed successfully; otherwise, false.
            </returns>
        </member>
        <member name="P:JetBrains.ReSharper.SolBuilderDuo.BuildTasks.BuildLevelConditionalFilter.Input">
            <summary>
            The original list of projects on this build level.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolBuilderDuo.BuildTasks.BuildLevelConditionalFilter.Level">
            <summary>
            Supplemetary parameter for tracing out the progress. The actual build level number.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolBuilderDuo.BuildTasks.BuildLevelConditionalFilter.Output">
            <summary>
            The filtered-down list of projects on this build level.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolBuilderDuo.BuildTasks.MsbuildNodeData">
            <summary>
            A class that saves the state on each of the MSBuild nodes (including the main one that runs alongside MSBuild engine).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolBuilderDuo.BuildTasks.MsbuildNodeData.QueryBuildProjects(System.String[])">
            <summary>
            Reports to the host that the given project was considered up-to-date and was not built.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolBuilderDuo.BuildTasks.IMainMsbuildNode">
            <summary>
            Runs in the process that hosts the MSBuild engine (main node), receives notifications and questions from the build process on all of the nodes.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolBuilderDuo.BuildTasks.IMainMsbuildNode.QueryBuildProjects(System.String[])">
            <summary>
            Before building each of the projects, the builder asks whether the project actually has to be built.
            </summary>
            <param name="itemspecs">Identities of the projects to check.</param>
            <returns>Identities of the projects that have to be built.</returns>
        </member>
        <member name="T:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.BuildSessionView">
            <summary>
            A build session graphical representation.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.BuildSessionView.ProjectViewHeight">
            <summary>
            Specifies the uniform height for all of the project views.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.BuildSessionView.ProjectViewWidth">
            <summary>
            Specifies the uniform width for all of the project views.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.BuildSessionView.ComposeProjectColor(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectErrorStatus)">
            <summary>
            Chooses the current color for the project, based on its current state.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.BuildSessionView.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.EntryPoint">
            <summary>
            A class for quickly test-running the subsystem.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerXml">
            <summary>
            Runs searches and transformations on an MSBuild project.
            Works on the XML serialized representation of an MSBuild project.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerXml.XmlnsMsbuild">
            NOTE: namespace could be extracted from C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild\Microsoft.Build.Core.xsd file 
             
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerXml.GetSolutionBuildLevels(System.Xml.XmlDocument)">
            <summary>
            In a solution-induced project files, looks for per-config build levels.
            The outer list contains levels.
            The inner list contains project identities.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerXml.MakeBuildConditional(System.Xml.XmlDocument)">
            <summary>
            Augments the Build target of the project so that it asked which projects actually have to be built before starting each of the build levels.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerXml.MakeBuildConditional_Target(System.Xml.XmlDocument,System.String)">
            <summary>
            Per-target (Build, Rebuild, Clean).
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerXml.BuildConfiguration">
            <summary>
            Defines the two-component build configuration.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerXml.BuildConfiguration.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerXml.BuildConfiguration.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerXml.BuildConfiguration.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            
            <returns>
            A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerXml.BuildConfiguration.Equals(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildProjectTransformerXml.BuildConfiguration)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="obj" /> parameter; otherwise, false.
            </returns>
            <param name="obj">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun">
            <summary>
            Listens for the build process events.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.MainThread">
            <summary>
            Gets the dispatcher of the primary thread for this session.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.Session">
            <summary>
            The <see cref="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession"/> that describes the initial params and results.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.State">
            <summary>
            Gets the current state of the engine.
            Changes on the original thread only.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.BuildThread">
            <summary>
            Thread on which the build tasks are running.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.myMapBuildIdToOwningProject">
            <summary>
            Maps a <see cref="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.ProjectBuildId"/> of every building project to the top-level project that's being build and for whose build the dependent build has been invoked. For top-level projects, points to self.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.myMapBuildIdToProject">
            <summary>
            Build IDs of the projects, as MSBuild reports its starting their build.
            A single project might have more than one Build ID.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.myProjectsMustBeBuiltYet">
            <summary>
            Projects from the must-list, not yet built. When reaches zero count, the following projects could be skipped. If <c>Null</c>, then all of the projects must be built.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.myRootProjectBuildId">
            <summary>
            As the root target build starts, records its ID here.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.#ctor(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.BuildHeuristics,System.Boolean)">
            <summary>
            Creates a new MSBuild run over the <see cref="!:session"/> that describes the initial params and results.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.AssertMainThread">
            <summary>
            Constrains execution to the main thread.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.BeginRun">
            <summary>
            Starts running the build for the specific target.
            The build proceeds async, check at the <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.State"/> property.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.AssertState(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.States)">
            <summary>
            Expects a specific state.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.GetBuildTarget">
            <summary>
            Tells the build target from the session params.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.GetProjectFullPathByIdentity(System.String)">
            <summary>
            Gets a project full path by a project identity, which is either a solution-relative project item spec, or a full project file path.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.Init_ParseProjects_Levels(System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            Creates various project-related data structures. And projects themselves, too.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.Init_Projects">
            <summary>
            Various project-related structures.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.QueryBuildProjects_MainThreadSync(JetBrains.Util.FileSystemPath[],System.Collections.Generic.List{JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject},System.Collections.Generic.List{JetBrains.Util.FileSystemPath})">
            <summary>
            Processes <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.QueryBuildProjects"/> on the main thread so that to interact with the projects list and all.
            Tosses <see cref="!:projectpaths"/> into <see cref="!:uptodates"/> and <see cref="!:dirties"/>.
            Caller needs results and thus calls sync.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.Abort">
            <summary>
            Aborts the ongoing build. After the projects currently being built are done with, the build stops.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.QueryBuildProjects_NeedMore(System.Collections.Generic.IEnumerable{JetBrains.Util.FileSystemPath})">
            <summary>
            Checks if we've built all of the must-build projects, and can skip all of the following ones.
            Marking the <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState.Excluded"/> status is not needed, as it will be set in place of <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState.Pending"/> after the build completes.
            </summary>
            <returns>Whether to go on building.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.QueryBuildProjects_UpdateSignatures(JetBrains.Util.FileSystemPath[])">
            <summary>
            When the projects are being rebuild or cleaned up, updates their signatures.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.Microsoft#Build#Framework#ILogger#Initialize(Microsoft.Build.Framework.IEventSource)">
            <summary>
            Subscribes loggers to specific events. This method is called when the logger is registered with the build engine, before any events are raised.
            </summary>
            
            <param name="eventSource">The events available to loggers.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.Microsoft#Build#Framework#ILogger#Shutdown">
            <summary>
            Releases the resources allocated to the logger at the time of initialization or during the build. This method is called when the logger is unregistered from the engine, after all events are raised. A host of MSBuild typically unregisters loggers immediately before quitting.
            </summary>
            
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.UpdateBuildSignatures">
            <summary>
            Fires to notify that some of the build signatures have gone out-of-date. Handling might be async.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.QueryBuildProjects">
            <summary>
            Fires to request the list of projects to be built. Handling must be sync.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.RequiredBuildEventImportance">
            <summary>
            Specifies which events, by priority, should be allowed thru the pipe to the session.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.JetBrains#ReSharper#SolBuilderDuo#BuildTasks#IMainMsbuildNode#QueryBuildProjects(System.String[])">
            <summary>
            Before building each of the projects, the builder asks whether the project actually has to be built.
            </summary>
            <param name="itemspecs">Identities of the projects to check.</param>
            <returns>The projects that have to be built.</returns>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.Microsoft#Build#Framework#ILogger#Parameters">
            <summary>
            Gets or sets the user-defined parameters of the logger. 
            </summary>
            
            <returns>
            The logger parameters.
            </returns>
            
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.Microsoft#Build#Framework#ILogger#Verbosity">
            <summary>
            Gets or sets the level of detail to show in the event log.
            </summary>
            
            <returns>
            One of the enumeration values. The default is <see cref="F:Microsoft.Build.Framework.LoggerVerbosity.Normal" />.
            </returns>
            
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.BuildHeuristics.ByDate">
            <summary>
            Classic build mode. If any of the inputs is newer than any of the outputs, the project is built.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.BuildHeuristics.ByApiSurface">
            <summary>
            Hi-speed mode. Like <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.BuildHeuristics.ByDate"/>, but with one exception: if the breaking input is a project reference, and the public API surface had no breaking changes since the last build, the build of this project can be skipped.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.ProjectBuildId">
            <summary>
            An ID of the project, as being built by MSBuild.
            Each time the project is built, even within the same build process, it gets a new ID.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.ProjectBuildId.NodeId">
            <summary>
            The node on which the project is running.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.ProjectBuildId.ProjectContextId">
            <summary>
            The local project Id on the node identified by <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.ProjectBuildId.NodeId"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.States.Error">
            <summary>
            Erronous state.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.States.Initialized">
            <summary>
            The session has been initialized, and it's ready for building.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.States.Building">
            <summary>
            The build is running.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.States.UsedUp">
            <summary>
            The build has run, session cannot be reused.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ProjectBuildInputsOutputs">
            <summary>
            When we think about building a project, we're interested in its inputs and outputs.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ProjectBuildInputsOutputs.AreInputsNewerThanOutputsNoReferencedProjects(JetBrains.Util.FileSystemPath)">
            <summary>
            Checks if the project has to be rebuilt, ignoring its project references.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ProjectBuildInputsOutputs.GetProjectBuildSignature(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.AssemblySurfaceCache,JetBrains.Util.FileSystemPath)">
            <summary>
            For a project, builds its up-to-date signature, so that it then could be compared to the one in the cache.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ProjectBuildInputsOutputs.GetProjectInputs(JetBrains.ProjectModel.IProject)">
            <summary>
            Gets the list of all project input files.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ProjectBuildInputsOutputs.ProjectInputsVisitor">
            <summary>
            Project inputs as a plain list of paths.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ProjectsByLevelsView">
            <summary>
            Renders the projects, organized in build-levels.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ProjectsByLevelsView.ProjectViewHeight">
            <summary>
            Specifies the uniform height for all of the project views.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ProjectsByLevelsView.ProjectViewWidth">
            <summary>
            Specifies the uniform width for all of the project views.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ProjectsByLevelsView.SetContent(System.Collections.Generic.List{System.Collections.Generic.List{JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject}})">
            <summary>
            Removes the old content, fills with the new set of projets.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ProjectsByLevelsView.ComposeProjectColor(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectErrorStatus)">
            <summary>
            Chooses the current color for the project, based on its current state.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.ProjectsByLevelsView.CreateLevelView(System.Action{System.Windows.UIElement})">
            <summary>
            Creates a view for the level of projects.
            Returns the means for adding projects to the level.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoSatellite">
            <summary>
            Satellite process for hosting the MSBuild Engine.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoSatellite.DispatcherMain">
            <summary>
            Main thread of the object.
            On this thread the object is created, and on this thread the <see cref="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession"/> can be modified.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoSatellite.IsBuildCompleted">
            <summary>
            Makes sure we report a completed build no more than once.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoSatellite.myMsbuildSessionRun">
            <summary>
            Implements the build.
            Created when we're uploaded with the build session.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoSatellite.AssertState(System.Nullable{JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun.States})">
            <summary>
            Expects a specific state from <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoSatellite.myMsbuildSessionRun"/>, or <c>Null</c> if the field should be <c>Null</c> yet.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoSatellite.BeginBuild_MarshalQueryBuildProject">
            <summary>
            Marshals projects status request/reports from the <see cref="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.MsbuildSessionRun"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoSatellite.BeginRun_SchedulleSatelliteShutdown">
            <summary>
            When done, waits for some more secs for questions from the client, and then shuts down.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoSatellite.Init_RegisterService">
            <summary>
            Starts listening for remote requests.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoSatellite.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuilderDuoSatellite.JetBrains#ReSharper#SolutionBuilder#SolBuilderDuo#ISolBuilderDuoServer#AbortBuild">
            <summary>
            If the build is currently running, aborts the build as soon as possible.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.SolBuilderDuoView.CurrentSession">
            <summary>
            The most-recently-used build session.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.SolBuilderDuoView.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.ReSharper.VSI.Avalon.SolBuilderDuo.SolBuilderDuoView.UseSolBuilderDuoView">
            <summary>
            Whether to open the view when the build starts.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.VS.Actions.SolBuildEventsFilterActions.myIsExclusive">
            <summary>
            Whether all other kinds should be suppressed when selecting this one.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.VS.Actions.SolBuildEventsFilterActions.myKinds">
            <summary>
            Kinds corresponding to this filter.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.SolBuildEventsFilterActions.Execute(JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.SolBuildEventsFilterActions.Update(JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.SolBuilderTempActions.Execute(JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.SolBuilderTempActions.Update(JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolutionFileConverter">
            <summary>
            From a solution file, produces an MSBuild project file suitable for running a build over it.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolutionFileConverter.RunConverter(JetBrains.Util.FileSystemPath)">
            <summary>
            Runs the MSBuild internal converter.
            </summary>
            <returns>
            MSBuild project, from the solution file.
            Non-empty after the conversion is run.
            </returns>
        </member>
        <member name="T:JetBrains.ReSharper.VS.Actions.TogglingFilter`1">
            <summary>
            Operates a filter that sets or removes individual items.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.VS.Actions.TogglingFilter`1.myEffective">
            <summary>
            Items currently in effect.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.TogglingFilter`1.Apply(System.Boolean,`0[])">
            <summary>
            Applies the new filter.
            </summary>
            <param name="isExclusive">Whether all other kinds should be off. Otherwise, works as Toggle.</param>
            <param name="kinds">Kinds corresponding to this filter.</param>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.TogglingFilter`1.IsIncluded(System.Boolean,`0[])">
            <summary>
            Checks if the particular filter is currently in effect.
            </summary>
            <param name="isExclusive">Whether all other kinds should be off.</param>
            <param name="kinds">Kinds corresponding to this filter.</param>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.TogglingFilter`1.SetExclusively(`0[])">
            <summary>
            Sets these items on the filter, resets all else.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.Actions.TogglingFilter`1.Toggle(`0[])">
            <summary>
            Toggles the given items.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.VS.Actions.TogglingFilter`1.Effective">
            <summary>
            Gets the filter effective at the moment.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.VSI.Components.SolutionWatchdog">
            <summary>
            Watches for any leaked solutions.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Components.SolutionWatchdog.SolCompo.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Components.SolutionWatchdog.SolCompo.JetBrains#ComponentModel#IComponent#Init">
            <summary>
            <para>Initializes the component. Called by the component container after the component is created.</para>
            <para><see cref="M:System.IDisposable.Dispose"/> is the pairing method that's guaranteed to be called by the component container to tear down your component.</para>
            <para>You must not access other components before your <see cref="!:Init"/> method is called.</para>
            <para>All of the components that you access from <see cref="!:Init"/> are guaranteed to exist when your <see cref="M:System.IDisposable.Dispose"/> is called. Any other component might be missing by that time, and trying to get it will throw an exception.</para>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.VSI.Components.TextControlDebugMonitor.ShowWindow">
            <summary>
            Shows the monitor window.
            Routed thru a signal to deactivate on disposal.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Components.TextControlDebugMonitor.InitWindow_Viewport">
            <summary>
            Last focused text control viewport coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Components.TextControlDebugMonitor.ShowScrollingAndCaret">
            <summary>
            Shows text control scrolling and caret info for the last-focused text control.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Components.TextControlDebugMonitor.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Components.TextControlDebugMonitor.JetBrains#ComponentModel#IComponent#Init">
            <summary>
            <para>Initializes the component. Called by the component container after the component is created.</para>
            <para><see cref="M:System.IDisposable.Dispose"/> is the pairing method that's guaranteed to be called by the component container to tear down your component.</para>
            <para>You must not access other components before your <see cref="M:JetBrains.ComponentModel.IComponent.Init"/> method is called.</para>
            <para>All of the components that you access from <see cref="M:JetBrains.ComponentModel.IComponent.Init"/> are guaranteed to exist when your <see cref="M:System.IDisposable.Dispose"/> is called. Any other component might be missing by that time, and trying to get it will throw an exception.</para>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Components.TextControlDebugMonitor.ShowActionHandler.JetBrains#ActionManagement#IActionHandler#Execute(JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Components.TextControlDebugMonitor.ShowActionHandler.JetBrains#ActionManagement#IActionHandler#Update(JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="T:JetBrains.ReSharper.VSI.ErrorStripeProto.ErrorStripeEditorStyle">
            <summary>
            Switches the error stripe into the editor colors mode. Optionally.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.VS.OptionPages.InternalPage.PageCreate">
            <summary>
            Fires when the internal page is shown.
            Allows to add more controls to it (as a stack panel). Sink <see cref="F:JetBrains.ReSharper.VS.OptionPages.InternalPage.Commit"/> to save on OK.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.VS.OptionPages.InternalPage.Commit">
            <summary>
            Fires when the page is committed with OK.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Infra.IRefactoring">
            <summary>
            Describes the workflow of a refactoring. Classes implementing this interface and marked with <see cref="T:JetBrains.ReSharper.Refactorings.Infra.RefactoringAttribute"/> are added to the <see cref="T:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager"/> store.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.IRefactoring.CanRun(JetBrains.ActionManagement.IDataContext)">
            <summary>
            Checks whether the refactoring can run on the given data context.
            Typically used by the actions' <see cref="M:JetBrains.ActionManagement.IUpdatableAction.Update(JetBrains.ActionManagement.IDataContext)"/> handler to disable the refactoring.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.IRefactoring.IsSupported">
            <summary>
            Gets whether the refactoring is supported in the current environment.
            Typically used by the actions' <see cref="M:JetBrains.ActionManagement.IUpdatableAction.Update(JetBrains.ActionManagement.IDataContext)"/> handler to control the refactoring action visibility.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.IRefactoring.Name">
            <summary>
            Gets the short name of the refactoring. Goes to the refactoring window title.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.IRefactoring.WorkflowChart">
            <summary>
            Gets the workflow chart for this refactoring that defines what actions should be executed, in what sequence, and what data (UI) pages might be displayed by the refactoring.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Infra.IRefactoringDefinition">
            <summary>
            Describes the workflow of a refactoring. Classes implementing this interface and marked with <see cref="T:JetBrains.ReSharper.Refactorings.Infra.RefactoringAttribute"/> are added to the <see cref="T:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager"/> store.
            Created one per session (mostly, a singleton).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.IRefactoringDefinition.CanRun(JetBrains.DataFlow.IPropertyBag)">
            <summary>
            Checks whether the refactoring can run on the given data context.
            Typically used by the actions' <see cref="M:JetBrains.ActionManagement.IUpdatableAction.Update(JetBrains.ActionManagement.IDataContext)"/> handler to disable the refactoring.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.IRefactoringDefinition.AcquireContext(JetBrains.ActionManagement.IDataContext,JetBrains.DataFlow.IPropertyBag)">
            <summary>
            <para>Acquires the environmental information from the data context and transfers to the bag.</para>
            <para>As the refactoring is running, its only source of information is the bag. It's easy to populate the bag when running the refactoring programmatically. When run from UI, this information has to be collected from the action's data context.</para>
            <para>Don't copy excessive information from the data context, as this will make it harder for plugin writers to learn what your refactoring wants. To obtain that information, they should inspect the bag after calling this method.</para>
            </summary>
            <param name="datacontext">The action's data context, to take the useful environmental information from.</param>
            <param name="bag">The property bag on which the refactoring will run.</param>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.IRefactoringDefinition.IsSupported">
            <summary>
            Gets whether the refactoring is supported in the current environment.
            Typically used by the actions' <see cref="M:JetBrains.ActionManagement.IUpdatableAction.Update(JetBrains.ActionManagement.IDataContext)"/> handler to control the refactoring action visibility.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.IRefactoringDefinition.Name">
            <summary>
            Gets the short name of the refactoring. Goes to the refactoring window title.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.IRefactoringDefinition.WorkflowChart">
            <summary>
            Gets the workflow chart for this refactoring that defines what actions should be executed, in what sequence, and what data (UI) pages might be displayed by the refactoring.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Infra.IRefactoringPage">
            <summary>
            The base interface for the data component of the refactoring workflow.
            Provides for setting input data for the refactoring, either programmatically, or thru the optional user interface.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Infra.IRefactoringPageUiSequenceControl">
            <summary>
            A refactoring page might implement this interface if it desires to invoke UI Sequence transitions on its own.
            For example, a button on the page may alter the setting for an alternate execution branch and immediately trigger the “Continue” button.
            Note that this interface MIGHT be ignored by the refactoring execution host, so you MUST always expect that your page will be left by the ordinary “Continue” button, even though <see cref="P:JetBrains.ReSharper.Refactorings.Infra.IRefactoringPageUiSequenceControl.ContinueSuppressed"/>, and that firnig the <see cref="E:JetBrains.ReSharper.Refactorings.Infra.IRefactoringPageUiSequenceControl.GoBackward"/>/<see cref="E:JetBrains.ReSharper.Refactorings.Infra.IRefactoringPageUiSequenceControl.GoForward"/> events MIGHT be ignored.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.IRefactoringPageUiSequenceControl.ContinueSuppressed">
            <summary>
            Indicates whether the “Continue” button should not be available for the page, as the page might wish to disable it if it provides a set of custom Continue buttons for alternate navigation.
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Refactorings.Infra.IRefactoringPageUiSequenceControl.GoBackward">
            <summary>
            Fires when the UI sequence should be traversed backward. Simulates the “Back” button click.
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Refactorings.Infra.IRefactoringPageUiSequenceControl.GoForward">
            <summary>
            Fires when the UI sequence should be traversed forward. Simulates the “Continue” button click.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.IValidator.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.IValidator.Severity">
            <summary>
            Gets the severity of this validator in its current state.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Infra.RefactoringAttribute">
            <summary>
            The refactoring workflow implementations marked with this attribute are automatically collected by the <see cref="T:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager"/> class.
            The class must implement the <see cref="T:JetBrains.ReSharper.Refactorings.Infra.IRefactoringDefinition"/> interface. The type of the refactoring is the key to the refactoring in the manager.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost">
            <summary>
            Hosts exexution of a refactoring.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.myExecutionLimit">
            <summary>
            The maximum number of steps per one <c>Go</c> execution.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.myIsBusy">
            <summary>
            Is currently running (calling <see cref="M:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.Step"/>, maybe async), don't touch, will stop some day either in the final state or on a data page.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.myIsInStep">
            <summary>
            Inside the <see cref="M:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.Step"/> function?
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.myMapStatesToSteps">
            <summary>
            Contains the steps to be executed for each of the states.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.myReadonlyCookie">
            <summary>
            Readonly cookie for properties of this host.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.myWorkflowChart">
            <summary>
            Stores the private and locked copy of the chart.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.IsFinalState(JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.States)">
            <summary>
            Gets whether the refactoring has terminated execution and is now in the final state.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.IsRunningState(JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.States)">
            <summary>
            Gets whether the refactoring is running in this state.
            All the states but <see cref="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.States.Ready"/>, <see cref="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.States.Completed"/>, and <see cref="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.States.Failed"/> are considered to be runnning states.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.Go">
            <summary>
            If the refactoring is in the initial or running state, proceeds to the next data state or to the final state, synchronousely.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.InitDataFlow" -->
        <member name="M:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.InitPropertyBag">
            <summary>
            Adds environment constants to the <see cref="P:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.PropertyBag"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.InitStep_Execution(System.Collections.Generic.IEnumerable{System.Action{JetBrains.DataFlow.IPropertyBag}},JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.States)">
            <summary>
            Action on the *Execute state.
            </summary>
            <param name="handlers">Handlers to call.</param>
            <param name="nextstate">The state to transition into when done here.</param>
            <returns>A func that implements this state.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.InitSteps">
            <summary>
            Fills in the actions for stepping in each of the <see cref="T:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.States"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.InitUiSequence">
            <summary>
            Prepares the refactoring's UI sequence chart.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.Step">
            <summary>
            Performs a single state machine step.
            Returns whether more steps are desired immediately after this one.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.CurrentDataPage">
            <summary>
            Gets the current data page of the refactoring, in case its <see cref="P:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.State"/> is <see cref="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.States.UiSequence"/> and the active chart component is a <see cref="T:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowDataComponent"/>.
            Otherwise, <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.IsBusy">
            <summary>
            The refactoring is currently busy (calling the <see cref="M:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.Step"/> function repeatedly, maybe asynchronousely), don't touch, will stop some day either in the final state or on a data page.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.PropertyBag">
            <summary>
            Gets the data context with environment constants.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.RefactoringDefinition">
            <summary>
            The definition for the refactoring whose execution is hosted in this object.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.State">
            <summary>
            Gets the current stage of the refactoring execution. Readonly.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.WorkflowChart">
            <summary>
            Gets the private and frozen copy of the chart.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.States">
            <summary>
            Enumerates the possible states for a refactoring host.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.States.Ready">
            <summary>
            The refactoring has not started yet.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.States.UiSequence">
            <summary>
            The refactoring is going through the UI sequence, as described by the <see cref="T:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.States.PreExecution">
            <summary>
            TODO.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.States.Execution">
            <summary>
            TODO.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.States.PostExecution">
            <summary>
            TODO.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.States.Completed">
            <summary>
            The refactoring has successfully completed the execution.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.States.Failed">
            <summary>
            The refactoring failed to complete the execution for some reason (aborted, could not recover from external changes, failed with an error, etc).
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.UiSequenceHost">
            <summary>
            Governs execution of the UI sequence within the global refactoring sequence.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.UiSequenceHost.myCurrentChartComponent">
            <summary>
            The name of the current component in the <see cref="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.UiSequenceHost.myWorkflowChart"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.UiSequenceHost.myCurrentDataPage">
            <summary>
            When stopped at a data component, stores an instance of its page.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.UiSequenceHost.myDataPagesCache">
            <summary>
            Caches the data pages that are created when executing the data components, so that they were reused on back-forward navigation.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.UiSequenceHost.myDiverge">
            <summary>
            After entering a component, stores whether we should diverge when leaving it on the next step.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.UiSequenceHost.myWorkflowChart">
            <summary>
            Stores the private and locked copy of the chart.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.UiSequenceHost.Step">
            <summary>
            Performs a single state machine step.
            Returns whether more steps are desired immediately after this one.
            </summary>
            <remarks>
            Sequence:
            (1) Execute the current track.
            (2) Execute the new component.
            (3) Return whether not Data and not Final.
            </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.UiSequenceHost.Step_FollowTrack(JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart,System.String,System.Boolean)">
            <summary>
            Follows the specified track out of the component. Most of all, reports the errors verbosely.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.UiSequenceHost.Step_ExecuteComponent">
            <summary>
            Executes component.
            Returns whether wants to execute more (does not tell the final one apart).
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost.UiSequenceHost.CurrentDataPage">
            <summary>
            When stopped at a data component, stores an instance of its page.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager.myReadonlyCookie">
            <summary>
            The readonly cookie for limiting access to the properties and collections.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager.myRefactorings">
            <summary>
            <see cref="P:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager.Refactorings"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager.TryGetInstance">
            <summary>
            The one and only manager instance.
            Returns <c>Null</c> if ReSharper is not loaded.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager.ExecuteRefactoring(System.Type,JetBrains.ActionManagement.IDataContext)">
            <summary>
            Starts execution of the specified refactoring.
            This function runs the refactoring with the full user interface; you may create a <see cref="T:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost"/> instance manually to better control the execution. 
            </summary>
            <param name="type">Type that identifies the refactoring.</param>
            <param name="context">Context in which the refactoring will be executed.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager.ExecuteRefactoring(JetBrains.ReSharper.Refactorings.Infra.IRefactoringDefinition,JetBrains.ActionManagement.IDataContext)">
            <summary>
            Starts execution of the specified refactoring.
            This function runs the refactoring with the full user interface; you may create a <see cref="T:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost"/> instance manually to better control the execution. 
            </summary>
            <param name="refactoring">The refactoring to execute.</param>
            <param name="context">Context in which the refactoring will be executed.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager.GetRefactoring(System.Type)">
            <summary>
            A method for looking up a refactoring in the <see cref="P:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager.Refactorings"/> collection.
            Works like the collection indexer, but the exception that is frown when there is no such refactoring is more specific.
            For other collection operations, use the <see cref="P:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager.Refactorings"/> map.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager.InitDataFlow">
            <summary>
            Establishes property bindings and validators.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager.UpdateRefactoringActionPresentation(System.Type,JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.ActionPresentation)">
            <summary>
            Checks whether the refactoring is available in the current context, for the sake of updating its UI action.
            </summary>
            <param name="type">Type that uniquely identifies the refactoring we're querying.</param>
            <param name="context">Data context to check for availability in.</param>
            <param name="presentation">Additional information (visible, enabled, etc).</param>
            <returns>Whether the refactoring is visible and enabled, ie whether the its action can be executed.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager.UpdateRefactoringActionPresentation(JetBrains.ReSharper.Refactorings.Infra.IRefactoringDefinition,JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.ActionPresentation)">
            <summary>
            Checks whether the refactoring is available in the current context, for the sake of updating its UI action.
            </summary>
            <param name="refactoring">The refactoring to check.</param>
            <param name="context">Data context to check for availability in.</param>
            <param name="presentation">Additional information (visible, enabled, etc).</param>
            <returns>Whether the refactoring is visible and enabled, ie whether the its action can be executed.</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager.Instance">
            <summary>
            The one and only manager instance.
            Throws if ReSharper is not loaded.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager.Refactorings">
            <summary>
            Gets the list of refactorings registered to the system.
            You can use the existing ones, or add your own.
            By default, all the refactorings marked with the <see cref="T:JetBrains.ReSharper.Refactorings.Infra.RefactoringAttribute"/> are harvested on startup.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager.RunningRefactorings">
            <summary>
            Gets the collection of refactorings that are currently in the running state.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager.ViewManager">
            <summary>
            Gets a manager for the refactoring views.
            Its primary mission is to control the refactoring view resources, like sharing the toolwindow between the refactorings running with full UI.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Infra.RefactoringViewManager">
            <summary>
            The manager for the refactoring views, a helper to the <see cref="T:JetBrains.ReSharper.Refactorings.Infra._RefactoringsManager"/>.
            Its primary mission is to control the refactoring view resources, like sharing the toolwindow between the refactorings running with full UI.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Infra.RefactoringViewManager.ToolWindowID">
            <summary>
            ID for the tool window, as registered with the tool window wrapper subsystem.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Infra.RefactoringViewManager.myPrimaryView">
            <summary>
            The primary view, as we're using the single-refactoring model.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringViewManager.TryGetInstance">
            <summary>
            Gets the one and only instance of the manager.
            Returns <c>Null</c> if there is no solution.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringViewManager.TryGetViewForUiExecution">
            <summary>
            Summons a <see cref="T:JetBrains.ReSharper.Refactorings.WorkflowX.RefactoringView"/> suitable for full-UI execution of a refactoring.
            <c>Null</c> means execution was refused.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringViewManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringViewManager.Instance">
            <summary>
            Gets the one and only instance of the manager.
            Throws if there is no solution.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringViewManager.PrimaryView">
            <summary>
            Gets the primary view, as we're using the single-refactoring model.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart">
            <summary>
            Statically defines the refactoring workflow chart that will be executed by the <see cref="T:JetBrains.ReSharper.Refactorings.Workflow.Avalon.RefactoringExecutionHost"/>.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Infra.IFreezable">
            <summary>
            An interface for the object that can be frozen to prevent further changes to it.
            All attempts to modify the object will fail after it's frozen.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.IFreezable.Freeze">
            <summary>
            Freezes the object. This action is irrevertible.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.IFreezable.IsFrozen">
            <summary>
            Gets whether the object has been frozen.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.myIsFrozen">
            <summary>
            A prop that allows to listen for changes.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.#ctor">
            <summary>
            Creates a new, empty chart.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.#ctor(System.Action{JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart,System.String,System.String})">
            <summary>
            Cretaes a workflow using a function that injects its custom steps in between the components given as arguments.
            Such a public function can be implemented on your refactoring to enable injecting it into composite refactorings.
            </summary>
            <param name="inject">A handler that should inject the custom steps into the given chart in between the components specified.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.#ctor(System.Action{JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart,System.String,System.String},System.Action{JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart})">
            <summary>
            Cretaes a workflow using a function that injects its custom steps in between the components given as arguments.
            Such a public function can be implemented on your refactoring to enable injecting it into composite refactorings.
            </summary>
            <param name="injectUi">A handler that should inject the custom steps into the given chart in between the components specified.</param>
            <param name="injectExecution">A handler that should inject the *execute steps into the chart.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.AssertValid">
            <summary>
            Checks various constraints on the current chart.
            Throws if broken.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.Clone">
            <summary>
            Creates a shallow copy of the workflow.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.GetIncomingTracks(System.String,JetBrains.DataFlow.IDictionaryEvents{System.String,System.String})">
            <summary>
            Filters the collection to get the incoming tracks that end in the specified state.
            Pass either <see cref="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.StraightTracks"/> or <see cref="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.DivergingTracks"/> as the <paramref name="tracks"/> parameter. 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.Init_TerminalStates">
            <summary>
            Creates the two terminal states for the chart.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.OnTrackAddRemoveValidation(JetBrains.DataFlow.AddRemoveEventArgs{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)">
            <summary>
            Validates both straight and diverging tracks when they're added or removed in the chart.
            </summary>
            <param name="args"></param>
            <param name="diverging"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.Freeze">
            <summary>
            Freezes the object. This action is irrevertible.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.FinalStateName">
            <summary>
            Gets the final state of the workflow.
            You cannot change the final state, but you should direct the links from the last custom components to this state.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.InitialStateName">
            <summary>
            Gets the initial state of the workflow.
            You cannot change the initial state, but you can use it for linking the first custom components to it.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.DivergingTracks">
            <summary>
            Gets the list of diverging tracks between the states. A track described by a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> goes from <c>TKey</c> and into the <c>TValue</c>, which are the names of states. <see cref="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.StraightTracks"/> and <see cref="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.DivergingTracks"/> together comprise the full set of tracks between the states.
            Each state can have any number of incoming tracks.
            The final state (<see cref="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.FinalStateName"/>) has no outgoing tracks.
            The “switch” state (<see cref="T:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowSwitchComponent"/>) has two emerging tracks, one of which is straight, and the other is diverging; whether to go straight or diverge is defined by the criterion on the track.
            All the other states have exactly one outgoing track, which is straight.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.HandlePostExecute">
            <summary>
            The list of handlers that are run on the Post Execute stage of the refactoring.
            TODO: define the stage
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.HandlePreExecute">
            <summary>
            The list of handlers that are run on the Pre Execute stage of the refactoring.
            TODO: define the stage
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.HandleRollbackPreExecute">
            <summary>
            The list of handlers that are run to roll back the changes performed on the Pre Execute stage of the refactoring.
            TODO: define the stage
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.HandleTransExecute">
            <summary>
            The list of handlers that are run on the Execute stage of the refactoring.
            TODO: define the stage
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.States">
            <summary>
            Gets the collection of the states for this workflow chart.
            The string key is always the name of the component implementing the state.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.StraightTracks">
            <summary>
            Gets the list of straight tracks between the states. A track described by a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> goes from <c>TKey</c> and into the <c>TValue</c>, which are the names of states.
            See <see cref="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.DivergingTracks"/> for info on which of them are straight. Every state but the final one has an outgoing straight track.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.IsFrozen">
            <summary>
            Gets whether the object has been frozen.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowComponent">
            <summary>
            The base component of the refactoring workflow.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowComponent.myIsFrozen">
            <summary>
            A prop that allows to listen for changes.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowComponent.#ctor(System.String)">
            <summary>
            Creates the component, setting its name. From this point on, the name does not change.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowComponent.AssertValid">
            <summary>
            Checks constraints on the object. Throws if violated.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowComponent.Clone">
            <summary>
            Creates a shallow copy of the instance.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowComponent.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowComponent.Freeze">
            <summary>
            Freezes the object. This action is irrevertible.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowComponent.Name">
            <summary>
            Gets the name of the component.
            This name cannot change.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowComponent.IsFrozen">
            <summary>
            Gets whether the object has been frozen.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowDataComponent">
            <summary>
            Represents a page node in the refactoring workflow chart.
            A page is a data-only node; it can collect data from the consumer (with UI controls in the case when refactorings are running in the UI mode), and should not run any activities other than for the needs of the data collectors on the page.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowDataComponent.#ctor(System.String,System.Type)">
            <summary>
            Initializes the data component with a unique name and the type of the page it presents.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowDataComponent.CreatePage(JetBrains.DataFlow.IPropertyBag)">
            <summary>
            Creates a new instance of the page object.
            The properties in the <paramref name="bag"/> can be used to initialize it with the context.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowDataComponent.PageType">
            <summary>
            Gets or sets the type that implements the <see cref="T:JetBrains.ReSharper.Refactorings.Infra.IRefactoringPage"/> interface and holds the data and presentation of this data component.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowDataComponent`1">
            <summary>
            Represents a page node in the refactoring workflow chart.
            A page is a data-only node; it can collect data from the consumer (with UI controls in the case when refactorings are running in the UI mode), and should not run any activities other than for the needs of the data collectors on the page.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowDataComponent`1.AssertValid">
            <summary>
            Checks constraints on the object. Throws if violated.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowDataComponent`1.Clone">
            <summary>
            Creates a shallow copy of the instance.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowDataComponent`1.CreatePage(JetBrains.DataFlow.IPropertyBag)">
            <summary>
            Creates a new instance of the page object.
            The properties in the <paramref name="bag"/> can be used to initialize it with the context.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowDataComponent`1.FuncCreateDataPage">
            <summary>
            Gets or sets the function that instantiates the data page object.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Infra.EmptyRefactoringPage">
            <summary>
            A refactoring page stub that has no data fields and an empty view.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowActivityComponent">
            <summary>
            The activities are inserted between the pages and prepare data for the following pages, or direct the flow of the chart.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowActivityComponent.#ctor(System.String,System.Action{JetBrains.DataFlow.IPropertyBag})">
            <summary>
            Initializes the activity component by assigning it a name and the action to be performed upon execution.
            </summary>
            <param name="name">A unique name for this component. Cannot be changed after the component is created.</param>
            <param name="activity">The action to be performed. Can be reassigned later.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowActivityComponent.AssertValid">
            <summary>
            Checks constraints on the object. Throws if violated.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowActivityComponent.Clone">
            <summary>
            Creates a shallow copy of the instance.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowActivityComponent.Activity">
            <summary>
            Gets or sets the implementation of the activity.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowSwitchComponent">
            <summary>
            A junction allows to branch the execution path depending on the value.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowSwitchComponent.#ctor(System.String,System.Func{JetBrains.DataFlow.IPropertyBag,System.Boolean})">
            <summary>
            Initializes the switch component with a name and the function that makes the decision.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowSwitchComponent.AssertValid">
            <summary>
            Checks constraints on the object. Throws if violated.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowSwitchComponent.Clone">
            <summary>
            Creates a shallow copy of the instance.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowSwitchComponent.IsDiverging">
            <summary>
            Gets or sets the diverge criteria: whether the execution flow will follow the straight track (<c>False</c>) or the diverging track (<c>True</c>).
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers">
            <summary>
            Helper methods for the chart that do not carry useful logic or access its internals.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.AddComponent(JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart,JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowComponent)">
            <summary>
            Adds a new state to the workflow.
            Same as calling <see cref="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart.States"/>::<see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> with the <paramref name="state"/>::<see cref="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowComponent.Name"/> as a key.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.After(JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart,JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.StringOrEnum)">
            <summary>
            Allows to add more components after the given one, on the straight path.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.AfterInitial(JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowChart)">
            <summary>
            Allows to add more components after the very first state of the chart.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.Queueing">
            <summary>
            Helps with queueing chart components, one after another.
            You pick the initial, then go adding to the sequence one by one.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.Queueing.AddActivity(JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.StringOrEnum,System.Action{JetBrains.DataFlow.IPropertyBag})">
            <summary>
            Adds one more activity to the chain.
            Always goes on the straight track after that.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.Queueing.AddData``1(JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.StringOrEnum,System.Func{JetBrains.DataFlow.IPropertyBag,``0})">
            <summary>
            Adds one more data (UI) component to the chain.
            Always goes on the straight track after that.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.Queueing.AddSwitch(JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.StringOrEnum,System.Func{JetBrains.DataFlow.IPropertyBag,System.Boolean})">
            <summary>
            Adds one more switch to the chain.
            Always goes on the straight track after that.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.Queueing.Diverge">
            <summary>
            The next (and only one) component will be added on a diverging track.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.Queueing.Link(JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.StringOrEnum)">
            <summary>
            Links to an already existing component (for example, when a diverging track goes around a data component).
            The active pointer moves to the <paramref name="sToName"/> component after that.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.Queueing.Stop">
            <summary>
            Links to the terminal state.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.Queueing.EitherTracks">
            <summary>
            Returns the appropriate tracks collection, based on <see cref="F:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.Queueing.myIsDiverging"/> value.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.StringOrEnum">
            <summary>
            A class that allows passing the name in as either a string or an enum member.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.StringOrEnum.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.StringOrEnum.Value">
            <summary>
            Gets the string value of the object, as it's stored.
            Same as <see cref="M:JetBrains.ReSharper.Refactorings.Infra.RefactoringWorkflowHelpers.StringOrEnum.ToString"/>.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.ValidationHost.JetBrains#ReSharper#Refactorings#Infra#IValidator#Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.Infra.ValidationHost.JetBrains#ReSharper#Refactorings#Infra#IValidator#Severity">
            <summary>
            Gets the severity of this validator in its current state.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Refactorings.WorkflowX.RefactoringView">
            <summary>
            Implements the view for the refactoring execution workflow.
            This control provides the Back/Forward buttons and presents the views of the refactoring pages.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.WorkflowX.RefactoringView.myCachePageViews">
            <summary>
            Caches the views of data component pages, to avoid creating a new instance each time we back-forward.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.WorkflowX.RefactoringView.myFlow_IsBusy">
            <summary>
            The executor is busy with some action.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.WorkflowX.RefactoringView.myViewEmptyCueBanner">
            <summary>
            A banner displayed when there is no useful content in the window.
            Created in <see cref="M:JetBrains.ReSharper.Refactorings.WorkflowX.RefactoringView.InitView_EmptyCueBanner"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Refactorings.WorkflowX.RefactoringView.myViewWizard">
            <summary>
            The variant of the view that implements the Refactoring Wizard.
            Available when there is a refactoring running, and that refactoring is in the UI stage.
            Created in <see cref="M:JetBrains.ReSharper.Refactorings.WorkflowX.RefactoringView.InitView_Wizard"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.WorkflowX.RefactoringView.Next">
            <summary>
            Performs the “Next” button action.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Refactorings.WorkflowX.RefactoringView.OnCurrentPageChanged_UiSequenceControl(JetBrains.DataFlow.PropertyChangedEventArgs{JetBrains.ReSharper.Refactorings.Infra.IRefactoringPage})">
            <summary>
            When a new page is assigned, starts listening for its UI Sequence Control events, if any.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Refactorings.WorkflowX.RefactoringView.Host">
            <summary>
            Gets the host for the refactoring workflow logic.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompilerImpl.myOutputLine">
            <summary>
            Fires when the compiler sends a line to the output.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompilerImpl.PublishInstance">
            <summary>
            Publishes the implementation instance into the public interface.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompilerImpl.OutputLine">
            <summary>
            Fires when the compiler sends a line to the output.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompilerImpl.MSBuildLogger">
            <summary>
            A logger that captures the MSBuild log events (status, error, warnings) and directs them into the SolutionBuilder log system.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompilerImpl.MSBuildLogger.Initialize(Microsoft.Build.Framework.IEventSource)">
            <summary>
            Subscribes loggers to specific events. This method is called when the logger is registered with the build engine, before any events are raised.
            </summary>
            
            <param name="eventSource">The events available to loggers.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompilerImpl.MSBuildLogger.Shutdown">
            <summary>
            Releases the resources allocated to the logger at the time of initialization or during the build. This method is called when the logger is unregistered from the engine, after all events are raised. A host of  typically unregisters loggers immediately before quitting.
            </summary>
            
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompilerImpl.MSBuildLogger.Parameters">
            <summary>
            Gets or sets the user-defined parameters of the logger. 
            </summary>
            
            <returns>
            The logger parameters.
            </returns>
            
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompilerImpl.MSBuildLogger.Verbosity">
            <summary>
            Gets or sets the level of detail to show in the event log.
            </summary>
            
            <returns>
            One of the enumeration values. The default is <see cref="F:Microsoft.Build.Framework.LoggerVerbosity.Normal"></see>.
            </returns>
            
        </member>
    </members>
</doc>
